// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecipientRequest RecipientRequest
//
// Used to request a recipient registration. In snake case to match IETF RFC 7591 naming formats
//
// swagger:model RecipientRequest
type RecipientRequest struct {

	// The Data Recipient or Data Recipient Application name displayed by Data Provider during the consent Flow as well as in the Consent Dashboard
	// Required: true
	// Max Length: 256
	ClientName *string `json:"client_name"`

	// The URI which provides additional information about the Data Recipient
	ClientURI string `json:"client_uri,omitempty"`

	// Array of strings representing ways to contact individuals responsible for the Data Recipient application
	Contacts []string `json:"contacts"`

	// A short description of the Data Recipient application
	Description string `json:"description,omitempty"`

	// The duration period is the maximum consent duration that would be requested for a Recipient consumer
	DurationPeriod float64 `json:"duration_period,omitempty"`

	// The duration of consent for the Data Recipient consumers
	DurationType []ConsentDurationType `json:"duration_type"`

	// An array of the intermediaries for this data recipient
	Intermediaries []*Intermediary `json:"intermediaries"`

	// Data Recipient Logo URL location
	LogoURI string `json:"logo_uri,omitempty"`

	// The maximum number of days allowed for Data Recipient consumers to obtain in transaction history, effective from the current date
	LookbackPeriod float64 `json:"lookback_period,omitempty"`

	// An array of eligible Redirect URI targets
	// Required: true
	RedirectUris []string `json:"redirect_uris"`

	// An array of external registries containing registered entity name, registered entity id and registry fields for the registries where the data recipient is registered
	RegistryReferences []*RegistryReference `json:"registry_references"`

	// String form field with a list of data clusters
	Scope string `json:"scope,omitempty"`
}

// Validate validates this recipient request
func (m *RecipientRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntermediaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirectUris(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryReferences(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecipientRequest) validateClientName(formats strfmt.Registry) error {

	if err := validate.Required("client_name", "body", m.ClientName); err != nil {
		return err
	}

	if err := validate.MaxLength("client_name", "body", *m.ClientName, 256); err != nil {
		return err
	}

	return nil
}

func (m *RecipientRequest) validateDurationType(formats strfmt.Registry) error {
	if swag.IsZero(m.DurationType) { // not required
		return nil
	}

	for i := 0; i < len(m.DurationType); i++ {

		if err := m.DurationType[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duration_type" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("duration_type" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *RecipientRequest) validateIntermediaries(formats strfmt.Registry) error {
	if swag.IsZero(m.Intermediaries) { // not required
		return nil
	}

	for i := 0; i < len(m.Intermediaries); i++ {
		if swag.IsZero(m.Intermediaries[i]) { // not required
			continue
		}

		if m.Intermediaries[i] != nil {
			if err := m.Intermediaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intermediaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("intermediaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecipientRequest) validateRedirectUris(formats strfmt.Registry) error {

	if err := validate.Required("redirect_uris", "body", m.RedirectUris); err != nil {
		return err
	}

	return nil
}

func (m *RecipientRequest) validateRegistryReferences(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistryReferences) { // not required
		return nil
	}

	for i := 0; i < len(m.RegistryReferences); i++ {
		if swag.IsZero(m.RegistryReferences[i]) { // not required
			continue
		}

		if m.RegistryReferences[i] != nil {
			if err := m.RegistryReferences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registry_references" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registry_references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this recipient request based on the context it is used
func (m *RecipientRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDurationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIntermediaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistryReferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecipientRequest) contextValidateDurationType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DurationType); i++ {

		if err := m.DurationType[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duration_type" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("duration_type" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *RecipientRequest) contextValidateIntermediaries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Intermediaries); i++ {

		if m.Intermediaries[i] != nil {
			if err := m.Intermediaries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intermediaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("intermediaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecipientRequest) contextValidateRegistryReferences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RegistryReferences); i++ {

		if m.RegistryReferences[i] != nil {
			if err := m.RegistryReferences[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registry_references" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registry_references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecipientRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecipientRequest) UnmarshalBinary(b []byte) error {
	var res RecipientRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
