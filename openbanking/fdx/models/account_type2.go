// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AccountType2 AccountType2
//
// Account type
//
// swagger:model AccountType2
type AccountType2 string

func NewAccountType2(value AccountType2) *AccountType2 {
	v := value
	return &v
}

const (

	// AccountType2Nr401A captures enum value "401A"
	AccountType2Nr401A AccountType2 = "401A"

	// AccountType2Nr401K captures enum value "401K"
	AccountType2Nr401K AccountType2 = "401K"

	// AccountType2Nr403B captures enum value "403B"
	AccountType2Nr403B AccountType2 = "403B"

	// AccountType2Nr529 captures enum value "529"
	AccountType2Nr529 AccountType2 = "529"

	// AccountType2ANNUITY captures enum value "ANNUITY"
	AccountType2ANNUITY AccountType2 = "ANNUITY"

	// AccountType2AUTOLOAN captures enum value "AUTOLOAN"
	AccountType2AUTOLOAN AccountType2 = "AUTOLOAN"

	// AccountType2BROKERAGEPRODUCT captures enum value "BROKERAGEPRODUCT"
	AccountType2BROKERAGEPRODUCT AccountType2 = "BROKERAGEPRODUCT"

	// AccountType2CD captures enum value "CD"
	AccountType2CD AccountType2 = "CD"

	// AccountType2CHARGE captures enum value "CHARGE"
	AccountType2CHARGE AccountType2 = "CHARGE"

	// AccountType2CHECKING captures enum value "CHECKING"
	AccountType2CHECKING AccountType2 = "CHECKING"

	// AccountType2COMMERCIALDEPOSIT captures enum value "COMMERCIALDEPOSIT"
	AccountType2COMMERCIALDEPOSIT AccountType2 = "COMMERCIALDEPOSIT"

	// AccountType2COMMERCIALINVESTMENT captures enum value "COMMERCIALINVESTMENT"
	AccountType2COMMERCIALINVESTMENT AccountType2 = "COMMERCIALINVESTMENT"

	// AccountType2COMMERCIALLINEOFCREDIT captures enum value "COMMERCIALLINEOFCREDIT"
	AccountType2COMMERCIALLINEOFCREDIT AccountType2 = "COMMERCIALLINEOFCREDIT"

	// AccountType2COMMERCIALLOAN captures enum value "COMMERCIALLOAN"
	AccountType2COMMERCIALLOAN AccountType2 = "COMMERCIALLOAN"

	// AccountType2COVERDELL captures enum value "COVERDELL"
	AccountType2COVERDELL AccountType2 = "COVERDELL"

	// AccountType2CREDITCARD captures enum value "CREDITCARD"
	AccountType2CREDITCARD AccountType2 = "CREDITCARD"

	// AccountType2DEFINEDBENEFIT captures enum value "DEFINEDBENEFIT"
	AccountType2DEFINEDBENEFIT AccountType2 = "DEFINEDBENEFIT"

	// AccountType2DIGITALASSET captures enum value "DIGITALASSET"
	AccountType2DIGITALASSET AccountType2 = "DIGITALASSET"

	// AccountType2ESCROW captures enum value "ESCROW"
	AccountType2ESCROW AccountType2 = "ESCROW"

	// AccountType2ESOP captures enum value "ESOP"
	AccountType2ESOP AccountType2 = "ESOP"

	// AccountType2FIXEDANNUITY captures enum value "FIXEDANNUITY"
	AccountType2FIXEDANNUITY AccountType2 = "FIXEDANNUITY"

	// AccountType2GUARDIAN captures enum value "GUARDIAN"
	AccountType2GUARDIAN AccountType2 = "GUARDIAN"

	// AccountType2HOMEEQUITYLOAN captures enum value "HOMEEQUITYLOAN"
	AccountType2HOMEEQUITYLOAN AccountType2 = "HOMEEQUITYLOAN"

	// AccountType2HOMELINEOFCREDIT captures enum value "HOMELINEOFCREDIT"
	AccountType2HOMELINEOFCREDIT AccountType2 = "HOMELINEOFCREDIT"

	// AccountType2INSTALLMENT captures enum value "INSTALLMENT"
	AccountType2INSTALLMENT AccountType2 = "INSTALLMENT"

	// AccountType2INSTITUTIONALTRUST captures enum value "INSTITUTIONALTRUST"
	AccountType2INSTITUTIONALTRUST AccountType2 = "INSTITUTIONALTRUST"

	// AccountType2IRA captures enum value "IRA"
	AccountType2IRA AccountType2 = "IRA"

	// AccountType2KEOGH captures enum value "KEOGH"
	AccountType2KEOGH AccountType2 = "KEOGH"

	// AccountType2LINEOFCREDIT captures enum value "LINEOFCREDIT"
	AccountType2LINEOFCREDIT AccountType2 = "LINEOFCREDIT"

	// AccountType2LOAN captures enum value "LOAN"
	AccountType2LOAN AccountType2 = "LOAN"

	// AccountType2LONGTERMDISABILITY captures enum value "LONGTERMDISABILITY"
	AccountType2LONGTERMDISABILITY AccountType2 = "LONGTERMDISABILITY"

	// AccountType2MILITARYLOAN captures enum value "MILITARYLOAN"
	AccountType2MILITARYLOAN AccountType2 = "MILITARYLOAN"

	// AccountType2MONEYMARKET captures enum value "MONEYMARKET"
	AccountType2MONEYMARKET AccountType2 = "MONEYMARKET"

	// AccountType2MORTGAGE captures enum value "MORTGAGE"
	AccountType2MORTGAGE AccountType2 = "MORTGAGE"

	// AccountType2NONQUALIFIEDPLAN captures enum value "NONQUALIFIEDPLAN"
	AccountType2NONQUALIFIEDPLAN AccountType2 = "NONQUALIFIEDPLAN"

	// AccountType2OTHERDEPOSIT captures enum value "OTHERDEPOSIT"
	AccountType2OTHERDEPOSIT AccountType2 = "OTHERDEPOSIT"

	// AccountType2OTHERINVESTMENT captures enum value "OTHERINVESTMENT"
	AccountType2OTHERINVESTMENT AccountType2 = "OTHERINVESTMENT"

	// AccountType2PERSONALLOAN captures enum value "PERSONALLOAN"
	AccountType2PERSONALLOAN AccountType2 = "PERSONALLOAN"

	// AccountType2ROLLOVER captures enum value "ROLLOVER"
	AccountType2ROLLOVER AccountType2 = "ROLLOVER"

	// AccountType2ROTH captures enum value "ROTH"
	AccountType2ROTH AccountType2 = "ROTH"

	// AccountType2SARSEP captures enum value "SARSEP"
	AccountType2SARSEP AccountType2 = "SARSEP"

	// AccountType2SAVINGS captures enum value "SAVINGS"
	AccountType2SAVINGS AccountType2 = "SAVINGS"

	// AccountType2SMBLOAN captures enum value "SMBLOAN"
	AccountType2SMBLOAN AccountType2 = "SMBLOAN"

	// AccountType2SHORTTERMDISABILITY captures enum value "SHORTTERMDISABILITY"
	AccountType2SHORTTERMDISABILITY AccountType2 = "SHORTTERMDISABILITY"

	// AccountType2STUDENTLOAN captures enum value "STUDENTLOAN"
	AccountType2STUDENTLOAN AccountType2 = "STUDENTLOAN"

	// AccountType2TAXABLE captures enum value "TAXABLE"
	AccountType2TAXABLE AccountType2 = "TAXABLE"

	// AccountType2TDA captures enum value "TDA"
	AccountType2TDA AccountType2 = "TDA"

	// AccountType2TERM captures enum value "TERM"
	AccountType2TERM AccountType2 = "TERM"

	// AccountType2TRUST captures enum value "TRUST"
	AccountType2TRUST AccountType2 = "TRUST"

	// AccountType2UGMA captures enum value "UGMA"
	AccountType2UGMA AccountType2 = "UGMA"

	// AccountType2UNIVERSALLIFE captures enum value "UNIVERSALLIFE"
	AccountType2UNIVERSALLIFE AccountType2 = "UNIVERSALLIFE"

	// AccountType2UTMA captures enum value "UTMA"
	AccountType2UTMA AccountType2 = "UTMA"

	// AccountType2VARIABLEANNUITY captures enum value "VARIABLEANNUITY"
	AccountType2VARIABLEANNUITY AccountType2 = "VARIABLEANNUITY"

	// AccountType2WHOLELIFE captures enum value "WHOLELIFE"
	AccountType2WHOLELIFE AccountType2 = "WHOLELIFE"
)

// for schema
var accountType2Enum []interface{}

func init() {
	var res []AccountType2
	if err := json.Unmarshal([]byte(`["401A","401K","403B","529","ANNUITY","AUTOLOAN","BROKERAGEPRODUCT","CD","CHARGE","CHECKING","COMMERCIALDEPOSIT","COMMERCIALINVESTMENT","COMMERCIALLINEOFCREDIT","COMMERCIALLOAN","COVERDELL","CREDITCARD","DEFINEDBENEFIT","DIGITALASSET","ESCROW","ESOP","FIXEDANNUITY","GUARDIAN","HOMEEQUITYLOAN","HOMELINEOFCREDIT","INSTALLMENT","INSTITUTIONALTRUST","IRA","KEOGH","LINEOFCREDIT","LOAN","LONGTERMDISABILITY","MILITARYLOAN","MONEYMARKET","MORTGAGE","NONQUALIFIEDPLAN","OTHERDEPOSIT","OTHERINVESTMENT","PERSONALLOAN","ROLLOVER","ROTH","SARSEP","SAVINGS","SMBLOAN","SHORTTERMDISABILITY","STUDENTLOAN","TAXABLE","TDA","TERM","TRUST","UGMA","UNIVERSALLIFE","UTMA","VARIABLEANNUITY","WHOLELIFE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountType2Enum = append(accountType2Enum, v)
	}
}

func (m AccountType2) validateAccountType2Enum(path, location string, value AccountType2) error {
	if err := validate.EnumCase(path, location, value, accountType2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this account type2
func (m AccountType2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAccountType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this account type2 based on context it is used
func (m AccountType2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
