// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AccountBillPayStatus AccountBillPayStatus
//
// Indicates bill pay capabilities for an account.<br/> * `ACTIVE`: Can be used for bill payment<br/> * `AVAILABLE`: Account can be requested for bill payment<br/> * `NOT_AVAILABLE`: Account cannot participate in bill payment<br/> * `PENDING`: Account requested for bill payment, but not available yet
//
// swagger:model AccountBillPayStatus
type AccountBillPayStatus string

func NewAccountBillPayStatus(value AccountBillPayStatus) *AccountBillPayStatus {
	v := value
	return &v
}

const (

	// AccountBillPayStatusACTIVE captures enum value "ACTIVE"
	AccountBillPayStatusACTIVE AccountBillPayStatus = "ACTIVE"

	// AccountBillPayStatusAVAILABLE captures enum value "AVAILABLE"
	AccountBillPayStatusAVAILABLE AccountBillPayStatus = "AVAILABLE"

	// AccountBillPayStatusNOTAVAILABLE captures enum value "NOT_AVAILABLE"
	AccountBillPayStatusNOTAVAILABLE AccountBillPayStatus = "NOT_AVAILABLE"

	// AccountBillPayStatusPENDING captures enum value "PENDING"
	AccountBillPayStatusPENDING AccountBillPayStatus = "PENDING"
)

// for schema
var accountBillPayStatusEnum []interface{}

func init() {
	var res []AccountBillPayStatus
	if err := json.Unmarshal([]byte(`["ACTIVE","AVAILABLE","NOT_AVAILABLE","PENDING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountBillPayStatusEnum = append(accountBillPayStatusEnum, v)
	}
}

func (m AccountBillPayStatus) validateAccountBillPayStatusEnum(path, location string, value AccountBillPayStatus) error {
	if err := validate.EnumCase(path, location, value, accountBillPayStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this account bill pay status
func (m AccountBillPayStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAccountBillPayStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this account bill pay status based on context it is used
func (m AccountBillPayStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
