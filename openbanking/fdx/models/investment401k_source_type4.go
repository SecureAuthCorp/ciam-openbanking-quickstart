// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Investment401kSourceType4 Investment401kSourceType4
//
// Source for money for this security. One of PRETAX, AFTERTAX, MATCH, PROFITSHARING, ROLLOVER, OTHERVEST, OTHERNONVEST
//
// swagger:model Investment401kSourceType4
type Investment401kSourceType4 string

func NewInvestment401kSourceType4(value Investment401kSourceType4) *Investment401kSourceType4 {
	v := value
	return &v
}

const (

	// Investment401kSourceType4AFTERTAX captures enum value "AFTERTAX"
	Investment401kSourceType4AFTERTAX Investment401kSourceType4 = "AFTERTAX"

	// Investment401kSourceType4MATCH captures enum value "MATCH"
	Investment401kSourceType4MATCH Investment401kSourceType4 = "MATCH"

	// Investment401kSourceType4OTHERNONVEST captures enum value "OTHERNONVEST"
	Investment401kSourceType4OTHERNONVEST Investment401kSourceType4 = "OTHERNONVEST"

	// Investment401kSourceType4OTHERVEST captures enum value "OTHERVEST"
	Investment401kSourceType4OTHERVEST Investment401kSourceType4 = "OTHERVEST"

	// Investment401kSourceType4PRETAX captures enum value "PRETAX"
	Investment401kSourceType4PRETAX Investment401kSourceType4 = "PRETAX"

	// Investment401kSourceType4PROFITSHARING captures enum value "PROFITSHARING"
	Investment401kSourceType4PROFITSHARING Investment401kSourceType4 = "PROFITSHARING"

	// Investment401kSourceType4ROLLOVER captures enum value "ROLLOVER"
	Investment401kSourceType4ROLLOVER Investment401kSourceType4 = "ROLLOVER"
)

// for schema
var investment401kSourceType4Enum []interface{}

func init() {
	var res []Investment401kSourceType4
	if err := json.Unmarshal([]byte(`["AFTERTAX","MATCH","OTHERNONVEST","OTHERVEST","PRETAX","PROFITSHARING","ROLLOVER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		investment401kSourceType4Enum = append(investment401kSourceType4Enum, v)
	}
}

func (m Investment401kSourceType4) validateInvestment401kSourceType4Enum(path, location string, value Investment401kSourceType4) error {
	if err := validate.EnumCase(path, location, value, investment401kSourceType4Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this investment401k source type4
func (m Investment401kSourceType4) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInvestment401kSourceType4Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this investment401k source type4 based on context it is used
func (m Investment401kSourceType4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
