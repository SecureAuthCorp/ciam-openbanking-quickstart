// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DocumentStatus DocumentStatus
//
// Defines the status of a document
//
// swagger:model DocumentStatus
type DocumentStatus string

func NewDocumentStatus(value DocumentStatus) *DocumentStatus {
	v := value
	return &v
}

const (

	// DocumentStatusAVAILABLE captures enum value "AVAILABLE"
	DocumentStatusAVAILABLE DocumentStatus = "AVAILABLE"

	// DocumentStatusPROCESSING captures enum value "PROCESSING"
	DocumentStatusPROCESSING DocumentStatus = "PROCESSING"

	// DocumentStatusFAILED captures enum value "FAILED"
	DocumentStatusFAILED DocumentStatus = "FAILED"
)

// for schema
var documentStatusEnum []interface{}

func init() {
	var res []DocumentStatus
	if err := json.Unmarshal([]byte(`["AVAILABLE","PROCESSING","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		documentStatusEnum = append(documentStatusEnum, v)
	}
}

func (m DocumentStatus) validateDocumentStatusEnum(path, location string, value DocumentStatus) error {
	if err := validate.EnumCase(path, location, value, documentStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this document status
func (m DocumentStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDocumentStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this document status based on context it is used
func (m DocumentStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
