// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Recurringpaymentdurationtypeenum Recurringpaymentdurationtypeenum
//
// Describes if the recurring payment has an end or will occur a fixed number of times
//
// swagger:model Recurringpaymentdurationtypeenum
type Recurringpaymentdurationtypeenum string

func NewRecurringpaymentdurationtypeenum(value Recurringpaymentdurationtypeenum) *Recurringpaymentdurationtypeenum {
	v := value
	return &v
}

const (

	// RecurringpaymentdurationtypeenumNOEND captures enum value "NOEND"
	RecurringpaymentdurationtypeenumNOEND Recurringpaymentdurationtypeenum = "NOEND"

	// RecurringpaymentdurationtypeenumNUMBEROFTIMES captures enum value "NUMBEROFTIMES"
	RecurringpaymentdurationtypeenumNUMBEROFTIMES Recurringpaymentdurationtypeenum = "NUMBEROFTIMES"
)

// for schema
var recurringpaymentdurationtypeenumEnum []interface{}

func init() {
	var res []Recurringpaymentdurationtypeenum
	if err := json.Unmarshal([]byte(`["NOEND","NUMBEROFTIMES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recurringpaymentdurationtypeenumEnum = append(recurringpaymentdurationtypeenumEnum, v)
	}
}

func (m Recurringpaymentdurationtypeenum) validateRecurringpaymentdurationtypeenumEnum(path, location string, value Recurringpaymentdurationtypeenum) error {
	if err := validate.EnumCase(path, location, value, recurringpaymentdurationtypeenumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this recurringpaymentdurationtypeenum
func (m Recurringpaymentdurationtypeenum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRecurringpaymentdurationtypeenumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this recurringpaymentdurationtypeenum based on context it is used
func (m Recurringpaymentdurationtypeenum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
