// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PayoutMode2 PayoutMode2
//
// Frequency of annuity payments
//
// swagger:model PayoutMode2
type PayoutMode2 string

func NewPayoutMode2(value PayoutMode2) *PayoutMode2 {
	v := value
	return &v
}

const (

	// PayoutMode2ANNUALLY captures enum value "ANNUALLY"
	PayoutMode2ANNUALLY PayoutMode2 = "ANNUALLY"

	// PayoutMode2BIWEEKLY captures enum value "BIWEEKLY"
	PayoutMode2BIWEEKLY PayoutMode2 = "BIWEEKLY"

	// PayoutMode2DAILY captures enum value "DAILY"
	PayoutMode2DAILY PayoutMode2 = "DAILY"

	// PayoutMode2MONTHLY captures enum value "MONTHLY"
	PayoutMode2MONTHLY PayoutMode2 = "MONTHLY"

	// PayoutMode2SEMIANNUALLY captures enum value "SEMIANNUALLY"
	PayoutMode2SEMIANNUALLY PayoutMode2 = "SEMIANNUALLY"

	// PayoutMode2SEMIMONTHLY captures enum value "SEMIMONTHLY"
	PayoutMode2SEMIMONTHLY PayoutMode2 = "SEMIMONTHLY"

	// PayoutMode2WEEKLY captures enum value "WEEKLY"
	PayoutMode2WEEKLY PayoutMode2 = "WEEKLY"
)

// for schema
var payoutMode2Enum []interface{}

func init() {
	var res []PayoutMode2
	if err := json.Unmarshal([]byte(`["ANNUALLY","BIWEEKLY","DAILY","MONTHLY","SEMIANNUALLY","SEMIMONTHLY","WEEKLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		payoutMode2Enum = append(payoutMode2Enum, v)
	}
}

func (m PayoutMode2) validatePayoutMode2Enum(path, location string, value PayoutMode2) error {
	if err := validate.EnumCase(path, location, value, payoutMode2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payout mode2
func (m PayoutMode2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePayoutMode2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this payout mode2 based on context it is used
func (m PayoutMode2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
