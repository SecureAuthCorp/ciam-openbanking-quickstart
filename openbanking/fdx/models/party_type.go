// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PartyType PartyType
//
// Identifies the type of a party
//
// swagger:model PartyType
type PartyType string

func NewPartyType(value PartyType) *PartyType {
	v := value
	return &v
}

const (

	// PartyTypeDATAACCESSPLATFORM captures enum value "DATA_ACCESS_PLATFORM"
	PartyTypeDATAACCESSPLATFORM PartyType = "DATA_ACCESS_PLATFORM"

	// PartyTypeDATAPROVIDER captures enum value "DATA_PROVIDER"
	PartyTypeDATAPROVIDER PartyType = "DATA_PROVIDER"

	// PartyTypeDATARECIPIENT captures enum value "DATA_RECIPIENT"
	PartyTypeDATARECIPIENT PartyType = "DATA_RECIPIENT"

	// PartyTypeINDIVIDUAL captures enum value "INDIVIDUAL"
	PartyTypeINDIVIDUAL PartyType = "INDIVIDUAL"

	// PartyTypeMERCHANT captures enum value "MERCHANT"
	PartyTypeMERCHANT PartyType = "MERCHANT"

	// PartyTypeVENDOR captures enum value "VENDOR"
	PartyTypeVENDOR PartyType = "VENDOR"
)

// for schema
var partyTypeEnum []interface{}

func init() {
	var res []PartyType
	if err := json.Unmarshal([]byte(`["DATA_ACCESS_PLATFORM","DATA_PROVIDER","DATA_RECIPIENT","INDIVIDUAL","MERCHANT","VENDOR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		partyTypeEnum = append(partyTypeEnum, v)
	}
}

func (m PartyType) validatePartyTypeEnum(path, location string, value PartyType) error {
	if err := validate.EnumCase(path, location, value, partyTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this party type
func (m PartyType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePartyTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this party type based on context it is used
func (m PartyType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
