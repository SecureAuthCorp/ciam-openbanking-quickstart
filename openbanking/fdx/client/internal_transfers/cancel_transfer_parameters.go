// Code generated by go-swagger; DO NOT EDIT.

package internal_transfers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCancelTransferParams creates a new CancelTransferParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCancelTransferParams() *CancelTransferParams {
	return &CancelTransferParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCancelTransferParamsWithTimeout creates a new CancelTransferParams object
// with the ability to set a timeout on a request.
func NewCancelTransferParamsWithTimeout(timeout time.Duration) *CancelTransferParams {
	return &CancelTransferParams{
		timeout: timeout,
	}
}

// NewCancelTransferParamsWithContext creates a new CancelTransferParams object
// with the ability to set a context for a request.
func NewCancelTransferParamsWithContext(ctx context.Context) *CancelTransferParams {
	return &CancelTransferParams{
		Context: ctx,
	}
}

// NewCancelTransferParamsWithHTTPClient creates a new CancelTransferParams object
// with the ability to set a custom HTTPClient for a request.
func NewCancelTransferParamsWithHTTPClient(client *http.Client) *CancelTransferParams {
	return &CancelTransferParams{
		HTTPClient: client,
	}
}

/* CancelTransferParams contains all the parameters to send to the API endpoint
   for the cancel transfer operation.

   Typically these are written to a http.Request.
*/
type CancelTransferParams struct {

	/* TransferID.

	   Transfer identifier
	*/
	TransferID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cancel transfer params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CancelTransferParams) WithDefaults() *CancelTransferParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cancel transfer params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CancelTransferParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the cancel transfer params
func (o *CancelTransferParams) WithTimeout(timeout time.Duration) *CancelTransferParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cancel transfer params
func (o *CancelTransferParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cancel transfer params
func (o *CancelTransferParams) WithContext(ctx context.Context) *CancelTransferParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cancel transfer params
func (o *CancelTransferParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cancel transfer params
func (o *CancelTransferParams) WithHTTPClient(client *http.Client) *CancelTransferParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cancel transfer params
func (o *CancelTransferParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTransferID adds the transferID to the cancel transfer params
func (o *CancelTransferParams) WithTransferID(transferID string) *CancelTransferParams {
	o.SetTransferID(transferID)
	return o
}

// SetTransferID adds the transferId to the cancel transfer params
func (o *CancelTransferParams) SetTransferID(transferID string) {
	o.TransferID = transferID
}

// WriteToRequest writes these params to a swagger request
func (o *CancelTransferParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param transferId
	if err := r.SetPathParam("transferId", o.TransferID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
