// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AssetClass AssetClass
//
// The class of an investment asset
//
// swagger:model AssetClass
type AssetClass string

func NewAssetClass(value AssetClass) *AssetClass {
	v := value
	return &v
}

const (

	// AssetClassDOMESTICBOND captures enum value "DOMESTICBOND"
	AssetClassDOMESTICBOND AssetClass = "DOMESTICBOND"

	// AssetClassINTLBOND captures enum value "INTLBOND"
	AssetClassINTLBOND AssetClass = "INTLBOND"

	// AssetClassINTLSTOCK captures enum value "INTLSTOCK"
	AssetClassINTLSTOCK AssetClass = "INTLSTOCK"

	// AssetClassLARGESTOCK captures enum value "LARGESTOCK"
	AssetClassLARGESTOCK AssetClass = "LARGESTOCK"

	// AssetClassMONEYMARKET captures enum value "MONEYMARKET"
	AssetClassMONEYMARKET AssetClass = "MONEYMARKET"

	// AssetClassOTHER captures enum value "OTHER"
	AssetClassOTHER AssetClass = "OTHER"

	// AssetClassSMALLSTOCK captures enum value "SMALLSTOCK"
	AssetClassSMALLSTOCK AssetClass = "SMALLSTOCK"
)

// for schema
var assetClassEnum []interface{}

func init() {
	var res []AssetClass
	if err := json.Unmarshal([]byte(`["DOMESTICBOND","INTLBOND","INTLSTOCK","LARGESTOCK","MONEYMARKET","OTHER","SMALLSTOCK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetClassEnum = append(assetClassEnum, v)
	}
}

func (m AssetClass) validateAssetClassEnum(path, location string, value AssetClass) error {
	if err := validate.EnumCase(path, location, value, assetClassEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this asset class
func (m AssetClass) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAssetClassEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this asset class based on context it is used
func (m AssetClass) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
