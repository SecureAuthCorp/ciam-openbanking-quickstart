// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PolicyStatus PolicyStatus
//
// The status of an insurance policy account.<br/> <br/> | Value | Description |<br/> |-----|-----|<br/> | ACTIVE | At least one component of the insurance policy is in force |<br/> | DEATH_CLAIM_PAID | Benefits for a death claim have been settled with the insured |<br/> | DEATH_CLAIM_PENDING | A death claim has been submitted but not yet settled |<br/> | EXPIRED | Nonpayment of premium has exhausted the policy's Grace Period |<br/> | GRACE_PERIOD | A premium is due but before lapse in coverage begins |<br/> | LAPSE_PENDING | After the Grace Period has been exhausted but before final expiration; during Lapse Pending, policy reinstatement may still be possible |<br/> | TERMINATED | Either the insurance company or the insured cancel the coverage of a cancellable insurance policy |<br/> | WAIVER | A premium payment is waived under certain conditions due to a payer benefit clause |
//
// swagger:model PolicyStatus
type PolicyStatus string

func NewPolicyStatus(value PolicyStatus) *PolicyStatus {
	v := value
	return &v
}

const (

	// PolicyStatusACTIVE captures enum value "ACTIVE"
	PolicyStatusACTIVE PolicyStatus = "ACTIVE"

	// PolicyStatusDEATHCLAIMPAID captures enum value "DEATH_CLAIM_PAID"
	PolicyStatusDEATHCLAIMPAID PolicyStatus = "DEATH_CLAIM_PAID"

	// PolicyStatusDEATHCLAIMPENDING captures enum value "DEATH_CLAIM_PENDING"
	PolicyStatusDEATHCLAIMPENDING PolicyStatus = "DEATH_CLAIM_PENDING"

	// PolicyStatusEXPIRED captures enum value "EXPIRED"
	PolicyStatusEXPIRED PolicyStatus = "EXPIRED"

	// PolicyStatusGRACEPERIOD captures enum value "GRACE_PERIOD"
	PolicyStatusGRACEPERIOD PolicyStatus = "GRACE_PERIOD"

	// PolicyStatusLAPSEPENDING captures enum value "LAPSE_PENDING"
	PolicyStatusLAPSEPENDING PolicyStatus = "LAPSE_PENDING"

	// PolicyStatusTERMINATED captures enum value "TERMINATED"
	PolicyStatusTERMINATED PolicyStatus = "TERMINATED"

	// PolicyStatusWAIVER captures enum value "WAIVER"
	PolicyStatusWAIVER PolicyStatus = "WAIVER"
)

// for schema
var policyStatusEnum []interface{}

func init() {
	var res []PolicyStatus
	if err := json.Unmarshal([]byte(`["ACTIVE","DEATH_CLAIM_PAID","DEATH_CLAIM_PENDING","EXPIRED","GRACE_PERIOD","LAPSE_PENDING","TERMINATED","WAIVER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyStatusEnum = append(policyStatusEnum, v)
	}
}

func (m PolicyStatus) validatePolicyStatusEnum(path, location string, value PolicyStatus) error {
	if err := validate.EnumCase(path, location, value, policyStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this policy status
func (m PolicyStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePolicyStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this policy status based on context it is used
func (m PolicyStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
