// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MutualFundSecurityentity2 MutualFundSecurityentity2
//
// A mutual fund security
//
// swagger:model MutualFundSecurityentity2
type MutualFundSecurityentity2 struct {

	// mutual fund type
	MutualFundType MutualFundType2 `json:"mutualFundType,omitempty"`

	// Reinvest capital gains
	ReinvestCapitalGains bool `json:"reinvestCapitalGains,omitempty"`

	// Reinvest dividends
	ReinvestDividends bool `json:"reinvestDividends,omitempty"`

	// Units in the FI's street name, positive quantity
	UnitsStreet float64 `json:"unitsStreet,omitempty"`

	// Units in user's name directly, positive  quantity
	UnitsUser float64 `json:"unitsUser,omitempty"`

	// Current yield reported as portion of the fund's assets
	Yield float64 `json:"yield,omitempty"`

	// As-of date for yield value
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	YieldAsOfDate strfmt.Date `json:"yieldAsOfDate,omitempty"`
}

// Validate validates this mutual fund securityentity2
func (m *MutualFundSecurityentity2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMutualFundType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYieldAsOfDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MutualFundSecurityentity2) validateMutualFundType(formats strfmt.Registry) error {
	if swag.IsZero(m.MutualFundType) { // not required
		return nil
	}

	if err := m.MutualFundType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mutualFundType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mutualFundType")
		}
		return err
	}

	return nil
}

func (m *MutualFundSecurityentity2) validateYieldAsOfDate(formats strfmt.Registry) error {
	if swag.IsZero(m.YieldAsOfDate) { // not required
		return nil
	}

	if err := validate.FormatOf("yieldAsOfDate", "body", "date", m.YieldAsOfDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this mutual fund securityentity2 based on the context it is used
func (m *MutualFundSecurityentity2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMutualFundType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MutualFundSecurityentity2) contextValidateMutualFundType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MutualFundType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mutualFundType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mutualFundType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MutualFundSecurityentity2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MutualFundSecurityentity2) UnmarshalBinary(b []byte) error {
	var res MutualFundSecurityentity2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
