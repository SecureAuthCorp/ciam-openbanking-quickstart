// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UnitType1 UnitType1
//
// SHARES, CURRENCY
//
// swagger:model UnitType1
type UnitType1 string

func NewUnitType1(value UnitType1) *UnitType1 {
	v := value
	return &v
}

const (

	// UnitType1CURRENCY captures enum value "CURRENCY"
	UnitType1CURRENCY UnitType1 = "CURRENCY"

	// UnitType1SHARES captures enum value "SHARES"
	UnitType1SHARES UnitType1 = "SHARES"
)

// for schema
var unitType1Enum []interface{}

func init() {
	var res []UnitType1
	if err := json.Unmarshal([]byte(`["CURRENCY","SHARES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		unitType1Enum = append(unitType1Enum, v)
	}
}

func (m UnitType1) validateUnitType1Enum(path, location string, value UnitType1) error {
	if err := validate.EnumCase(path, location, value, unitType1Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this unit type1
func (m UnitType1) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUnitType1Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this unit type1 based on context it is used
func (m UnitType1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
