// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PeriodCertainGuarantee PeriodCertainGuarantee
//
// The guaranteed payment period on an annuity.  Deprecated, will be removed in v6.0
//
// swagger:model PeriodCertainGuarantee
type PeriodCertainGuarantee string

func NewPeriodCertainGuarantee(value PeriodCertainGuarantee) *PeriodCertainGuarantee {
	v := value
	return &v
}

const (

	// PeriodCertainGuaranteeNONE captures enum value "NONE"
	PeriodCertainGuaranteeNONE PeriodCertainGuarantee = "NONE"

	// PeriodCertainGuaranteeNr5DashYEAR captures enum value "5-YEAR"
	PeriodCertainGuaranteeNr5DashYEAR PeriodCertainGuarantee = "5-YEAR"

	// PeriodCertainGuaranteeNr10DashYEAR captures enum value "10-YEAR"
	PeriodCertainGuaranteeNr10DashYEAR PeriodCertainGuarantee = "10-YEAR"

	// PeriodCertainGuaranteeNr20DashYEAR captures enum value "20-YEAR"
	PeriodCertainGuaranteeNr20DashYEAR PeriodCertainGuarantee = "20-YEAR"

	// PeriodCertainGuaranteeNr30DashYEAR captures enum value "30-YEAR"
	PeriodCertainGuaranteeNr30DashYEAR PeriodCertainGuarantee = "30-YEAR"
)

// for schema
var periodCertainGuaranteeEnum []interface{}

func init() {
	var res []PeriodCertainGuarantee
	if err := json.Unmarshal([]byte(`["NONE","5-YEAR","10-YEAR","20-YEAR","30-YEAR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		periodCertainGuaranteeEnum = append(periodCertainGuaranteeEnum, v)
	}
}

func (m PeriodCertainGuarantee) validatePeriodCertainGuaranteeEnum(path, location string, value PeriodCertainGuarantee) error {
	if err := validate.EnumCase(path, location, value, periodCertainGuaranteeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this period certain guarantee
func (m PeriodCertainGuarantee) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePeriodCertainGuaranteeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this period certain guarantee based on context it is used
func (m PeriodCertainGuarantee) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
