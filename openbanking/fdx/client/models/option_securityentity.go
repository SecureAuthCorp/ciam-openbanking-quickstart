// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OptionSecurityentity OptionSecurityentity
//
// An option
//
// swagger:model OptionSecurityentity
type OptionSecurityentity struct {

	// Expiration date of option
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	ExpireDate strfmt.Date `json:"expireDate,omitempty"`

	// option type
	OptionType OptionType2 `json:"optionType,omitempty"`

	// secured
	Secured Secured2 `json:"secured,omitempty"`

	// Shares per contract
	SharesPerContract float64 `json:"sharesPerContract,omitempty"`

	// Strike price / Unit price
	StrikePrice float64 `json:"strikePrice,omitempty"`
}

// Validate validates this option securityentity
func (m *OptionSecurityentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpireDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecured(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OptionSecurityentity) validateExpireDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpireDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expireDate", "body", "date", m.ExpireDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OptionSecurityentity) validateOptionType(formats strfmt.Registry) error {
	if swag.IsZero(m.OptionType) { // not required
		return nil
	}

	if err := m.OptionType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("optionType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("optionType")
		}
		return err
	}

	return nil
}

func (m *OptionSecurityentity) validateSecured(formats strfmt.Registry) error {
	if swag.IsZero(m.Secured) { // not required
		return nil
	}

	if err := m.Secured.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("secured")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("secured")
		}
		return err
	}

	return nil
}

// ContextValidate validate this option securityentity based on the context it is used
func (m *OptionSecurityentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOptionType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecured(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OptionSecurityentity) contextValidateOptionType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OptionType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("optionType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("optionType")
		}
		return err
	}

	return nil
}

func (m *OptionSecurityentity) contextValidateSecured(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Secured.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("secured")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("secured")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OptionSecurityentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OptionSecurityentity) UnmarshalBinary(b []byte) error {
	var res OptionSecurityentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
