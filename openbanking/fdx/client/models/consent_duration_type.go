// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConsentDurationType ConsentDurationType
//
// Duration of the Consent Grant, per FDX UX Guidelines v1.0 (pp 18 - 20)
//
// swagger:model ConsentDurationType
type ConsentDurationType string

func NewConsentDurationType(value ConsentDurationType) *ConsentDurationType {
	v := value
	return &v
}

const (

	// ConsentDurationTypeONETIME captures enum value "ONE_TIME"
	ConsentDurationTypeONETIME ConsentDurationType = "ONE_TIME"

	// ConsentDurationTypePERSISTENT captures enum value "PERSISTENT"
	ConsentDurationTypePERSISTENT ConsentDurationType = "PERSISTENT"

	// ConsentDurationTypeTIMEBOUND captures enum value "TIME_BOUND"
	ConsentDurationTypeTIMEBOUND ConsentDurationType = "TIME_BOUND"
)

// for schema
var consentDurationTypeEnum []interface{}

func init() {
	var res []ConsentDurationType
	if err := json.Unmarshal([]byte(`["ONE_TIME","PERSISTENT","TIME_BOUND"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		consentDurationTypeEnum = append(consentDurationTypeEnum, v)
	}
}

func (m ConsentDurationType) validateConsentDurationTypeEnum(path, location string, value ConsentDurationType) error {
	if err := validate.EnumCase(path, location, value, consentDurationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this consent duration type
func (m ConsentDurationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConsentDurationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this consent duration type based on context it is used
func (m ConsentDurationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
