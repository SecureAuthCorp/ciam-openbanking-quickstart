// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CallType2 CallType2
//
// Type of next call. One of CALL, PUT, PREFUND, MATURITY
//
// swagger:model CallType2
type CallType2 string

func NewCallType2(value CallType2) *CallType2 {
	v := value
	return &v
}

const (

	// CallType2CALL captures enum value "CALL"
	CallType2CALL CallType2 = "CALL"

	// CallType2MATURITY captures enum value "MATURITY"
	CallType2MATURITY CallType2 = "MATURITY"

	// CallType2PREFUND captures enum value "PREFUND"
	CallType2PREFUND CallType2 = "PREFUND"

	// CallType2PUT captures enum value "PUT"
	CallType2PUT CallType2 = "PUT"
)

// for schema
var callType2Enum []interface{}

func init() {
	var res []CallType2
	if err := json.Unmarshal([]byte(`["CALL","MATURITY","PREFUND","PUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		callType2Enum = append(callType2Enum, v)
	}
}

func (m CallType2) validateCallType2Enum(path, location string, value CallType2) error {
	if err := validate.EnumCase(path, location, value, callType2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this call type2
func (m CallType2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCallType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this call type2 based on context it is used
func (m CallType2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
