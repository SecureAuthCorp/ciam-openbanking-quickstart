// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PartyRegistry2 PartyRegistry2
//
// The registry containing the partyâ€™s registration with name and id: FDX, GLEIF, ICANN, PRIVATE
//
// swagger:model PartyRegistry2
type PartyRegistry2 string

func NewPartyRegistry2(value PartyRegistry2) *PartyRegistry2 {
	v := value
	return &v
}

const (

	// PartyRegistry2FDX captures enum value "FDX"
	PartyRegistry2FDX PartyRegistry2 = "FDX"

	// PartyRegistry2GLEIF captures enum value "GLEIF"
	PartyRegistry2GLEIF PartyRegistry2 = "GLEIF"

	// PartyRegistry2ICANN captures enum value "ICANN"
	PartyRegistry2ICANN PartyRegistry2 = "ICANN"

	// PartyRegistry2PRIVATE captures enum value "PRIVATE"
	PartyRegistry2PRIVATE PartyRegistry2 = "PRIVATE"
)

// for schema
var partyRegistry2Enum []interface{}

func init() {
	var res []PartyRegistry2
	if err := json.Unmarshal([]byte(`["FDX","GLEIF","ICANN","PRIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		partyRegistry2Enum = append(partyRegistry2Enum, v)
	}
}

func (m PartyRegistry2) validatePartyRegistry2Enum(path, location string, value PartyRegistry2) error {
	if err := validate.EnumCase(path, location, value, partyRegistry2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this party registry2
func (m PartyRegistry2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePartyRegistry2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this party registry2 based on context it is used
func (m PartyRegistry2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
