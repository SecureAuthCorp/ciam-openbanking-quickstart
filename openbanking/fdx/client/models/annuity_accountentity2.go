// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnnuityAccountentity2 AnnuityAccountentity2
//
// An annuity account
//
// swagger:model AnnuityAccountentity2
type AnnuityAccountentity2 struct {

	// account category
	AccountCategory AccountCategorytype `json:"accountCategory,omitempty"`

	// Long-term persistent identity of the account, though not an account number. This identity must be unique to the owning institution
	// Max Length: 256
	AccountID string `json:"accountId,omitempty"`

	// Full account number for the end user's handle for the account at the owning institution
	AccountNumber string `json:"accountNumber,omitempty"`

	// Account display number for the end user's handle at the owning institution. This is to be displayed by the Interface Provider
	AccountNumberDisplay string `json:"accountNumberDisplay,omitempty"`

	// account type
	AccountType AccountType2 `json:"accountType,omitempty"`

	// Percent or dollar amount of annual payment increase. Deprecated, will be removed in v6.0
	AnnualIncrease float64 `json:"annualIncrease,omitempty"`

	// annual increase type
	AnnualIncreaseType AnnualIncreaseType `json:"annualIncreaseType,omitempty"`

	// annuity product type
	AnnuityProductType AnnuityProductType `json:"annuityProductType,omitempty"`

	// annuity value basis
	AnnuityValueBasis AnnuityValueBasis `json:"annuityValueBasis,omitempty"`

	// balance type
	BalanceType BalanceType2 `json:"balanceType,omitempty"`

	// bill pay status
	BillPayStatus AccountBillPayStatus2 `json:"billPayStatus,omitempty"`

	// contact
	Contact *AccountContactentity2 `json:"contact,omitempty"`

	// currency
	Currency *Currencyentity4 `json:"currency,omitempty"`

	// Description of account
	Description string `json:"description,omitempty"`

	// error
	Error *Error1 `json:"error,omitempty"`

	// Array of Financial institution-specific attributes
	FiAttributes []*FIAttributeentity `json:"fiAttributes"`

	// Interest Rate of Account
	InterestRate float64 `json:"interestRate,omitempty"`

	// Date of account's interest rate
	// Example: 2021-07-15T14:46:41.375Z
	// Format: date-time
	InterestRateAsOf strfmt.DateTime `json:"interestRateAsOf,omitempty"`

	// interest rate type
	InterestRateType InterestRateType2 `json:"interestRateType,omitempty"`

	// Date that last transaction occurred on account
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	LastActivityDate strfmt.Date `json:"lastActivityDate,omitempty"`

	// The line of business, such as consumer, consumer joint, small business, corporate, etc.
	LineOfBusiness string `json:"lineOfBusiness,omitempty"`

	// MICR Number
	// Max Length: 64
	MicrNumber string `json:"micrNumber,omitempty"`

	// Surrender or cash balance value. Deprecated, will be removed in v6.0
	NetPresentValue float64 `json:"netPresentValue,omitempty"`

	// Name given by the user. Used in UIs to assist in account selection
	Nickname string `json:"nickname,omitempty"`

	// Total number of payouts
	NumberModalPayouts int32 `json:"numberModalPayouts,omitempty"`

	// Long-term persistent identity of the parent account. This is used to group accounts
	// Max Length: 256
	ParentAccountID string `json:"parentAccountId,omitempty"`

	// Amount of the recurring payment. Deprecated, will be removed in v6.0
	PaymentAmount float64 `json:"paymentAmount,omitempty"`

	// Date last payment will be made. Deprecated, will be removed in v6.0
	// Format: date-time
	PaymentEndDate strfmt.DateTime `json:"paymentEndDate,omitempty"`

	// payment frequency
	PaymentFrequency PaymentFrequency `json:"paymentFrequency,omitempty"`

	// Date of first payment; could be a future date. Deprecated, will be removed in v6.0
	// Format: date-time
	PaymentStartDate strfmt.DateTime `json:"paymentStartDate,omitempty"`

	// Amount paid out, based on mode frequency
	PayoutAmount float64 `json:"payoutAmount,omitempty"`

	// Incremental modal amount (positive or negative) by which the payout amount will be changed; used exclusive of payoutPercentage
	PayoutChangeAmount float64 `json:"payoutChangeAmount,omitempty"`

	// Percentage of the accumulated value to be paid to the payee each year; used exclusive of payoutChangeAmount
	PayoutChangePercentage float64 `json:"payoutChangePercentage,omitempty"`

	// Date the payout ends
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	PayoutEndDate strfmt.Date `json:"payoutEndDate,omitempty"`

	// payout mode
	PayoutMode PayoutMode2 `json:"payoutMode,omitempty"`

	// Date the payout starts
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	PayoutStartDate strfmt.Date `json:"payoutStartDate,omitempty"`

	// payout type
	PayoutType PayoutType2 `json:"payoutType,omitempty"`

	// period certain guarantee
	PeriodCertainGuarantee PeriodCertainGuarantee `json:"periodCertainGuarantee,omitempty"`

	// period certain type
	PeriodCertainType PeriodCertainType2 `json:"periodCertainType,omitempty"`

	// policy product type
	PolicyProductType PolicyProductType2 `json:"policyProductType,omitempty"`

	// Previous Interest Rate of Account
	PriorInterestRate float64 `json:"priorInterestRate,omitempty"`

	// Marketed product name for this account. Used in UIs to assist in account selection
	ProductName string `json:"productName,omitempty"`

	// Long-term persistent identity of rewards program associated with this account
	// Max Length: 256
	RewardProgramID string `json:"rewardProgramId,omitempty"`

	// Routing transit number (RTN) associated with account number at owning institution
	RoutingTransitNumber string `json:"routingTransitNumber,omitempty"`

	// status
	Status AccountStatus2 `json:"status,omitempty"`

	// Cash surrender value (net) available if contract is surrendered
	SurrenderValue float64 `json:"surrenderValue,omitempty"`

	// Total number of payments that will be produced by the annuity. Deprecated, will be removed in v6.0
	TotalPaymentCount float64 `json:"totalPaymentCount,omitempty"`

	// Default is false. If present and true, a call to retrieve transactions will not return any further details about this account. This is an optimization that allows an FDX API server to return transactions and account details in a single call
	TransactionsIncluded bool `json:"transactionsIncluded,omitempty"`

	// Account is eligible for incoming transfers
	TransferIn bool `json:"transferIn,omitempty"`

	// Account is eligible for outgoing transfers
	TransferOut bool `json:"transferOut,omitempty"`
}

// Validate validates this annuity accountentity2
func (m *AnnuityAccountentity2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnnualIncreaseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnnuityProductType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnnuityValueBasis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillPayStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterestRateAsOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterestRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastActivityDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMicrNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayoutEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayoutMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayoutStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayoutType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodCertainGuarantee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodCertainType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyProductType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRewardProgramID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnnuityAccountentity2) validateAccountCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountCategory) { // not required
		return nil
	}

	if err := m.AccountCategory.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accountCategory")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("accountCategory")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validateAccountID(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountID) { // not required
		return nil
	}

	if err := validate.MaxLength("accountId", "body", m.AccountID, 256); err != nil {
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validateAccountType(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountType) { // not required
		return nil
	}

	if err := m.AccountType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accountType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("accountType")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validateAnnualIncreaseType(formats strfmt.Registry) error {
	if swag.IsZero(m.AnnualIncreaseType) { // not required
		return nil
	}

	if err := m.AnnualIncreaseType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("annualIncreaseType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("annualIncreaseType")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validateAnnuityProductType(formats strfmt.Registry) error {
	if swag.IsZero(m.AnnuityProductType) { // not required
		return nil
	}

	if err := m.AnnuityProductType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("annuityProductType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("annuityProductType")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validateAnnuityValueBasis(formats strfmt.Registry) error {
	if swag.IsZero(m.AnnuityValueBasis) { // not required
		return nil
	}

	if err := m.AnnuityValueBasis.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("annuityValueBasis")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("annuityValueBasis")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validateBalanceType(formats strfmt.Registry) error {
	if swag.IsZero(m.BalanceType) { // not required
		return nil
	}

	if err := m.BalanceType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("balanceType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("balanceType")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validateBillPayStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.BillPayStatus) { // not required
		return nil
	}

	if err := m.BillPayStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("billPayStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("billPayStatus")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validateContact(formats strfmt.Registry) error {
	if swag.IsZero(m.Contact) { // not required
		return nil
	}

	if m.Contact != nil {
		if err := m.Contact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *AnnuityAccountentity2) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

func (m *AnnuityAccountentity2) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *AnnuityAccountentity2) validateFiAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.FiAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.FiAttributes); i++ {
		if swag.IsZero(m.FiAttributes[i]) { // not required
			continue
		}

		if m.FiAttributes[i] != nil {
			if err := m.FiAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fiAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fiAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AnnuityAccountentity2) validateInterestRateAsOf(formats strfmt.Registry) error {
	if swag.IsZero(m.InterestRateAsOf) { // not required
		return nil
	}

	if err := validate.FormatOf("interestRateAsOf", "body", "date-time", m.InterestRateAsOf.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validateInterestRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.InterestRateType) { // not required
		return nil
	}

	if err := m.InterestRateType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("interestRateType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("interestRateType")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validateLastActivityDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastActivityDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastActivityDate", "body", "date", m.LastActivityDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validateMicrNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.MicrNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("micrNumber", "body", m.MicrNumber, 64); err != nil {
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validateParentAccountID(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentAccountID) { // not required
		return nil
	}

	if err := validate.MaxLength("parentAccountId", "body", m.ParentAccountID, 256); err != nil {
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validatePaymentEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("paymentEndDate", "body", "date-time", m.PaymentEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validatePaymentFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentFrequency) { // not required
		return nil
	}

	if err := m.PaymentFrequency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("paymentFrequency")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("paymentFrequency")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validatePaymentStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("paymentStartDate", "body", "date-time", m.PaymentStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validatePayoutEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PayoutEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("payoutEndDate", "body", "date", m.PayoutEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validatePayoutMode(formats strfmt.Registry) error {
	if swag.IsZero(m.PayoutMode) { // not required
		return nil
	}

	if err := m.PayoutMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("payoutMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("payoutMode")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validatePayoutStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PayoutStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("payoutStartDate", "body", "date", m.PayoutStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validatePayoutType(formats strfmt.Registry) error {
	if swag.IsZero(m.PayoutType) { // not required
		return nil
	}

	if err := m.PayoutType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("payoutType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("payoutType")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validatePeriodCertainGuarantee(formats strfmt.Registry) error {
	if swag.IsZero(m.PeriodCertainGuarantee) { // not required
		return nil
	}

	if err := m.PeriodCertainGuarantee.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("periodCertainGuarantee")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("periodCertainGuarantee")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validatePeriodCertainType(formats strfmt.Registry) error {
	if swag.IsZero(m.PeriodCertainType) { // not required
		return nil
	}

	if err := m.PeriodCertainType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("periodCertainType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("periodCertainType")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validatePolicyProductType(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyProductType) { // not required
		return nil
	}

	if err := m.PolicyProductType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("policyProductType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("policyProductType")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validateRewardProgramID(formats strfmt.Registry) error {
	if swag.IsZero(m.RewardProgramID) { // not required
		return nil
	}

	if err := validate.MaxLength("rewardProgramId", "body", m.RewardProgramID, 256); err != nil {
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this annuity accountentity2 based on the context it is used
func (m *AnnuityAccountentity2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccountCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAccountType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAnnualIncreaseType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAnnuityProductType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAnnuityValueBasis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBalanceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBillPayStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFiAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInterestRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePayoutMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePayoutType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeriodCertainGuarantee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeriodCertainType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyProductType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnnuityAccountentity2) contextValidateAccountCategory(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AccountCategory.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accountCategory")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("accountCategory")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidateAccountType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AccountType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accountType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("accountType")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidateAnnualIncreaseType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AnnualIncreaseType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("annualIncreaseType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("annualIncreaseType")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidateAnnuityProductType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AnnuityProductType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("annuityProductType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("annuityProductType")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidateAnnuityValueBasis(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AnnuityValueBasis.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("annuityValueBasis")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("annuityValueBasis")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidateBalanceType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BalanceType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("balanceType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("balanceType")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidateBillPayStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BillPayStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("billPayStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("billPayStatus")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidateContact(ctx context.Context, formats strfmt.Registry) error {

	if m.Contact != nil {
		if err := m.Contact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidateCurrency(ctx context.Context, formats strfmt.Registry) error {

	if m.Currency != nil {
		if err := m.Currency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {
		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidateFiAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FiAttributes); i++ {

		if m.FiAttributes[i] != nil {
			if err := m.FiAttributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fiAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fiAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidateInterestRateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.InterestRateType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("interestRateType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("interestRateType")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidatePaymentFrequency(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PaymentFrequency.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("paymentFrequency")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("paymentFrequency")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidatePayoutMode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PayoutMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("payoutMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("payoutMode")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidatePayoutType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PayoutType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("payoutType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("payoutType")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidatePeriodCertainGuarantee(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PeriodCertainGuarantee.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("periodCertainGuarantee")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("periodCertainGuarantee")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidatePeriodCertainType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PeriodCertainType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("periodCertainType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("periodCertainType")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidatePolicyProductType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PolicyProductType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("policyProductType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("policyProductType")
		}
		return err
	}

	return nil
}

func (m *AnnuityAccountentity2) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnnuityAccountentity2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnnuityAccountentity2) UnmarshalBinary(b []byte) error {
	var res AnnuityAccountentity2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
