// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PaymentNetworkType PaymentNetworkType
//
// Suggested values for Payment Network Type.<br/> <br/> | Value | Description |<br/> |-----|-----|<br/> | CA_ACSS | Automated Clearing House Settlement System |<br/> | CA_LVTS | Large-Value Transfer System |<br/> | US_ACH | Automated Clearing House |<br/> | US_CHIPS | Clearinghouse Interbank Payments System |<br/> | US_FEDWIRE | Fedwire Funds Service |<br/> | US_RTP| US Real Time Payments System |
//
// swagger:model PaymentNetworkType
type PaymentNetworkType string

func NewPaymentNetworkType(value PaymentNetworkType) *PaymentNetworkType {
	v := value
	return &v
}

const (

	// PaymentNetworkTypeCAACSS captures enum value "CA_ACSS"
	PaymentNetworkTypeCAACSS PaymentNetworkType = "CA_ACSS"

	// PaymentNetworkTypeCALVTS captures enum value "CA_LVTS"
	PaymentNetworkTypeCALVTS PaymentNetworkType = "CA_LVTS"

	// PaymentNetworkTypeUSACH captures enum value "US_ACH"
	PaymentNetworkTypeUSACH PaymentNetworkType = "US_ACH"

	// PaymentNetworkTypeUSCHIPS captures enum value "US_CHIPS"
	PaymentNetworkTypeUSCHIPS PaymentNetworkType = "US_CHIPS"

	// PaymentNetworkTypeUSFEDWIRE captures enum value "US_FEDWIRE"
	PaymentNetworkTypeUSFEDWIRE PaymentNetworkType = "US_FEDWIRE"

	// PaymentNetworkTypeUSRTP captures enum value "US_RTP"
	PaymentNetworkTypeUSRTP PaymentNetworkType = "US_RTP"
)

// for schema
var paymentNetworkTypeEnum []interface{}

func init() {
	var res []PaymentNetworkType
	if err := json.Unmarshal([]byte(`["CA_ACSS","CA_LVTS","US_ACH","US_CHIPS","US_FEDWIRE","US_RTP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentNetworkTypeEnum = append(paymentNetworkTypeEnum, v)
	}
}

func (m PaymentNetworkType) validatePaymentNetworkTypeEnum(path, location string, value PaymentNetworkType) error {
	if err := validate.EnumCase(path, location, value, paymentNetworkTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payment network type
func (m PaymentNetworkType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePaymentNetworkTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this payment network type based on context it is used
func (m PaymentNetworkType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
