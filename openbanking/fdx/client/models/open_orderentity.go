// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenOrderentity OpenOrderentity
//
// An open investment transaction order
//
// swagger:model OpenOrderentity
type OpenOrderentity struct {

	// Description of order
	Description string `json:"description,omitempty"`

	// inv401k source
	Inv401kSource Investment401kSourceType1 `json:"inv401kSource,omitempty"`

	// Limit price
	LimitPrice float64 `json:"limitPrice,omitempty"`

	// Order date
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	OrderDate strfmt.Date `json:"orderDate,omitempty"`

	// order duration
	OrderDuration OrderDuration2 `json:"orderDuration,omitempty"`

	// Long‐term persistent identity of the order. Id for this order transaction
	// Max Length: 256
	OrderID string `json:"orderId,omitempty"`

	// order type
	OrderType OrderType2 `json:"orderType,omitempty"`

	// Unique identifier of security
	SecurityID string `json:"securityId,omitempty"`

	// security Id type
	SecurityIDType SecurityIDType1 `json:"securityIdType,omitempty"`

	// Stop price
	StopPrice float64 `json:"stopPrice,omitempty"`

	// sub account
	SubAccount SubAccountType4 `json:"subAccount,omitempty"`

	// Market symbol
	Symbol string `json:"symbol,omitempty"`

	// Unit price
	UnitPrice float64 `json:"unitPrice,omitempty"`

	// unit type
	UnitType UnitType3 `json:"unitType,omitempty"`

	// Number of units (shares or bonds etc.)
	Units float64 `json:"units,omitempty"`
}

// Validate validates this open orderentity
func (m *OpenOrderentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInv401kSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityIDType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenOrderentity) validateInv401kSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Inv401kSource) { // not required
		return nil
	}

	if err := m.Inv401kSource.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("inv401kSource")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("inv401kSource")
		}
		return err
	}

	return nil
}

func (m *OpenOrderentity) validateOrderDate(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderDate) { // not required
		return nil
	}

	if err := validate.FormatOf("orderDate", "body", "date", m.OrderDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenOrderentity) validateOrderDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderDuration) { // not required
		return nil
	}

	if err := m.OrderDuration.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderDuration")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("orderDuration")
		}
		return err
	}

	return nil
}

func (m *OpenOrderentity) validateOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderID) { // not required
		return nil
	}

	if err := validate.MaxLength("orderId", "body", m.OrderID, 256); err != nil {
		return err
	}

	return nil
}

func (m *OpenOrderentity) validateOrderType(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderType) { // not required
		return nil
	}

	if err := m.OrderType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("orderType")
		}
		return err
	}

	return nil
}

func (m *OpenOrderentity) validateSecurityIDType(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityIDType) { // not required
		return nil
	}

	if err := m.SecurityIDType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("securityIdType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("securityIdType")
		}
		return err
	}

	return nil
}

func (m *OpenOrderentity) validateSubAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.SubAccount) { // not required
		return nil
	}

	if err := m.SubAccount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("subAccount")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("subAccount")
		}
		return err
	}

	return nil
}

func (m *OpenOrderentity) validateUnitType(formats strfmt.Registry) error {
	if swag.IsZero(m.UnitType) { // not required
		return nil
	}

	if err := m.UnitType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("unitType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("unitType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this open orderentity based on the context it is used
func (m *OpenOrderentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInv401kSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderDuration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityIDType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnitType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenOrderentity) contextValidateInv401kSource(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Inv401kSource.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("inv401kSource")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("inv401kSource")
		}
		return err
	}

	return nil
}

func (m *OpenOrderentity) contextValidateOrderDuration(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OrderDuration.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderDuration")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("orderDuration")
		}
		return err
	}

	return nil
}

func (m *OpenOrderentity) contextValidateOrderType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OrderType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("orderType")
		}
		return err
	}

	return nil
}

func (m *OpenOrderentity) contextValidateSecurityIDType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SecurityIDType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("securityIdType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("securityIdType")
		}
		return err
	}

	return nil
}

func (m *OpenOrderentity) contextValidateSubAccount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SubAccount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("subAccount")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("subAccount")
		}
		return err
	}

	return nil
}

func (m *OpenOrderentity) contextValidateUnitType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UnitType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("unitType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("unitType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenOrderentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenOrderentity) UnmarshalBinary(b []byte) error {
	var res OpenOrderentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
