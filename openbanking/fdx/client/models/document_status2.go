// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DocumentStatus2 DocumentStatus2
//
// Availability status of statement
//
// swagger:model DocumentStatus2
type DocumentStatus2 string

func NewDocumentStatus2(value DocumentStatus2) *DocumentStatus2 {
	v := value
	return &v
}

const (

	// DocumentStatus2AVAILABLE captures enum value "AVAILABLE"
	DocumentStatus2AVAILABLE DocumentStatus2 = "AVAILABLE"

	// DocumentStatus2PROCESSING captures enum value "PROCESSING"
	DocumentStatus2PROCESSING DocumentStatus2 = "PROCESSING"

	// DocumentStatus2FAILED captures enum value "FAILED"
	DocumentStatus2FAILED DocumentStatus2 = "FAILED"
)

// for schema
var documentStatus2Enum []interface{}

func init() {
	var res []DocumentStatus2
	if err := json.Unmarshal([]byte(`["AVAILABLE","PROCESSING","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		documentStatus2Enum = append(documentStatus2Enum, v)
	}
}

func (m DocumentStatus2) validateDocumentStatus2Enum(path, location string, value DocumentStatus2) error {
	if err := validate.EnumCase(path, location, value, documentStatus2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this document status2
func (m DocumentStatus2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDocumentStatus2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this document status2 based on context it is used
func (m DocumentStatus2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
