// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Currencyentity1 Currencyentity1
//
// Currency information if it is different from Account entity
//
// swagger:model Currencyentity1
type Currencyentity1 struct {

	// currency code
	CurrencyCode ISO4217Code1 `json:"currencyCode,omitempty"`

	// Currency rate between original and converted currency
	CurrencyRate float64 `json:"currencyRate,omitempty"`

	// original currency code
	OriginalCurrencyCode ISO4217Code2 `json:"originalCurrencyCode,omitempty"`
}

// Validate validates this currencyentity1
func (m *Currencyentity1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrencyCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalCurrencyCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Currencyentity1) validateCurrencyCode(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrencyCode) { // not required
		return nil
	}

	if err := m.CurrencyCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("currencyCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("currencyCode")
		}
		return err
	}

	return nil
}

func (m *Currencyentity1) validateOriginalCurrencyCode(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginalCurrencyCode) { // not required
		return nil
	}

	if err := m.OriginalCurrencyCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("originalCurrencyCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("originalCurrencyCode")
		}
		return err
	}

	return nil
}

// ContextValidate validate this currencyentity1 based on the context it is used
func (m *Currencyentity1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrencyCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginalCurrencyCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Currencyentity1) contextValidateCurrencyCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CurrencyCode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("currencyCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("currencyCode")
		}
		return err
	}

	return nil
}

func (m *Currencyentity1) contextValidateOriginalCurrencyCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OriginalCurrencyCode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("originalCurrencyCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("originalCurrencyCode")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Currencyentity1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Currencyentity1) UnmarshalBinary(b []byte) error {
	var res Currencyentity1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
