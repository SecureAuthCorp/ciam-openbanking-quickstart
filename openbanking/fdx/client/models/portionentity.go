// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Portionentity Portionentity
//
// An asset allocation with class and percentage
//
// swagger:model Portionentity
type Portionentity struct {

	// asset class
	AssetClass AssetClass2 `json:"assetClass,omitempty"`

	// The percentage of this allocation
	Percent float64 `json:"percent,omitempty"`
}

// Validate validates this portionentity
func (m *Portionentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetClass(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Portionentity) validateAssetClass(formats strfmt.Registry) error {
	if swag.IsZero(m.AssetClass) { // not required
		return nil
	}

	if err := m.AssetClass.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("assetClass")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("assetClass")
		}
		return err
	}

	return nil
}

// ContextValidate validate this portionentity based on the context it is used
func (m *Portionentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssetClass(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Portionentity) contextValidateAssetClass(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AssetClass.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("assetClass")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("assetClass")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Portionentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Portionentity) UnmarshalBinary(b []byte) error {
	var res Portionentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
