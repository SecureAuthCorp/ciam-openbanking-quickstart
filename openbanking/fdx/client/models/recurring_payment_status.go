// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RecurringPaymentStatus RecurringPaymentStatus
//
// Defines the recurring payment lifecycle<br/> * `CANCELLED`: Recurring Payment was cancelled by the user<br/> * `FAILED`: Recurring Payment failed. For example: fraud, invalid payee, source account was closed etc.<br/> * `PROCESSED`: The scheduled duration of the recurrence has completed.<br/> * `SCHEDULED`: Recurring Payment has been scheduled
//
// swagger:model RecurringPaymentStatus
type RecurringPaymentStatus string

func NewRecurringPaymentStatus(value RecurringPaymentStatus) *RecurringPaymentStatus {
	v := value
	return &v
}

const (

	// RecurringPaymentStatusCANCELLED captures enum value "CANCELLED"
	RecurringPaymentStatusCANCELLED RecurringPaymentStatus = "CANCELLED"

	// RecurringPaymentStatusFAILED captures enum value "FAILED"
	RecurringPaymentStatusFAILED RecurringPaymentStatus = "FAILED"

	// RecurringPaymentStatusPROCESSED captures enum value "PROCESSED"
	RecurringPaymentStatusPROCESSED RecurringPaymentStatus = "PROCESSED"

	// RecurringPaymentStatusSCHEDULED captures enum value "SCHEDULED"
	RecurringPaymentStatusSCHEDULED RecurringPaymentStatus = "SCHEDULED"
)

// for schema
var recurringPaymentStatusEnum []interface{}

func init() {
	var res []RecurringPaymentStatus
	if err := json.Unmarshal([]byte(`["CANCELLED","FAILED","PROCESSED","SCHEDULED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recurringPaymentStatusEnum = append(recurringPaymentStatusEnum, v)
	}
}

func (m RecurringPaymentStatus) validateRecurringPaymentStatusEnum(path, location string, value RecurringPaymentStatus) error {
	if err := validate.EnumCase(path, location, value, recurringPaymentStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this recurring payment status
func (m RecurringPaymentStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRecurringPaymentStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this recurring payment status based on context it is used
func (m RecurringPaymentStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
