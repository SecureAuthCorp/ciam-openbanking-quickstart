// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PaymentStatus1 PaymentStatus1
//
// CANCELLED, FAILED, NOFUNDS, PROCESSED, PROCESSING, SCHEDULED
//
// swagger:model PaymentStatus1
type PaymentStatus1 string

func NewPaymentStatus1(value PaymentStatus1) *PaymentStatus1 {
	v := value
	return &v
}

const (

	// PaymentStatus1CANCELLED captures enum value "CANCELLED"
	PaymentStatus1CANCELLED PaymentStatus1 = "CANCELLED"

	// PaymentStatus1FAILED captures enum value "FAILED"
	PaymentStatus1FAILED PaymentStatus1 = "FAILED"

	// PaymentStatus1NOFUNDS captures enum value "NOFUNDS"
	PaymentStatus1NOFUNDS PaymentStatus1 = "NOFUNDS"

	// PaymentStatus1PROCESSED captures enum value "PROCESSED"
	PaymentStatus1PROCESSED PaymentStatus1 = "PROCESSED"

	// PaymentStatus1PROCESSING captures enum value "PROCESSING"
	PaymentStatus1PROCESSING PaymentStatus1 = "PROCESSING"

	// PaymentStatus1SCHEDULED captures enum value "SCHEDULED"
	PaymentStatus1SCHEDULED PaymentStatus1 = "SCHEDULED"
)

// for schema
var paymentStatus1Enum []interface{}

func init() {
	var res []PaymentStatus1
	if err := json.Unmarshal([]byte(`["CANCELLED","FAILED","NOFUNDS","PROCESSED","PROCESSING","SCHEDULED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentStatus1Enum = append(paymentStatus1Enum, v)
	}
}

func (m PaymentStatus1) validatePaymentStatus1Enum(path, location string, value PaymentStatus1) error {
	if err := validate.EnumCase(path, location, value, paymentStatus1Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payment status1
func (m PaymentStatus1) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePaymentStatus1Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this payment status1 based on context it is used
func (m PaymentStatus1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
