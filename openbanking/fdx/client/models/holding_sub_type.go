// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HoldingSubType HoldingSubType
//
// The subtype of an investment holding
//
// swagger:model HoldingSubType
type HoldingSubType string

func NewHoldingSubType(value HoldingSubType) *HoldingSubType {
	v := value
	return &v
}

const (

	// HoldingSubTypeCASH captures enum value "CASH"
	HoldingSubTypeCASH HoldingSubType = "CASH"

	// HoldingSubTypeMONEYMARKET captures enum value "MONEYMARKET"
	HoldingSubTypeMONEYMARKET HoldingSubType = "MONEYMARKET"
)

// for schema
var holdingSubTypeEnum []interface{}

func init() {
	var res []HoldingSubType
	if err := json.Unmarshal([]byte(`["CASH","MONEYMARKET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		holdingSubTypeEnum = append(holdingSubTypeEnum, v)
	}
}

func (m HoldingSubType) validateHoldingSubTypeEnum(path, location string, value HoldingSubType) error {
	if err := validate.EnumCase(path, location, value, holdingSubTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this holding sub type
func (m HoldingSubType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHoldingSubTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this holding sub type based on context it is used
func (m HoldingSubType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
