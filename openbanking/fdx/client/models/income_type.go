// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// IncomeType IncomeType
//
// The type of income of an investment transaction
//
// swagger:model IncomeType
type IncomeType string

func NewIncomeType(value IncomeType) *IncomeType {
	v := value
	return &v
}

const (

	// IncomeTypeCGLONG captures enum value "CGLONG"
	IncomeTypeCGLONG IncomeType = "CGLONG"

	// IncomeTypeCGSHORT captures enum value "CGSHORT"
	IncomeTypeCGSHORT IncomeType = "CGSHORT"

	// IncomeTypeMISC captures enum value "MISC"
	IncomeTypeMISC IncomeType = "MISC"
)

// for schema
var incomeTypeEnum []interface{}

func init() {
	var res []IncomeType
	if err := json.Unmarshal([]byte(`["CGLONG","CGSHORT","MISC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		incomeTypeEnum = append(incomeTypeEnum, v)
	}
}

func (m IncomeType) validateIncomeTypeEnum(path, location string, value IncomeType) error {
	if err := validate.EnumCase(path, location, value, incomeTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this income type
func (m IncomeType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateIncomeTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this income type based on context it is used
func (m IncomeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
