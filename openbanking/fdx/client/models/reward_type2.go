// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RewardType2 RewardType2
//
// The type of the reward balance - CASHBACK, MILES, POINTS
//
// swagger:model RewardType2
type RewardType2 string

func NewRewardType2(value RewardType2) *RewardType2 {
	v := value
	return &v
}

const (

	// RewardType2CASHBACK captures enum value "CASHBACK"
	RewardType2CASHBACK RewardType2 = "CASHBACK"

	// RewardType2MILES captures enum value "MILES"
	RewardType2MILES RewardType2 = "MILES"

	// RewardType2POINTS captures enum value "POINTS"
	RewardType2POINTS RewardType2 = "POINTS"
)

// for schema
var rewardType2Enum []interface{}

func init() {
	var res []RewardType2
	if err := json.Unmarshal([]byte(`["CASHBACK","MILES","POINTS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rewardType2Enum = append(rewardType2Enum, v)
	}
}

func (m RewardType2) validateRewardType2Enum(path, location string, value RewardType2) error {
	if err := validate.EnumCase(path, location, value, rewardType2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this reward type2
func (m RewardType2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRewardType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this reward type2 based on context it is used
func (m RewardType2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
