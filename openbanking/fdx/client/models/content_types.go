// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ContentTypes ContentTypes
//
// Types of document formats. (Suggested values)
//
// swagger:model ContentTypes
type ContentTypes string

func NewContentTypes(value ContentTypes) *ContentTypes {
	v := value
	return &v
}

const (

	// ContentTypesApplicationPdf captures enum value "application/pdf"
	ContentTypesApplicationPdf ContentTypes = "application/pdf"

	// ContentTypesImageGif captures enum value "image/gif"
	ContentTypesImageGif ContentTypes = "image/gif"

	// ContentTypesImageJpeg captures enum value "image/jpeg"
	ContentTypesImageJpeg ContentTypes = "image/jpeg"

	// ContentTypesImageTiff captures enum value "image/tiff"
	ContentTypesImageTiff ContentTypes = "image/tiff"

	// ContentTypesImagePng captures enum value "image/png"
	ContentTypesImagePng ContentTypes = "image/png"

	// ContentTypesApplicationJSON captures enum value "application/json"
	ContentTypesApplicationJSON ContentTypes = "application/json"
)

// for schema
var contentTypesEnum []interface{}

func init() {
	var res []ContentTypes
	if err := json.Unmarshal([]byte(`["application/pdf","image/gif","image/jpeg","image/tiff","image/png","application/json"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentTypesEnum = append(contentTypesEnum, v)
	}
}

func (m ContentTypes) validateContentTypesEnum(path, location string, value ContentTypes) error {
	if err := validate.EnumCase(path, location, value, contentTypesEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this content types
func (m ContentTypes) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateContentTypesEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this content types based on context it is used
func (m ContentTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
