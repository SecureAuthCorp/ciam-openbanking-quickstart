// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DepositTransactionType DepositTransactionType
//
// The type of a deposit transaction
//
// swagger:model DepositTransactionType
type DepositTransactionType string

func NewDepositTransactionType(value DepositTransactionType) *DepositTransactionType {
	v := value
	return &v
}

const (

	// DepositTransactionTypeADJUSTMENT captures enum value "ADJUSTMENT"
	DepositTransactionTypeADJUSTMENT DepositTransactionType = "ADJUSTMENT"

	// DepositTransactionTypeATMDEPOSIT captures enum value "ATMDEPOSIT"
	DepositTransactionTypeATMDEPOSIT DepositTransactionType = "ATMDEPOSIT"

	// DepositTransactionTypeATMWITHDRAWAL captures enum value "ATMWITHDRAWAL"
	DepositTransactionTypeATMWITHDRAWAL DepositTransactionType = "ATMWITHDRAWAL"

	// DepositTransactionTypeBILLPAYMENT captures enum value "BILLPAYMENT"
	DepositTransactionTypeBILLPAYMENT DepositTransactionType = "BILLPAYMENT"

	// DepositTransactionTypeCHECK captures enum value "CHECK"
	DepositTransactionTypeCHECK DepositTransactionType = "CHECK"

	// DepositTransactionTypeDEPOSIT captures enum value "DEPOSIT"
	DepositTransactionTypeDEPOSIT DepositTransactionType = "DEPOSIT"

	// DepositTransactionTypeDIRECTDEPOSIT captures enum value "DIRECTDEPOSIT"
	DepositTransactionTypeDIRECTDEPOSIT DepositTransactionType = "DIRECTDEPOSIT"

	// DepositTransactionTypeDIVIDEND captures enum value "DIVIDEND"
	DepositTransactionTypeDIVIDEND DepositTransactionType = "DIVIDEND"

	// DepositTransactionTypeFEE captures enum value "FEE"
	DepositTransactionTypeFEE DepositTransactionType = "FEE"

	// DepositTransactionTypeINTEREST captures enum value "INTEREST"
	DepositTransactionTypeINTEREST DepositTransactionType = "INTEREST"

	// DepositTransactionTypePOSCREDIT captures enum value "POSCREDIT"
	DepositTransactionTypePOSCREDIT DepositTransactionType = "POSCREDIT"

	// DepositTransactionTypePOSDEBIT captures enum value "POSDEBIT"
	DepositTransactionTypePOSDEBIT DepositTransactionType = "POSDEBIT"

	// DepositTransactionTypeTRANSFER captures enum value "TRANSFER"
	DepositTransactionTypeTRANSFER DepositTransactionType = "TRANSFER"

	// DepositTransactionTypeWITHDRAWAL captures enum value "WITHDRAWAL"
	DepositTransactionTypeWITHDRAWAL DepositTransactionType = "WITHDRAWAL"
)

// for schema
var depositTransactionTypeEnum []interface{}

func init() {
	var res []DepositTransactionType
	if err := json.Unmarshal([]byte(`["ADJUSTMENT","ATMDEPOSIT","ATMWITHDRAWAL","BILLPAYMENT","CHECK","DEPOSIT","DIRECTDEPOSIT","DIVIDEND","FEE","INTEREST","POSCREDIT","POSDEBIT","TRANSFER","WITHDRAWAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		depositTransactionTypeEnum = append(depositTransactionTypeEnum, v)
	}
}

func (m DepositTransactionType) validateDepositTransactionTypeEnum(path, location string, value DepositTransactionType) error {
	if err := validate.EnumCase(path, location, value, depositTransactionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this deposit transaction type
func (m DepositTransactionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDepositTransactionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this deposit transaction type based on context it is used
func (m DepositTransactionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
