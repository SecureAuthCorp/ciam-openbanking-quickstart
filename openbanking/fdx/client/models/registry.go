// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Registry Registry
//
// Identifies the type of a Registry
//
// swagger:model Registry
type Registry string

func NewRegistry(value Registry) *Registry {
	v := value
	return &v
}

const (

	// RegistryPRIVATE captures enum value "PRIVATE"
	RegistryPRIVATE Registry = "PRIVATE"

	// RegistryFDX captures enum value "FDX"
	RegistryFDX Registry = "FDX"

	// RegistryGLEIF captures enum value "GLEIF"
	RegistryGLEIF Registry = "GLEIF"

	// RegistryICANN captures enum value "ICANN"
	RegistryICANN Registry = "ICANN"
)

// for schema
var registryEnum []interface{}

func init() {
	var res []Registry
	if err := json.Unmarshal([]byte(`["PRIVATE","FDX","GLEIF","ICANN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registryEnum = append(registryEnum, v)
	}
}

func (m Registry) validateRegistryEnum(path, location string, value Registry) error {
	if err := validate.EnumCase(path, location, value, registryEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this registry
func (m Registry) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRegistryEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this registry based on context it is used
func (m Registry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
