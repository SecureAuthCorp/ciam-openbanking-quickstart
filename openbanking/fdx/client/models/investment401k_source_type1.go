// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Investment401kSourceType1 Investment401kSourceType1
//
// For 401(k) accounts, source of money for this order. PRETAX, AFTERTAX, MATCH, PROFITSHARING, ROLLOVER, OTHERVEST, OTHERNONVEST. Default if not present is OTHERNONVEST
//
// swagger:model Investment401kSourceType1
type Investment401kSourceType1 string

func NewInvestment401kSourceType1(value Investment401kSourceType1) *Investment401kSourceType1 {
	v := value
	return &v
}

const (

	// Investment401kSourceType1AFTERTAX captures enum value "AFTERTAX"
	Investment401kSourceType1AFTERTAX Investment401kSourceType1 = "AFTERTAX"

	// Investment401kSourceType1MATCH captures enum value "MATCH"
	Investment401kSourceType1MATCH Investment401kSourceType1 = "MATCH"

	// Investment401kSourceType1OTHERNONVEST captures enum value "OTHERNONVEST"
	Investment401kSourceType1OTHERNONVEST Investment401kSourceType1 = "OTHERNONVEST"

	// Investment401kSourceType1OTHERVEST captures enum value "OTHERVEST"
	Investment401kSourceType1OTHERVEST Investment401kSourceType1 = "OTHERVEST"

	// Investment401kSourceType1PRETAX captures enum value "PRETAX"
	Investment401kSourceType1PRETAX Investment401kSourceType1 = "PRETAX"

	// Investment401kSourceType1PROFITSHARING captures enum value "PROFITSHARING"
	Investment401kSourceType1PROFITSHARING Investment401kSourceType1 = "PROFITSHARING"

	// Investment401kSourceType1ROLLOVER captures enum value "ROLLOVER"
	Investment401kSourceType1ROLLOVER Investment401kSourceType1 = "ROLLOVER"
)

// for schema
var investment401kSourceType1Enum []interface{}

func init() {
	var res []Investment401kSourceType1
	if err := json.Unmarshal([]byte(`["AFTERTAX","MATCH","OTHERNONVEST","OTHERVEST","PRETAX","PROFITSHARING","ROLLOVER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		investment401kSourceType1Enum = append(investment401kSourceType1Enum, v)
	}
}

func (m Investment401kSourceType1) validateInvestment401kSourceType1Enum(path, location string, value Investment401kSourceType1) error {
	if err := validate.EnumCase(path, location, value, investment401kSourceType1Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this investment401k source type1
func (m Investment401kSourceType1) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInvestment401kSourceType1Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this investment401k source type1 based on context it is used
func (m Investment401kSourceType1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
