// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BusinessorConsumerType BusinessorConsumerType
//
// Indicator if parent entity is a consumer or business
//
// swagger:model BusinessorConsumerType
type BusinessorConsumerType string

func NewBusinessorConsumerType(value BusinessorConsumerType) *BusinessorConsumerType {
	v := value
	return &v
}

const (

	// BusinessorConsumerTypeBUSINESS captures enum value "BUSINESS"
	BusinessorConsumerTypeBUSINESS BusinessorConsumerType = "BUSINESS"

	// BusinessorConsumerTypeCONSUMER captures enum value "CONSUMER"
	BusinessorConsumerTypeCONSUMER BusinessorConsumerType = "CONSUMER"
)

// for schema
var businessorConsumerTypeEnum []interface{}

func init() {
	var res []BusinessorConsumerType
	if err := json.Unmarshal([]byte(`["BUSINESS","CONSUMER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		businessorConsumerTypeEnum = append(businessorConsumerTypeEnum, v)
	}
}

func (m BusinessorConsumerType) validateBusinessorConsumerTypeEnum(path, location string, value BusinessorConsumerType) error {
	if err := validate.EnumCase(path, location, value, businessorConsumerTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this businessor consumer type
func (m BusinessorConsumerType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBusinessorConsumerTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this businessor consumer type based on context it is used
func (m BusinessorConsumerType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
