// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HoldingType2 HoldingType2
//
// STOCK, BOND, MUTUALFUND, CD, ANNUITY, OPTION, OTHER
//
// swagger:model HoldingType2
type HoldingType2 string

func NewHoldingType2(value HoldingType2) *HoldingType2 {
	v := value
	return &v
}

const (

	// HoldingType2ANNUITY captures enum value "ANNUITY"
	HoldingType2ANNUITY HoldingType2 = "ANNUITY"

	// HoldingType2BOND captures enum value "BOND"
	HoldingType2BOND HoldingType2 = "BOND"

	// HoldingType2CD captures enum value "CD"
	HoldingType2CD HoldingType2 = "CD"

	// HoldingType2DIGITALASSET captures enum value "DIGITALASSET"
	HoldingType2DIGITALASSET HoldingType2 = "DIGITALASSET"

	// HoldingType2MUTUALFUND captures enum value "MUTUALFUND"
	HoldingType2MUTUALFUND HoldingType2 = "MUTUALFUND"

	// HoldingType2OPTION captures enum value "OPTION"
	HoldingType2OPTION HoldingType2 = "OPTION"

	// HoldingType2OTHER captures enum value "OTHER"
	HoldingType2OTHER HoldingType2 = "OTHER"

	// HoldingType2STOCK captures enum value "STOCK"
	HoldingType2STOCK HoldingType2 = "STOCK"
)

// for schema
var holdingType2Enum []interface{}

func init() {
	var res []HoldingType2
	if err := json.Unmarshal([]byte(`["ANNUITY","BOND","CD","DIGITALASSET","MUTUALFUND","OPTION","OTHER","STOCK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		holdingType2Enum = append(holdingType2Enum, v)
	}
}

func (m HoldingType2) validateHoldingType2Enum(path, location string, value HoldingType2) error {
	if err := validate.EnumCase(path, location, value, holdingType2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this holding type2
func (m HoldingType2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHoldingType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this holding type2 based on context it is used
func (m HoldingType2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
