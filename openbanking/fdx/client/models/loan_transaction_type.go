// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LoanTransactionType LoanTransactionType
//
// Defines the type of a loan transaction:<br/> * `ADJUSTMENT`: Adjustment or correction.<br/> * `FEE`: Fee charge. For example, a late payment fee.<br/> * `INTEREST`: Interest charge.<br/> * `PAYMENT`: Required payment that satisfies the minimum payment (e.g. principal + interest for mortgages).<br/> * `LUMP_SUM_PAYMENT`: A single payment of money, as opposed to a series of payments made over time.<br/> * `SKIP_PAYMENT`: Payment that satisfies deferral of a required payment.</br> * `DOUBLE_UP_PAYMENT`: Additional payment beyond the required payment to reduce the principal.</br> * `PAYOFF`: Payment that satisfies the terms of the mortgage loan and completely pays off the debt.
//
// swagger:model LoanTransactionType
type LoanTransactionType string

func NewLoanTransactionType(value LoanTransactionType) *LoanTransactionType {
	v := value
	return &v
}

const (

	// LoanTransactionTypeADJUSTMENT captures enum value "ADJUSTMENT"
	LoanTransactionTypeADJUSTMENT LoanTransactionType = "ADJUSTMENT"

	// LoanTransactionTypeFEE captures enum value "FEE"
	LoanTransactionTypeFEE LoanTransactionType = "FEE"

	// LoanTransactionTypeINTEREST captures enum value "INTEREST"
	LoanTransactionTypeINTEREST LoanTransactionType = "INTEREST"

	// LoanTransactionTypePAYMENT captures enum value "PAYMENT"
	LoanTransactionTypePAYMENT LoanTransactionType = "PAYMENT"

	// LoanTransactionTypeLUMPSUMPAYMENT captures enum value "LUMP_SUM_PAYMENT"
	LoanTransactionTypeLUMPSUMPAYMENT LoanTransactionType = "LUMP_SUM_PAYMENT"

	// LoanTransactionTypeSKIPPAYMENT captures enum value "SKIP_PAYMENT"
	LoanTransactionTypeSKIPPAYMENT LoanTransactionType = "SKIP_PAYMENT"

	// LoanTransactionTypeDOUBLEUPPAYMENT captures enum value "DOUBLE_UP_PAYMENT"
	LoanTransactionTypeDOUBLEUPPAYMENT LoanTransactionType = "DOUBLE_UP_PAYMENT"

	// LoanTransactionTypePAYOFF captures enum value "PAYOFF"
	LoanTransactionTypePAYOFF LoanTransactionType = "PAYOFF"
)

// for schema
var loanTransactionTypeEnum []interface{}

func init() {
	var res []LoanTransactionType
	if err := json.Unmarshal([]byte(`["ADJUSTMENT","FEE","INTEREST","PAYMENT","LUMP_SUM_PAYMENT","SKIP_PAYMENT","DOUBLE_UP_PAYMENT","PAYOFF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loanTransactionTypeEnum = append(loanTransactionTypeEnum, v)
	}
}

func (m LoanTransactionType) validateLoanTransactionTypeEnum(path, location string, value LoanTransactionType) error {
	if err := validate.EnumCase(path, location, value, loanTransactionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this loan transaction type
func (m LoanTransactionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLoanTransactionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this loan transaction type based on context it is used
func (m LoanTransactionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
