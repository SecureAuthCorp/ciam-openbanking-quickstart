// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DeliveryAddressType2 DeliveryAddressType2
//
// Type of address location. One of BUSINESS, HOME, MAILING
//
// swagger:model DeliveryAddressType2
type DeliveryAddressType2 string

func NewDeliveryAddressType2(value DeliveryAddressType2) *DeliveryAddressType2 {
	v := value
	return &v
}

const (

	// DeliveryAddressType2BUSINESS captures enum value "BUSINESS"
	DeliveryAddressType2BUSINESS DeliveryAddressType2 = "BUSINESS"

	// DeliveryAddressType2HOME captures enum value "HOME"
	DeliveryAddressType2HOME DeliveryAddressType2 = "HOME"

	// DeliveryAddressType2MAILING captures enum value "MAILING"
	DeliveryAddressType2MAILING DeliveryAddressType2 = "MAILING"
)

// for schema
var deliveryAddressType2Enum []interface{}

func init() {
	var res []DeliveryAddressType2
	if err := json.Unmarshal([]byte(`["BUSINESS","HOME","MAILING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deliveryAddressType2Enum = append(deliveryAddressType2Enum, v)
	}
}

func (m DeliveryAddressType2) validateDeliveryAddressType2Enum(path, location string, value DeliveryAddressType2) error {
	if err := validate.EnumCase(path, location, value, deliveryAddressType2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this delivery address type2
func (m DeliveryAddressType2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDeliveryAddressType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this delivery address type2 based on context it is used
func (m DeliveryAddressType2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
