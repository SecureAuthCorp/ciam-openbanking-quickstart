// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AccountStatus2 AccountStatus2
//
// Account status. Suggested values are: OPEN, CLOSED, PENDINGOPEN, PENDINGCLOSE, PAID, DELINQUENT, NEGATIVECURRENTBALANCE, RESTRICTED
//
// swagger:model AccountStatus2
type AccountStatus2 string

func NewAccountStatus2(value AccountStatus2) *AccountStatus2 {
	v := value
	return &v
}

const (

	// AccountStatus2CLOSED captures enum value "CLOSED"
	AccountStatus2CLOSED AccountStatus2 = "CLOSED"

	// AccountStatus2DELINQUENT captures enum value "DELINQUENT"
	AccountStatus2DELINQUENT AccountStatus2 = "DELINQUENT"

	// AccountStatus2NEGATIVECURRENTBALANCE captures enum value "NEGATIVECURRENTBALANCE"
	AccountStatus2NEGATIVECURRENTBALANCE AccountStatus2 = "NEGATIVECURRENTBALANCE"

	// AccountStatus2OPEN captures enum value "OPEN"
	AccountStatus2OPEN AccountStatus2 = "OPEN"

	// AccountStatus2PAID captures enum value "PAID"
	AccountStatus2PAID AccountStatus2 = "PAID"

	// AccountStatus2PENDINGCLOSE captures enum value "PENDINGCLOSE"
	AccountStatus2PENDINGCLOSE AccountStatus2 = "PENDINGCLOSE"

	// AccountStatus2PENDINGOPEN captures enum value "PENDINGOPEN"
	AccountStatus2PENDINGOPEN AccountStatus2 = "PENDINGOPEN"

	// AccountStatus2RESTRICTED captures enum value "RESTRICTED"
	AccountStatus2RESTRICTED AccountStatus2 = "RESTRICTED"
)

// for schema
var accountStatus2Enum []interface{}

func init() {
	var res []AccountStatus2
	if err := json.Unmarshal([]byte(`["CLOSED","DELINQUENT","NEGATIVECURRENTBALANCE","OPEN","PAID","PENDINGCLOSE","PENDINGOPEN","RESTRICTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountStatus2Enum = append(accountStatus2Enum, v)
	}
}

func (m AccountStatus2) validateAccountStatus2Enum(path, location string, value AccountStatus2) error {
	if err := validate.EnumCase(path, location, value, accountStatus2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this account status2
func (m AccountStatus2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAccountStatus2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this account status2 based on context it is used
func (m AccountStatus2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
