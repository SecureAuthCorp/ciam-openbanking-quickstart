// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HoldingType HoldingType
//
// The type of an investment holding
//
// swagger:model HoldingType
type HoldingType string

func NewHoldingType(value HoldingType) *HoldingType {
	v := value
	return &v
}

const (

	// HoldingTypeANNUITY captures enum value "ANNUITY"
	HoldingTypeANNUITY HoldingType = "ANNUITY"

	// HoldingTypeBOND captures enum value "BOND"
	HoldingTypeBOND HoldingType = "BOND"

	// HoldingTypeCD captures enum value "CD"
	HoldingTypeCD HoldingType = "CD"

	// HoldingTypeDIGITALASSET captures enum value "DIGITALASSET"
	HoldingTypeDIGITALASSET HoldingType = "DIGITALASSET"

	// HoldingTypeMUTUALFUND captures enum value "MUTUALFUND"
	HoldingTypeMUTUALFUND HoldingType = "MUTUALFUND"

	// HoldingTypeOPTION captures enum value "OPTION"
	HoldingTypeOPTION HoldingType = "OPTION"

	// HoldingTypeOTHER captures enum value "OTHER"
	HoldingTypeOTHER HoldingType = "OTHER"

	// HoldingTypeSTOCK captures enum value "STOCK"
	HoldingTypeSTOCK HoldingType = "STOCK"
)

// for schema
var holdingTypeEnum []interface{}

func init() {
	var res []HoldingType
	if err := json.Unmarshal([]byte(`["ANNUITY","BOND","CD","DIGITALASSET","MUTUALFUND","OPTION","OTHER","STOCK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		holdingTypeEnum = append(holdingTypeEnum, v)
	}
}

func (m HoldingType) validateHoldingTypeEnum(path, location string, value HoldingType) error {
	if err := validate.EnumCase(path, location, value, holdingTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this holding type
func (m HoldingType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHoldingTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this holding type based on context it is used
func (m HoldingType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
