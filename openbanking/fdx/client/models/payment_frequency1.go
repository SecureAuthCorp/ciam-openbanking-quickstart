// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PaymentFrequency1 PaymentFrequency1
//
// ANNUALLY, BIWEEKLY, DAILY, MONTHLY, SEMIANNUALLY, SEMIMONTHLY, WEEKLY
//
// swagger:model PaymentFrequency1
type PaymentFrequency1 string

func NewPaymentFrequency1(value PaymentFrequency1) *PaymentFrequency1 {
	v := value
	return &v
}

const (

	// PaymentFrequency1ANNUALLY captures enum value "ANNUALLY"
	PaymentFrequency1ANNUALLY PaymentFrequency1 = "ANNUALLY"

	// PaymentFrequency1BIWEEKLY captures enum value "BIWEEKLY"
	PaymentFrequency1BIWEEKLY PaymentFrequency1 = "BIWEEKLY"

	// PaymentFrequency1DAILY captures enum value "DAILY"
	PaymentFrequency1DAILY PaymentFrequency1 = "DAILY"

	// PaymentFrequency1MONTHLY captures enum value "MONTHLY"
	PaymentFrequency1MONTHLY PaymentFrequency1 = "MONTHLY"

	// PaymentFrequency1SEMIANNUALLY captures enum value "SEMIANNUALLY"
	PaymentFrequency1SEMIANNUALLY PaymentFrequency1 = "SEMIANNUALLY"

	// PaymentFrequency1SEMIMONTHLY captures enum value "SEMIMONTHLY"
	PaymentFrequency1SEMIMONTHLY PaymentFrequency1 = "SEMIMONTHLY"

	// PaymentFrequency1WEEKLY captures enum value "WEEKLY"
	PaymentFrequency1WEEKLY PaymentFrequency1 = "WEEKLY"
)

// for schema
var paymentFrequency1Enum []interface{}

func init() {
	var res []PaymentFrequency1
	if err := json.Unmarshal([]byte(`["ANNUALLY","BIWEEKLY","DAILY","MONTHLY","SEMIANNUALLY","SEMIMONTHLY","WEEKLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentFrequency1Enum = append(paymentFrequency1Enum, v)
	}
}

func (m PaymentFrequency1) validatePaymentFrequency1Enum(path, location string, value PaymentFrequency1) error {
	if err := validate.EnumCase(path, location, value, paymentFrequency1Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payment frequency1
func (m PaymentFrequency1) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePaymentFrequency1Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this payment frequency1 based on context it is used
func (m PaymentFrequency1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
