// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PolicyProductType PolicyProductType
//
// Distinguishes options in annuity payouts; values are defined by the carrier.<br/> <br/> |Value | Description |<br/> |-----|-----|<br/> | FIXED | Payout is based on a guaranteed rate of return by the carrier |<br/> | VARIABLE | Payout is based on the variable performance of the investments the buyer chooses |
//
// swagger:model PolicyProductType
type PolicyProductType string

func NewPolicyProductType(value PolicyProductType) *PolicyProductType {
	v := value
	return &v
}

const (

	// PolicyProductTypeFIXED captures enum value "FIXED"
	PolicyProductTypeFIXED PolicyProductType = "FIXED"

	// PolicyProductTypeVARIABLE captures enum value "VARIABLE"
	PolicyProductTypeVARIABLE PolicyProductType = "VARIABLE"
)

// for schema
var policyProductTypeEnum []interface{}

func init() {
	var res []PolicyProductType
	if err := json.Unmarshal([]byte(`["FIXED","VARIABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyProductTypeEnum = append(policyProductTypeEnum, v)
	}
}

func (m PolicyProductType) validatePolicyProductTypeEnum(path, location string, value PolicyProductType) error {
	if err := validate.EnumCase(path, location, value, policyProductTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this policy product type
func (m PolicyProductType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePolicyProductTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this policy product type based on context it is used
func (m PolicyProductType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
