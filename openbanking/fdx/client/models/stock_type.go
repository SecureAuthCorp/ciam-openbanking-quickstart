// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StockType StockType
//
// The type of a stock instrument
//
// swagger:model StockType
type StockType string

func NewStockType(value StockType) *StockType {
	v := value
	return &v
}

const (

	// StockTypeCOMMON captures enum value "COMMON"
	StockTypeCOMMON StockType = "COMMON"

	// StockTypeCONVERTIBLE captures enum value "CONVERTIBLE"
	StockTypeCONVERTIBLE StockType = "CONVERTIBLE"

	// StockTypeOTHER captures enum value "OTHER"
	StockTypeOTHER StockType = "OTHER"

	// StockTypePREFERRED captures enum value "PREFERRED"
	StockTypePREFERRED StockType = "PREFERRED"
)

// for schema
var stockTypeEnum []interface{}

func init() {
	var res []StockType
	if err := json.Unmarshal([]byte(`["COMMON","CONVERTIBLE","OTHER","PREFERRED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stockTypeEnum = append(stockTypeEnum, v)
	}
}

func (m StockType) validateStockTypeEnum(path, location string, value StockType) error {
	if err := validate.EnumCase(path, location, value, stockTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this stock type
func (m StockType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStockTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this stock type based on context it is used
func (m StockType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
