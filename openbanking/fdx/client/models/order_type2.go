// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrderType2 OrderType2
//
// Type of order. One of BUY, SELL, BUYTOCOVER, BUYTOOPEN, SELLTOCOVER, SELLTOOPEN,  SELLSHORT, SELLCLOSE
//
// swagger:model OrderType2
type OrderType2 string

func NewOrderType2(value OrderType2) *OrderType2 {
	v := value
	return &v
}

const (

	// OrderType2BUY captures enum value "BUY"
	OrderType2BUY OrderType2 = "BUY"

	// OrderType2SELL captures enum value "SELL"
	OrderType2SELL OrderType2 = "SELL"

	// OrderType2BUYTOCOVER captures enum value "BUYTOCOVER"
	OrderType2BUYTOCOVER OrderType2 = "BUYTOCOVER"

	// OrderType2BUYTOOPEN captures enum value "BUYTOOPEN"
	OrderType2BUYTOOPEN OrderType2 = "BUYTOOPEN"

	// OrderType2SELLTOCOVER captures enum value "SELLTOCOVER"
	OrderType2SELLTOCOVER OrderType2 = "SELLTOCOVER"

	// OrderType2SELLTOOPEN captures enum value "SELLTOOPEN"
	OrderType2SELLTOOPEN OrderType2 = "SELLTOOPEN"

	// OrderType2SELLSHORT captures enum value "SELLSHORT"
	OrderType2SELLSHORT OrderType2 = "SELLSHORT"

	// OrderType2SELLCLOSE captures enum value "SELLCLOSE"
	OrderType2SELLCLOSE OrderType2 = "SELLCLOSE"
)

// for schema
var orderType2Enum []interface{}

func init() {
	var res []OrderType2
	if err := json.Unmarshal([]byte(`["BUY","SELL","BUYTOCOVER","BUYTOOPEN","SELLTOCOVER","SELLTOOPEN","SELLSHORT","SELLCLOSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderType2Enum = append(orderType2Enum, v)
	}
}

func (m OrderType2) validateOrderType2Enum(path, location string, value OrderType2) error {
	if err := validate.EnumCase(path, location, value, orderType2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this order type2
func (m OrderType2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrderType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this order type2 based on context it is used
func (m OrderType2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
