// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PeriodCertainType PeriodCertainType
//
// The number of modal periods comprising the duration of the certain period of an annuity payout.<br/> <br/> | Value | Description |<br/> |-----|-----|<br/> | NONE | Not a Period Certain |<br/> | 5_YEAR | Five year duration |<br/> | 10_YEAR | Ten year duration |<br/> | 20_YEAR | Twenty year duration |<br/> | 30_YEAR | Thirty year duration |
//
// swagger:model PeriodCertainType
type PeriodCertainType string

func NewPeriodCertainType(value PeriodCertainType) *PeriodCertainType {
	v := value
	return &v
}

const (

	// PeriodCertainTypeNONE captures enum value "NONE"
	PeriodCertainTypeNONE PeriodCertainType = "NONE"

	// PeriodCertainTypeNr5YEAR captures enum value "5_YEAR"
	PeriodCertainTypeNr5YEAR PeriodCertainType = "5_YEAR"

	// PeriodCertainTypeNr10YEAR captures enum value "10_YEAR"
	PeriodCertainTypeNr10YEAR PeriodCertainType = "10_YEAR"

	// PeriodCertainTypeNr20YEAR captures enum value "20_YEAR"
	PeriodCertainTypeNr20YEAR PeriodCertainType = "20_YEAR"

	// PeriodCertainTypeNr30YEAR captures enum value "30_YEAR"
	PeriodCertainTypeNr30YEAR PeriodCertainType = "30_YEAR"
)

// for schema
var periodCertainTypeEnum []interface{}

func init() {
	var res []PeriodCertainType
	if err := json.Unmarshal([]byte(`["NONE","5_YEAR","10_YEAR","20_YEAR","30_YEAR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		periodCertainTypeEnum = append(periodCertainTypeEnum, v)
	}
}

func (m PeriodCertainType) validatePeriodCertainTypeEnum(path, location string, value PeriodCertainType) error {
	if err := validate.EnumCase(path, location, value, periodCertainTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this period certain type
func (m PeriodCertainType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePeriodCertainTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this period certain type based on context it is used
func (m PeriodCertainType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
