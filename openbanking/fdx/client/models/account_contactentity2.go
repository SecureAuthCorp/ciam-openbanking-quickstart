// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AccountContactentity2 AccountContactentity2
//
// Contact information associated with this account
//
// swagger:model AccountContactentity2
type AccountContactentity2 struct {

	// Physical mail addresses associated with the account
	Addresses []*DeliveryAddress `json:"addresses"`

	// Email addresses associated with the account
	Emails []string `json:"emails"`

	// Owners of the account
	Holders []*AccountHolderentity `json:"holders"`

	// Telephone numbers associated with the account
	Telephones []*TelephoneNumber `json:"telephones"`
}

// Validate validates this account contactentity2
func (m *AccountContactentity2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHolders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelephones(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountContactentity2) validateAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.Addresses) { // not required
		return nil
	}

	for i := 0; i < len(m.Addresses); i++ {
		if swag.IsZero(m.Addresses[i]) { // not required
			continue
		}

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountContactentity2) validateHolders(formats strfmt.Registry) error {
	if swag.IsZero(m.Holders) { // not required
		return nil
	}

	for i := 0; i < len(m.Holders); i++ {
		if swag.IsZero(m.Holders[i]) { // not required
			continue
		}

		if m.Holders[i] != nil {
			if err := m.Holders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("holders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("holders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountContactentity2) validateTelephones(formats strfmt.Registry) error {
	if swag.IsZero(m.Telephones) { // not required
		return nil
	}

	for i := 0; i < len(m.Telephones); i++ {
		if swag.IsZero(m.Telephones[i]) { // not required
			continue
		}

		if m.Telephones[i] != nil {
			if err := m.Telephones[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("telephones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("telephones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this account contactentity2 based on the context it is used
func (m *AccountContactentity2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHolders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTelephones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountContactentity2) contextValidateAddresses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Addresses); i++ {

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountContactentity2) contextValidateHolders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Holders); i++ {

		if m.Holders[i] != nil {
			if err := m.Holders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("holders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("holders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountContactentity2) contextValidateTelephones(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Telephones); i++ {

		if m.Telephones[i] != nil {
			if err := m.Telephones[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("telephones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("telephones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountContactentity2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountContactentity2) UnmarshalBinary(b []byte) error {
	var res AccountContactentity2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
