// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TransactionReason2 TransactionReason2
//
// Reason for this transaction; CALL (the debt was called), SELL (the debt was sold), MATURITY (the debt reached maturity)
//
// swagger:model TransactionReason2
type TransactionReason2 string

func NewTransactionReason2(value TransactionReason2) *TransactionReason2 {
	v := value
	return &v
}

const (

	// TransactionReason2CALL captures enum value "CALL"
	TransactionReason2CALL TransactionReason2 = "CALL"

	// TransactionReason2MATURITY captures enum value "MATURITY"
	TransactionReason2MATURITY TransactionReason2 = "MATURITY"

	// TransactionReason2SELL captures enum value "SELL"
	TransactionReason2SELL TransactionReason2 = "SELL"
)

// for schema
var transactionReason2Enum []interface{}

func init() {
	var res []TransactionReason2
	if err := json.Unmarshal([]byte(`["CALL","MATURITY","SELL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionReason2Enum = append(transactionReason2Enum, v)
	}
}

func (m TransactionReason2) validateTransactionReason2Enum(path, location string, value TransactionReason2) error {
	if err := validate.EnumCase(path, location, value, transactionReason2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this transaction reason2
func (m TransactionReason2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTransactionReason2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this transaction reason2 based on context it is used
func (m TransactionReason2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
