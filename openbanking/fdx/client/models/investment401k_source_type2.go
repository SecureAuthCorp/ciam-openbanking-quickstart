// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Investment401kSourceType2 Investment401kSourceType2
//
// Source of money. One of PRETAX, AFTERTAX, MATCH, PROFITSHARING, ROLLOVER, OTHERVEST, OTHERNONVEST
//
// swagger:model Investment401kSourceType2
type Investment401kSourceType2 string

func NewInvestment401kSourceType2(value Investment401kSourceType2) *Investment401kSourceType2 {
	v := value
	return &v
}

const (

	// Investment401kSourceType2AFTERTAX captures enum value "AFTERTAX"
	Investment401kSourceType2AFTERTAX Investment401kSourceType2 = "AFTERTAX"

	// Investment401kSourceType2MATCH captures enum value "MATCH"
	Investment401kSourceType2MATCH Investment401kSourceType2 = "MATCH"

	// Investment401kSourceType2OTHERNONVEST captures enum value "OTHERNONVEST"
	Investment401kSourceType2OTHERNONVEST Investment401kSourceType2 = "OTHERNONVEST"

	// Investment401kSourceType2OTHERVEST captures enum value "OTHERVEST"
	Investment401kSourceType2OTHERVEST Investment401kSourceType2 = "OTHERVEST"

	// Investment401kSourceType2PRETAX captures enum value "PRETAX"
	Investment401kSourceType2PRETAX Investment401kSourceType2 = "PRETAX"

	// Investment401kSourceType2PROFITSHARING captures enum value "PROFITSHARING"
	Investment401kSourceType2PROFITSHARING Investment401kSourceType2 = "PROFITSHARING"

	// Investment401kSourceType2ROLLOVER captures enum value "ROLLOVER"
	Investment401kSourceType2ROLLOVER Investment401kSourceType2 = "ROLLOVER"
)

// for schema
var investment401kSourceType2Enum []interface{}

func init() {
	var res []Investment401kSourceType2
	if err := json.Unmarshal([]byte(`["AFTERTAX","MATCH","OTHERNONVEST","OTHERVEST","PRETAX","PROFITSHARING","ROLLOVER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		investment401kSourceType2Enum = append(investment401kSourceType2Enum, v)
	}
}

func (m Investment401kSourceType2) validateInvestment401kSourceType2Enum(path, location string, value Investment401kSourceType2) error {
	if err := validate.EnumCase(path, location, value, investment401kSourceType2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this investment401k source type2
func (m Investment401kSourceType2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInvestment401kSourceType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this investment401k source type2 based on context it is used
func (m Investment401kSourceType2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
