// Code generated by go-swagger; DO NOT EDIT.

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/openbanking-quickstart/openbanking/fdx/models"
)

// CancelPaymentReader is a Reader for the CancelPayment structure.
type CancelPaymentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelPaymentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCancelPaymentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelPaymentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelPaymentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCancelPaymentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewCancelPaymentNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCancelPaymentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCancelPaymentOK creates a CancelPaymentOK with default headers values
func NewCancelPaymentOK() *CancelPaymentOK {
	return &CancelPaymentOK{}
}

/* CancelPaymentOK describes a response with status code 200, with default header values.

Ok
*/
type CancelPaymentOK struct {
	Payload *models.Paymententity
}

func (o *CancelPaymentOK) Error() string {
	return fmt.Sprintf("[DELETE /payments/{paymentId}][%d] cancelPaymentOK  %+v", 200, o.Payload)
}
func (o *CancelPaymentOK) GetPayload() *models.Paymententity {
	return o.Payload
}

func (o *CancelPaymentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Paymententity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelPaymentBadRequest creates a CancelPaymentBadRequest with default headers values
func NewCancelPaymentBadRequest() *CancelPaymentBadRequest {
	return &CancelPaymentBadRequest{}
}

/* CancelPaymentBadRequest describes a response with status code 400, with default header values.

Payment cannot be modified or cancelled at this time. Likely due to the state that it is in
*/
type CancelPaymentBadRequest struct {
	Payload *models.Error
}

func (o *CancelPaymentBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /payments/{paymentId}][%d] cancelPaymentBadRequest  %+v", 400, o.Payload)
}
func (o *CancelPaymentBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CancelPaymentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelPaymentNotFound creates a CancelPaymentNotFound with default headers values
func NewCancelPaymentNotFound() *CancelPaymentNotFound {
	return &CancelPaymentNotFound{}
}

/* CancelPaymentNotFound describes a response with status code 404, with default header values.

A payment with provided ID was not found
*/
type CancelPaymentNotFound struct {
	Payload *models.Error
}

func (o *CancelPaymentNotFound) Error() string {
	return fmt.Sprintf("[DELETE /payments/{paymentId}][%d] cancelPaymentNotFound  %+v", 404, o.Payload)
}
func (o *CancelPaymentNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CancelPaymentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelPaymentInternalServerError creates a CancelPaymentInternalServerError with default headers values
func NewCancelPaymentInternalServerError() *CancelPaymentInternalServerError {
	return &CancelPaymentInternalServerError{}
}

/* CancelPaymentInternalServerError describes a response with status code 500, with default header values.

Catch all exception where request was not processed due to an internal outage/issue. Consider other more specific errors before using this error
*/
type CancelPaymentInternalServerError struct {
	Payload *models.Error
}

func (o *CancelPaymentInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /payments/{paymentId}][%d] cancelPaymentInternalServerError  %+v", 500, o.Payload)
}
func (o *CancelPaymentInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *CancelPaymentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelPaymentNotImplemented creates a CancelPaymentNotImplemented with default headers values
func NewCancelPaymentNotImplemented() *CancelPaymentNotImplemented {
	return &CancelPaymentNotImplemented{}
}

/* CancelPaymentNotImplemented describes a response with status code 501, with default header values.

Error when FdxVersion in Header is not one of those implemented at backend
*/
type CancelPaymentNotImplemented struct {
	Payload *models.Error
}

func (o *CancelPaymentNotImplemented) Error() string {
	return fmt.Sprintf("[DELETE /payments/{paymentId}][%d] cancelPaymentNotImplemented  %+v", 501, o.Payload)
}
func (o *CancelPaymentNotImplemented) GetPayload() *models.Error {
	return o.Payload
}

func (o *CancelPaymentNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelPaymentServiceUnavailable creates a CancelPaymentServiceUnavailable with default headers values
func NewCancelPaymentServiceUnavailable() *CancelPaymentServiceUnavailable {
	return &CancelPaymentServiceUnavailable{}
}

/* CancelPaymentServiceUnavailable describes a response with status code 503, with default header values.

System is down for maintenance
*/
type CancelPaymentServiceUnavailable struct {
	Payload *models.Error
}

func (o *CancelPaymentServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /payments/{paymentId}][%d] cancelPaymentServiceUnavailable  %+v", 503, o.Payload)
}
func (o *CancelPaymentServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *CancelPaymentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
