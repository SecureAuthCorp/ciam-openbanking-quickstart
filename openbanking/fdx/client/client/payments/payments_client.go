// Code generated by go-swagger; DO NOT EDIT.

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new payments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelPayment(params *CancelPaymentParams, opts ...ClientOption) (*CancelPaymentOK, error)

	GetPayment(params *GetPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentOK, error)

	SchedulePayment(params *SchedulePaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SchedulePaymentOK, *SchedulePaymentCreated, error)

	SearchForPayments(params *SearchForPaymentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchForPaymentsOK, error)

	UpdatePayment(params *UpdatePaymentParams, opts ...ClientOption) (*UpdatePaymentOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CancelPayment cancels payment

  Cancel a payment
*/
func (a *Client) CancelPayment(params *CancelPaymentParams, opts ...ClientOption) (*CancelPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelPayment",
		Method:             "DELETE",
		PathPattern:        "/payments/{paymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelPaymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelPaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPayment gets payment

  Get a payment
*/
func (a *Client) GetPayment(params *GetPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPayment",
		Method:             "GET",
		PathPattern:        "/payments/{paymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SchedulePayment schedules payment

  Schedule a payment
*/
func (a *Client) SchedulePayment(params *SchedulePaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SchedulePaymentOK, *SchedulePaymentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulePaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "schedulePayment",
		Method:             "POST",
		PathPattern:        "/payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulePaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SchedulePaymentOK:
		return value, nil, nil
	case *SchedulePaymentCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for payments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchForPayments searches for payments

  Search for payments
*/
func (a *Client) SearchForPayments(params *SearchForPaymentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchForPaymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchForPaymentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchForPayments",
		Method:             "GET",
		PathPattern:        "/payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchForPaymentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchForPaymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchForPayments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePayment updates payment

  Update a payment
*/
func (a *Client) UpdatePayment(params *UpdatePaymentParams, opts ...ClientOption) (*UpdatePaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePayment",
		Method:             "PATCH",
		PathPattern:        "/payments/{paymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePaymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
