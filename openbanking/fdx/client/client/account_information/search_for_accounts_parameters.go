// Code generated by go-swagger; DO NOT EDIT.

package account_information

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchForAccountsParams creates a new SearchForAccountsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchForAccountsParams() *SearchForAccountsParams {
	return &SearchForAccountsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchForAccountsParamsWithTimeout creates a new SearchForAccountsParams object
// with the ability to set a timeout on a request.
func NewSearchForAccountsParamsWithTimeout(timeout time.Duration) *SearchForAccountsParams {
	return &SearchForAccountsParams{
		timeout: timeout,
	}
}

// NewSearchForAccountsParamsWithContext creates a new SearchForAccountsParams object
// with the ability to set a context for a request.
func NewSearchForAccountsParamsWithContext(ctx context.Context) *SearchForAccountsParams {
	return &SearchForAccountsParams{
		Context: ctx,
	}
}

// NewSearchForAccountsParamsWithHTTPClient creates a new SearchForAccountsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchForAccountsParamsWithHTTPClient(client *http.Client) *SearchForAccountsParams {
	return &SearchForAccountsParams{
		HTTPClient: client,
	}
}

/* SearchForAccountsParams contains all the parameters to send to the API endpoint
   for the search for accounts operation.

   Typically these are written to a http.Request.
*/
type SearchForAccountsParams struct {

	/* AccountIds.

	   Comma separated list of account ids
	*/
	AccountIds []string

	/* EndTime.

	   End time for use in retrieval of transactions
	*/
	EndTime []strfmt.Date

	/* Limit.

	   Number of elements that the consumer wishes to receive. Providers should implement reasonable default and maximum values

	   Format: int32
	*/
	Limit *int32

	/* Offset.

	   Opaque cursor used by the provider to send the next set of records
	*/
	Offset *string

	/* ResultType.

	   Flag to indicate if you want a lightweight array of metadata (AccountDescriptor or Tax or Operations) or full item details (Account or a Tax subclass or Availability details). If set to 'lightweight', should only return the fields associated with the metadata entity. This field is not required, defaults to lightweight

	   Default: "lightweight"
	*/
	ResultType *string

	/* StartTime.

	   Start time for use in retrieval of transactions
	*/
	StartTime []strfmt.Date

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search for accounts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchForAccountsParams) WithDefaults() *SearchForAccountsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search for accounts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchForAccountsParams) SetDefaults() {
	var (
		resultTypeDefault = string("lightweight")
	)

	val := SearchForAccountsParams{
		ResultType: &resultTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the search for accounts params
func (o *SearchForAccountsParams) WithTimeout(timeout time.Duration) *SearchForAccountsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search for accounts params
func (o *SearchForAccountsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search for accounts params
func (o *SearchForAccountsParams) WithContext(ctx context.Context) *SearchForAccountsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search for accounts params
func (o *SearchForAccountsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search for accounts params
func (o *SearchForAccountsParams) WithHTTPClient(client *http.Client) *SearchForAccountsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search for accounts params
func (o *SearchForAccountsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountIds adds the accountIds to the search for accounts params
func (o *SearchForAccountsParams) WithAccountIds(accountIds []string) *SearchForAccountsParams {
	o.SetAccountIds(accountIds)
	return o
}

// SetAccountIds adds the accountIds to the search for accounts params
func (o *SearchForAccountsParams) SetAccountIds(accountIds []string) {
	o.AccountIds = accountIds
}

// WithEndTime adds the endTime to the search for accounts params
func (o *SearchForAccountsParams) WithEndTime(endTime []strfmt.Date) *SearchForAccountsParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the search for accounts params
func (o *SearchForAccountsParams) SetEndTime(endTime []strfmt.Date) {
	o.EndTime = endTime
}

// WithLimit adds the limit to the search for accounts params
func (o *SearchForAccountsParams) WithLimit(limit *int32) *SearchForAccountsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the search for accounts params
func (o *SearchForAccountsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the search for accounts params
func (o *SearchForAccountsParams) WithOffset(offset *string) *SearchForAccountsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the search for accounts params
func (o *SearchForAccountsParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithResultType adds the resultType to the search for accounts params
func (o *SearchForAccountsParams) WithResultType(resultType *string) *SearchForAccountsParams {
	o.SetResultType(resultType)
	return o
}

// SetResultType adds the resultType to the search for accounts params
func (o *SearchForAccountsParams) SetResultType(resultType *string) {
	o.ResultType = resultType
}

// WithStartTime adds the startTime to the search for accounts params
func (o *SearchForAccountsParams) WithStartTime(startTime []strfmt.Date) *SearchForAccountsParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the search for accounts params
func (o *SearchForAccountsParams) SetStartTime(startTime []strfmt.Date) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *SearchForAccountsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountIds != nil {

		// binding items for accountIds
		joinedAccountIds := o.bindParamAccountIds(reg)

		// query array param accountIds
		if err := r.SetQueryParam("accountIds", joinedAccountIds...); err != nil {
			return err
		}
	}

	if o.EndTime != nil {

		// binding items for endTime
		joinedEndTime := o.bindParamEndTime(reg)

		// query array param endTime
		if err := r.SetQueryParam("endTime", joinedEndTime...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.ResultType != nil {

		// query param resultType
		var qrResultType string

		if o.ResultType != nil {
			qrResultType = *o.ResultType
		}
		qResultType := qrResultType
		if qResultType != "" {

			if err := r.SetQueryParam("resultType", qResultType); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// binding items for startTime
		joinedStartTime := o.bindParamStartTime(reg)

		// query array param startTime
		if err := r.SetQueryParam("startTime", joinedStartTime...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchForAccounts binds the parameter accountIds
func (o *SearchForAccountsParams) bindParamAccountIds(formats strfmt.Registry) []string {
	accountIdsIR := o.AccountIds

	var accountIdsIC []string
	for _, accountIdsIIR := range accountIdsIR { // explode []string

		accountIdsIIV := accountIdsIIR // string as string
		accountIdsIC = append(accountIdsIC, accountIdsIIV)
	}

	// items.CollectionFormat: ""
	accountIdsIS := swag.JoinByFormat(accountIdsIC, "")

	return accountIdsIS
}

// bindParamSearchForAccounts binds the parameter endTime
func (o *SearchForAccountsParams) bindParamEndTime(formats strfmt.Registry) []string {
	endTimeIR := o.EndTime

	var endTimeIC []string
	for _, endTimeIIR := range endTimeIR { // explode []strfmt.Date

		endTimeIIV := endTimeIIR.String() // strfmt.Date as string
		endTimeIC = append(endTimeIC, endTimeIIV)
	}

	// items.CollectionFormat: ""
	endTimeIS := swag.JoinByFormat(endTimeIC, "")

	return endTimeIS
}

// bindParamSearchForAccounts binds the parameter startTime
func (o *SearchForAccountsParams) bindParamStartTime(formats strfmt.Registry) []string {
	startTimeIR := o.StartTime

	var startTimeIC []string
	for _, startTimeIIR := range startTimeIR { // explode []strfmt.Date

		startTimeIIV := startTimeIIR.String() // strfmt.Date as string
		startTimeIC = append(startTimeIC, startTimeIIV)
	}

	// items.CollectionFormat: ""
	startTimeIS := swag.JoinByFormat(startTimeIC, "")

	return startTimeIS
}
