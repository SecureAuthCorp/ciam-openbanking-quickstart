// Code generated by go-swagger; DO NOT EDIT.

package payee_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new payee management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payee management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePayee(params *CreatePayeeParams, opts ...ClientOption) (*CreatePayeeOK, *CreatePayeeCreated, error)

	DeletePayee(params *DeletePayeeParams, opts ...ClientOption) (*DeletePayeeOK, error)

	GetPayee(params *GetPayeeParams, opts ...ClientOption) (*GetPayeeOK, error)

	SearchForPayees(params *SearchForPayeesParams, opts ...ClientOption) (*SearchForPayeesOK, error)

	UpdatePayee(params *UpdatePayeeParams, opts ...ClientOption) (*UpdatePayeeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreatePayee creates payee

  Create a payee
*/
func (a *Client) CreatePayee(params *CreatePayeeParams, opts ...ClientOption) (*CreatePayeeOK, *CreatePayeeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePayeeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPayee",
		Method:             "POST",
		PathPattern:        "/payees",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePayeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreatePayeeOK:
		return value, nil, nil
	case *CreatePayeeCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for payee_management: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePayee deletes payee

  Delete a payee
*/
func (a *Client) DeletePayee(params *DeletePayeeParams, opts ...ClientOption) (*DeletePayeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePayeeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePayee",
		Method:             "DELETE",
		PathPattern:        "/payees/{payeeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePayeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePayeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePayee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPayee gets payee

  Get a payee
*/
func (a *Client) GetPayee(params *GetPayeeParams, opts ...ClientOption) (*GetPayeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPayeeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPayee",
		Method:             "GET",
		PathPattern:        "/payees/{payeeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPayeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPayeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPayee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchForPayees searches for payees

  Search for payees
*/
func (a *Client) SearchForPayees(params *SearchForPayeesParams, opts ...ClientOption) (*SearchForPayeesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchForPayeesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchForPayees",
		Method:             "GET",
		PathPattern:        "/payees",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchForPayeesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchForPayeesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchForPayees: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePayee updates payee

  Used to update an existing payee. The payee type must match the existing payee. This call updates the payee's fields to the values provided. If a field is not provided, the payee's field is not updated
*/
func (a *Client) UpdatePayee(params *UpdatePayeeParams, opts ...ClientOption) (*UpdatePayeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePayeeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePayee",
		Method:             "PATCH",
		PathPattern:        "/payees/{payeeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePayeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePayeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePayee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
