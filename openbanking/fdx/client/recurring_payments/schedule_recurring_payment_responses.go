// Code generated by go-swagger; DO NOT EDIT.

package recurring_payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/openbanking-quickstart/openbanking/fdx/models"
)

// ScheduleRecurringPaymentReader is a Reader for the ScheduleRecurringPayment structure.
type ScheduleRecurringPaymentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ScheduleRecurringPaymentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewScheduleRecurringPaymentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewScheduleRecurringPaymentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewScheduleRecurringPaymentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewScheduleRecurringPaymentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewScheduleRecurringPaymentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewScheduleRecurringPaymentUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewScheduleRecurringPaymentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewScheduleRecurringPaymentNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewScheduleRecurringPaymentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewScheduleRecurringPaymentOK creates a ScheduleRecurringPaymentOK with default headers values
func NewScheduleRecurringPaymentOK() *ScheduleRecurringPaymentOK {
	return &ScheduleRecurringPaymentOK{}
}

/* ScheduleRecurringPaymentOK describes a response with status code 200, with default header values.

Duplicate Recurring Payment
*/
type ScheduleRecurringPaymentOK struct {
	Payload *models.RecurringPaymententity
}

func (o *ScheduleRecurringPaymentOK) Error() string {
	return fmt.Sprintf("[POST /recurring-payments][%d] scheduleRecurringPaymentOK  %+v", 200, o.Payload)
}
func (o *ScheduleRecurringPaymentOK) GetPayload() *models.RecurringPaymententity {
	return o.Payload
}

func (o *ScheduleRecurringPaymentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RecurringPaymententity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewScheduleRecurringPaymentCreated creates a ScheduleRecurringPaymentCreated with default headers values
func NewScheduleRecurringPaymentCreated() *ScheduleRecurringPaymentCreated {
	return &ScheduleRecurringPaymentCreated{}
}

/* ScheduleRecurringPaymentCreated describes a response with status code 201, with default header values.

Created
*/
type ScheduleRecurringPaymentCreated struct {
	Payload *models.RecurringPaymententity
}

func (o *ScheduleRecurringPaymentCreated) Error() string {
	return fmt.Sprintf("[POST /recurring-payments][%d] scheduleRecurringPaymentCreated  %+v", 201, o.Payload)
}
func (o *ScheduleRecurringPaymentCreated) GetPayload() *models.RecurringPaymententity {
	return o.Payload
}

func (o *ScheduleRecurringPaymentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RecurringPaymententity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewScheduleRecurringPaymentBadRequest creates a ScheduleRecurringPaymentBadRequest with default headers values
func NewScheduleRecurringPaymentBadRequest() *ScheduleRecurringPaymentBadRequest {
	return &ScheduleRecurringPaymentBadRequest{}
}

/* ScheduleRecurringPaymentBadRequest describes a response with status code 400, with default header values.

Request is invalid
*/
type ScheduleRecurringPaymentBadRequest struct {
	Payload *models.Error
}

func (o *ScheduleRecurringPaymentBadRequest) Error() string {
	return fmt.Sprintf("[POST /recurring-payments][%d] scheduleRecurringPaymentBadRequest  %+v", 400, o.Payload)
}
func (o *ScheduleRecurringPaymentBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ScheduleRecurringPaymentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewScheduleRecurringPaymentNotFound creates a ScheduleRecurringPaymentNotFound with default headers values
func NewScheduleRecurringPaymentNotFound() *ScheduleRecurringPaymentNotFound {
	return &ScheduleRecurringPaymentNotFound{}
}

/* ScheduleRecurringPaymentNotFound describes a response with status code 404, with default header values.

Requested payment is invalid
*/
type ScheduleRecurringPaymentNotFound struct {
	Payload *models.Error
}

func (o *ScheduleRecurringPaymentNotFound) Error() string {
	return fmt.Sprintf("[POST /recurring-payments][%d] scheduleRecurringPaymentNotFound  %+v", 404, o.Payload)
}
func (o *ScheduleRecurringPaymentNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ScheduleRecurringPaymentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewScheduleRecurringPaymentConflict creates a ScheduleRecurringPaymentConflict with default headers values
func NewScheduleRecurringPaymentConflict() *ScheduleRecurringPaymentConflict {
	return &ScheduleRecurringPaymentConflict{}
}

/* ScheduleRecurringPaymentConflict describes a response with status code 409, with default header values.

Duplicate Request
*/
type ScheduleRecurringPaymentConflict struct {
	Payload *models.RecurringPaymententity
}

func (o *ScheduleRecurringPaymentConflict) Error() string {
	return fmt.Sprintf("[POST /recurring-payments][%d] scheduleRecurringPaymentConflict  %+v", 409, o.Payload)
}
func (o *ScheduleRecurringPaymentConflict) GetPayload() *models.RecurringPaymententity {
	return o.Payload
}

func (o *ScheduleRecurringPaymentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RecurringPaymententity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewScheduleRecurringPaymentUnprocessableEntity creates a ScheduleRecurringPaymentUnprocessableEntity with default headers values
func NewScheduleRecurringPaymentUnprocessableEntity() *ScheduleRecurringPaymentUnprocessableEntity {
	return &ScheduleRecurringPaymentUnprocessableEntity{}
}

/* ScheduleRecurringPaymentUnprocessableEntity describes a response with status code 422, with default header values.

Account type not supported
*/
type ScheduleRecurringPaymentUnprocessableEntity struct {
	Payload *models.Error
}

func (o *ScheduleRecurringPaymentUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /recurring-payments][%d] scheduleRecurringPaymentUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *ScheduleRecurringPaymentUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *ScheduleRecurringPaymentUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewScheduleRecurringPaymentInternalServerError creates a ScheduleRecurringPaymentInternalServerError with default headers values
func NewScheduleRecurringPaymentInternalServerError() *ScheduleRecurringPaymentInternalServerError {
	return &ScheduleRecurringPaymentInternalServerError{}
}

/* ScheduleRecurringPaymentInternalServerError describes a response with status code 500, with default header values.

Catch all exception where request was not processed due to an internal outage/issue. Consider other more specific errors before using this error
*/
type ScheduleRecurringPaymentInternalServerError struct {
	Payload *models.Error
}

func (o *ScheduleRecurringPaymentInternalServerError) Error() string {
	return fmt.Sprintf("[POST /recurring-payments][%d] scheduleRecurringPaymentInternalServerError  %+v", 500, o.Payload)
}
func (o *ScheduleRecurringPaymentInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ScheduleRecurringPaymentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewScheduleRecurringPaymentNotImplemented creates a ScheduleRecurringPaymentNotImplemented with default headers values
func NewScheduleRecurringPaymentNotImplemented() *ScheduleRecurringPaymentNotImplemented {
	return &ScheduleRecurringPaymentNotImplemented{}
}

/* ScheduleRecurringPaymentNotImplemented describes a response with status code 501, with default header values.

Error when FdxVersion in Header is not one of those implemented at backend
*/
type ScheduleRecurringPaymentNotImplemented struct {
	Payload *models.Error
}

func (o *ScheduleRecurringPaymentNotImplemented) Error() string {
	return fmt.Sprintf("[POST /recurring-payments][%d] scheduleRecurringPaymentNotImplemented  %+v", 501, o.Payload)
}
func (o *ScheduleRecurringPaymentNotImplemented) GetPayload() *models.Error {
	return o.Payload
}

func (o *ScheduleRecurringPaymentNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewScheduleRecurringPaymentServiceUnavailable creates a ScheduleRecurringPaymentServiceUnavailable with default headers values
func NewScheduleRecurringPaymentServiceUnavailable() *ScheduleRecurringPaymentServiceUnavailable {
	return &ScheduleRecurringPaymentServiceUnavailable{}
}

/* ScheduleRecurringPaymentServiceUnavailable describes a response with status code 503, with default header values.

System is down for maintenance
*/
type ScheduleRecurringPaymentServiceUnavailable struct {
	Payload *models.Error
}

func (o *ScheduleRecurringPaymentServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /recurring-payments][%d] scheduleRecurringPaymentServiceUnavailable  %+v", 503, o.Payload)
}
func (o *ScheduleRecurringPaymentServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *ScheduleRecurringPaymentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
