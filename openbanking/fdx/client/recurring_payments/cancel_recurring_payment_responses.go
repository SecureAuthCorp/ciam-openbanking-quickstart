// Code generated by go-swagger; DO NOT EDIT.

package recurring_payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/openbanking-quickstart/openbanking/fdx/models"
)

// CancelRecurringPaymentReader is a Reader for the CancelRecurringPayment structure.
type CancelRecurringPaymentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelRecurringPaymentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCancelRecurringPaymentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelRecurringPaymentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelRecurringPaymentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCancelRecurringPaymentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewCancelRecurringPaymentNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCancelRecurringPaymentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCancelRecurringPaymentOK creates a CancelRecurringPaymentOK with default headers values
func NewCancelRecurringPaymentOK() *CancelRecurringPaymentOK {
	return &CancelRecurringPaymentOK{}
}

/* CancelRecurringPaymentOK describes a response with status code 200, with default header values.

Ok
*/
type CancelRecurringPaymentOK struct {
	Payload *models.RecurringPaymententity
}

func (o *CancelRecurringPaymentOK) Error() string {
	return fmt.Sprintf("[DELETE /recurring-payments/{recurringPaymentId}][%d] cancelRecurringPaymentOK  %+v", 200, o.Payload)
}
func (o *CancelRecurringPaymentOK) GetPayload() *models.RecurringPaymententity {
	return o.Payload
}

func (o *CancelRecurringPaymentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RecurringPaymententity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelRecurringPaymentBadRequest creates a CancelRecurringPaymentBadRequest with default headers values
func NewCancelRecurringPaymentBadRequest() *CancelRecurringPaymentBadRequest {
	return &CancelRecurringPaymentBadRequest{}
}

/* CancelRecurringPaymentBadRequest describes a response with status code 400, with default header values.

Recurring payment cannot be modified or cancelled at this time. Likely due to the state that it is in
*/
type CancelRecurringPaymentBadRequest struct {
	Payload *models.Error
}

func (o *CancelRecurringPaymentBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /recurring-payments/{recurringPaymentId}][%d] cancelRecurringPaymentBadRequest  %+v", 400, o.Payload)
}
func (o *CancelRecurringPaymentBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CancelRecurringPaymentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelRecurringPaymentNotFound creates a CancelRecurringPaymentNotFound with default headers values
func NewCancelRecurringPaymentNotFound() *CancelRecurringPaymentNotFound {
	return &CancelRecurringPaymentNotFound{}
}

/* CancelRecurringPaymentNotFound describes a response with status code 404, with default header values.

A recurring payment with provided ID was not found
*/
type CancelRecurringPaymentNotFound struct {
	Payload *models.Error
}

func (o *CancelRecurringPaymentNotFound) Error() string {
	return fmt.Sprintf("[DELETE /recurring-payments/{recurringPaymentId}][%d] cancelRecurringPaymentNotFound  %+v", 404, o.Payload)
}
func (o *CancelRecurringPaymentNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CancelRecurringPaymentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelRecurringPaymentInternalServerError creates a CancelRecurringPaymentInternalServerError with default headers values
func NewCancelRecurringPaymentInternalServerError() *CancelRecurringPaymentInternalServerError {
	return &CancelRecurringPaymentInternalServerError{}
}

/* CancelRecurringPaymentInternalServerError describes a response with status code 500, with default header values.

Catch all exception where request was not processed due to an internal outage/issue. Consider other more specific errors before using this error
*/
type CancelRecurringPaymentInternalServerError struct {
	Payload *models.Error
}

func (o *CancelRecurringPaymentInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /recurring-payments/{recurringPaymentId}][%d] cancelRecurringPaymentInternalServerError  %+v", 500, o.Payload)
}
func (o *CancelRecurringPaymentInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *CancelRecurringPaymentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelRecurringPaymentNotImplemented creates a CancelRecurringPaymentNotImplemented with default headers values
func NewCancelRecurringPaymentNotImplemented() *CancelRecurringPaymentNotImplemented {
	return &CancelRecurringPaymentNotImplemented{}
}

/* CancelRecurringPaymentNotImplemented describes a response with status code 501, with default header values.

Error when FdxVersion in Header is not one of those implemented at backend
*/
type CancelRecurringPaymentNotImplemented struct {
	Payload *models.Error
}

func (o *CancelRecurringPaymentNotImplemented) Error() string {
	return fmt.Sprintf("[DELETE /recurring-payments/{recurringPaymentId}][%d] cancelRecurringPaymentNotImplemented  %+v", 501, o.Payload)
}
func (o *CancelRecurringPaymentNotImplemented) GetPayload() *models.Error {
	return o.Payload
}

func (o *CancelRecurringPaymentNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelRecurringPaymentServiceUnavailable creates a CancelRecurringPaymentServiceUnavailable with default headers values
func NewCancelRecurringPaymentServiceUnavailable() *CancelRecurringPaymentServiceUnavailable {
	return &CancelRecurringPaymentServiceUnavailable{}
}

/* CancelRecurringPaymentServiceUnavailable describes a response with status code 503, with default header values.

System is down for maintenance
*/
type CancelRecurringPaymentServiceUnavailable struct {
	Payload *models.Error
}

func (o *CancelRecurringPaymentServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /recurring-payments/{recurringPaymentId}][%d] cancelRecurringPaymentServiceUnavailable  %+v", 503, o.Payload)
}
func (o *CancelRecurringPaymentServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *CancelRecurringPaymentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
