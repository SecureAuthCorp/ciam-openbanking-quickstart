// Code generated by go-swagger; DO NOT EDIT.

package recurring_payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/openbanking-quickstart/openbanking/fdx/models"
)

// UpdateRecurringPaymentReader is a Reader for the UpdateRecurringPayment structure.
type UpdateRecurringPaymentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRecurringPaymentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRecurringPaymentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRecurringPaymentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRecurringPaymentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateRecurringPaymentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateRecurringPaymentUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRecurringPaymentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewUpdateRecurringPaymentNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateRecurringPaymentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateRecurringPaymentOK creates a UpdateRecurringPaymentOK with default headers values
func NewUpdateRecurringPaymentOK() *UpdateRecurringPaymentOK {
	return &UpdateRecurringPaymentOK{}
}

/* UpdateRecurringPaymentOK describes a response with status code 200, with default header values.

Ok
*/
type UpdateRecurringPaymentOK struct {
	Payload *models.RecurringPaymententity
}

func (o *UpdateRecurringPaymentOK) Error() string {
	return fmt.Sprintf("[PATCH /recurring-payments/{recurringPaymentId}][%d] updateRecurringPaymentOK  %+v", 200, o.Payload)
}
func (o *UpdateRecurringPaymentOK) GetPayload() *models.RecurringPaymententity {
	return o.Payload
}

func (o *UpdateRecurringPaymentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RecurringPaymententity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRecurringPaymentBadRequest creates a UpdateRecurringPaymentBadRequest with default headers values
func NewUpdateRecurringPaymentBadRequest() *UpdateRecurringPaymentBadRequest {
	return &UpdateRecurringPaymentBadRequest{}
}

/* UpdateRecurringPaymentBadRequest describes a response with status code 400, with default header values.

Request is invalid
*/
type UpdateRecurringPaymentBadRequest struct {
	Payload *models.Error
}

func (o *UpdateRecurringPaymentBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /recurring-payments/{recurringPaymentId}][%d] updateRecurringPaymentBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateRecurringPaymentBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateRecurringPaymentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRecurringPaymentNotFound creates a UpdateRecurringPaymentNotFound with default headers values
func NewUpdateRecurringPaymentNotFound() *UpdateRecurringPaymentNotFound {
	return &UpdateRecurringPaymentNotFound{}
}

/* UpdateRecurringPaymentNotFound describes a response with status code 404, with default header values.

Requested recurring payment change is invalid
*/
type UpdateRecurringPaymentNotFound struct {
	Payload *models.Error
}

func (o *UpdateRecurringPaymentNotFound) Error() string {
	return fmt.Sprintf("[PATCH /recurring-payments/{recurringPaymentId}][%d] updateRecurringPaymentNotFound  %+v", 404, o.Payload)
}
func (o *UpdateRecurringPaymentNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateRecurringPaymentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRecurringPaymentConflict creates a UpdateRecurringPaymentConflict with default headers values
func NewUpdateRecurringPaymentConflict() *UpdateRecurringPaymentConflict {
	return &UpdateRecurringPaymentConflict{}
}

/* UpdateRecurringPaymentConflict describes a response with status code 409, with default header values.

Duplicate Request
*/
type UpdateRecurringPaymentConflict struct {
	Payload *models.RecurringPaymententity
}

func (o *UpdateRecurringPaymentConflict) Error() string {
	return fmt.Sprintf("[PATCH /recurring-payments/{recurringPaymentId}][%d] updateRecurringPaymentConflict  %+v", 409, o.Payload)
}
func (o *UpdateRecurringPaymentConflict) GetPayload() *models.RecurringPaymententity {
	return o.Payload
}

func (o *UpdateRecurringPaymentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RecurringPaymententity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRecurringPaymentUnprocessableEntity creates a UpdateRecurringPaymentUnprocessableEntity with default headers values
func NewUpdateRecurringPaymentUnprocessableEntity() *UpdateRecurringPaymentUnprocessableEntity {
	return &UpdateRecurringPaymentUnprocessableEntity{}
}

/* UpdateRecurringPaymentUnprocessableEntity describes a response with status code 422, with default header values.

Account type not supported
*/
type UpdateRecurringPaymentUnprocessableEntity struct {
	Payload *models.Error
}

func (o *UpdateRecurringPaymentUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /recurring-payments/{recurringPaymentId}][%d] updateRecurringPaymentUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *UpdateRecurringPaymentUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateRecurringPaymentUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRecurringPaymentInternalServerError creates a UpdateRecurringPaymentInternalServerError with default headers values
func NewUpdateRecurringPaymentInternalServerError() *UpdateRecurringPaymentInternalServerError {
	return &UpdateRecurringPaymentInternalServerError{}
}

/* UpdateRecurringPaymentInternalServerError describes a response with status code 500, with default header values.

Catch all exception where request was not processed due to an internal outage/issue. Consider other more specific errors before using this error
*/
type UpdateRecurringPaymentInternalServerError struct {
	Payload *models.Error
}

func (o *UpdateRecurringPaymentInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /recurring-payments/{recurringPaymentId}][%d] updateRecurringPaymentInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateRecurringPaymentInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateRecurringPaymentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRecurringPaymentNotImplemented creates a UpdateRecurringPaymentNotImplemented with default headers values
func NewUpdateRecurringPaymentNotImplemented() *UpdateRecurringPaymentNotImplemented {
	return &UpdateRecurringPaymentNotImplemented{}
}

/* UpdateRecurringPaymentNotImplemented describes a response with status code 501, with default header values.

Error when FdxVersion in Header is not one of those implemented at backend
*/
type UpdateRecurringPaymentNotImplemented struct {
	Payload *models.Error
}

func (o *UpdateRecurringPaymentNotImplemented) Error() string {
	return fmt.Sprintf("[PATCH /recurring-payments/{recurringPaymentId}][%d] updateRecurringPaymentNotImplemented  %+v", 501, o.Payload)
}
func (o *UpdateRecurringPaymentNotImplemented) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateRecurringPaymentNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRecurringPaymentServiceUnavailable creates a UpdateRecurringPaymentServiceUnavailable with default headers values
func NewUpdateRecurringPaymentServiceUnavailable() *UpdateRecurringPaymentServiceUnavailable {
	return &UpdateRecurringPaymentServiceUnavailable{}
}

/* UpdateRecurringPaymentServiceUnavailable describes a response with status code 503, with default header values.

System is down for maintenance
*/
type UpdateRecurringPaymentServiceUnavailable struct {
	Payload *models.Error
}

func (o *UpdateRecurringPaymentServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /recurring-payments/{recurringPaymentId}][%d] updateRecurringPaymentServiceUnavailable  %+v", 503, o.Payload)
}
func (o *UpdateRecurringPaymentServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateRecurringPaymentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
