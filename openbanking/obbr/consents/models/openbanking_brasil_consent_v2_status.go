// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilConsentV2Status Status
//
// Estado atual do consentimento cadastrado.
// Example: AWAITING_AUTHORISATION
//
// swagger:model OpenbankingBrasilConsentV2Status
type OpenbankingBrasilConsentV2Status string

func NewOpenbankingBrasilConsentV2Status(value OpenbankingBrasilConsentV2Status) *OpenbankingBrasilConsentV2Status {
	v := value
	return &v
}

const (

	// OpenbankingBrasilConsentV2StatusAUTHORISED captures enum value "AUTHORISED"
	OpenbankingBrasilConsentV2StatusAUTHORISED OpenbankingBrasilConsentV2Status = "AUTHORISED"

	// OpenbankingBrasilConsentV2StatusAWAITINGAUTHORISATION captures enum value "AWAITING_AUTHORISATION"
	OpenbankingBrasilConsentV2StatusAWAITINGAUTHORISATION OpenbankingBrasilConsentV2Status = "AWAITING_AUTHORISATION"

	// OpenbankingBrasilConsentV2StatusREJECTED captures enum value "REJECTED"
	OpenbankingBrasilConsentV2StatusREJECTED OpenbankingBrasilConsentV2Status = "REJECTED"
)

// for schema
var openbankingBrasilConsentV2StatusEnum []interface{}

func init() {
	var res []OpenbankingBrasilConsentV2Status
	if err := json.Unmarshal([]byte(`["AUTHORISED","AWAITING_AUTHORISATION","REJECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openbankingBrasilConsentV2StatusEnum = append(openbankingBrasilConsentV2StatusEnum, v)
	}
}

func (m OpenbankingBrasilConsentV2Status) validateOpenbankingBrasilConsentV2StatusEnum(path, location string, value OpenbankingBrasilConsentV2Status) error {
	if err := validate.EnumCase(path, location, value, openbankingBrasilConsentV2StatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openbanking brasil consent v2 status
func (m OpenbankingBrasilConsentV2Status) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenbankingBrasilConsentV2StatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openbanking brasil consent v2 status based on context it is used
func (m OpenbankingBrasilConsentV2Status) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
