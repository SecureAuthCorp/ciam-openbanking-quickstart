// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilConsentV2Rejection Rejection
//
// Objeto a ser retornado caso o consentimento seja rejeitado.
//
// swagger:model OpenbankingBrasilConsentV2Rejection
type OpenbankingBrasilConsentV2Rejection struct {

	// reason
	// Required: true
	Reason *OpenbankingBrasilConsentV2RejectedReason `json:"reason"`

	// rejected by
	// Required: true
	RejectedBy *OpenbankingBrasilConsentV2EnumRejectedBy `json:"rejectedBy"`
}

// Validate validates this openbanking brasil consent v2 rejection
func (m *OpenbankingBrasilConsentV2Rejection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejectedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingBrasilConsentV2Rejection) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("reason", "body", m.Reason); err != nil {
		return err
	}

	if m.Reason != nil {
		if err := m.Reason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *OpenbankingBrasilConsentV2Rejection) validateRejectedBy(formats strfmt.Registry) error {

	if err := validate.Required("rejectedBy", "body", m.RejectedBy); err != nil {
		return err
	}

	if err := validate.Required("rejectedBy", "body", m.RejectedBy); err != nil {
		return err
	}

	if m.RejectedBy != nil {
		if err := m.RejectedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rejectedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rejectedBy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this openbanking brasil consent v2 rejection based on the context it is used
func (m *OpenbankingBrasilConsentV2Rejection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRejectedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingBrasilConsentV2Rejection) contextValidateReason(ctx context.Context, formats strfmt.Registry) error {

	if m.Reason != nil {
		if err := m.Reason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *OpenbankingBrasilConsentV2Rejection) contextValidateRejectedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.RejectedBy != nil {
		if err := m.RejectedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rejectedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rejectedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenbankingBrasilConsentV2Rejection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenbankingBrasilConsentV2Rejection) UnmarshalBinary(b []byte) error {
	var res OpenbankingBrasilConsentV2Rejection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
