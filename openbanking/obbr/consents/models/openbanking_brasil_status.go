// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilStatus Status
//
// Estado atual do consentimento cadastrado.
//
// swagger:model OpenbankingBrasilStatus
type OpenbankingBrasilStatus string

const (

	// OpenbankingBrasilStatusAUTHORISED captures enum value "AUTHORISED"
	OpenbankingBrasilStatusAUTHORISED OpenbankingBrasilStatus = "AUTHORISED"

	// OpenbankingBrasilStatusAWAITINGAUTHORISATION captures enum value "AWAITING_AUTHORISATION"
	OpenbankingBrasilStatusAWAITINGAUTHORISATION OpenbankingBrasilStatus = "AWAITING_AUTHORISATION"

	// OpenbankingBrasilStatusREJECTED captures enum value "REJECTED"
	OpenbankingBrasilStatusREJECTED OpenbankingBrasilStatus = "REJECTED"
)

// for schema
var openbankingBrasilStatusEnum []interface{}

func init() {
	var res []OpenbankingBrasilStatus
	if err := json.Unmarshal([]byte(`["AUTHORISED","AWAITING_AUTHORISATION","REJECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openbankingBrasilStatusEnum = append(openbankingBrasilStatusEnum, v)
	}
}

func (m OpenbankingBrasilStatus) validateOpenbankingBrasilStatusEnum(path, location string, value OpenbankingBrasilStatus) error {
	if err := validate.EnumCase(path, location, value, openbankingBrasilStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openbanking brasil status
func (m OpenbankingBrasilStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenbankingBrasilStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openbanking brasil status based on context it is used
func (m OpenbankingBrasilStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
