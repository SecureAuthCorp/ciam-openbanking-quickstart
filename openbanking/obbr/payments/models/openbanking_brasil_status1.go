// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilStatus1 Status1
//
// Estado atual da iniciao de pagamento. O estado evolui na seguinte ordem:
// 1. PDNG (PENDING) - Iniciao de pagamento ou transao de pagamento est pendente. Checagens adicionais em realizao.
// 2. PART (PARTIALLY ACCEPTED) - Aguardando autorizao mltipla alada.
// 3. ACSP (ACCEPTED_SETTLEMENT_IN_PROCESS) - Iniciao de pagamento aceita e processamento do pagamento foi iniciado.
// 4. ACSC (ACCEPTED_SETTLEMENT_COMPLETED_DEBITOR_ACCOUNT) - Dbito realizado na conta do pagador.
// 5. ACCC (ACCEPTED_SETTLEMENT_COMPLETED) - Crdito realizado na instituio de destino.
// Em caso insucesso:
// RJCT (REJECTED) - Instruo de pagamento rejeitada.
//
// swagger:model OpenbankingBrasilStatus1
type OpenbankingBrasilStatus1 string

const (

	// OpenbankingBrasilStatus1PDNG captures enum value "PDNG"
	OpenbankingBrasilStatus1PDNG OpenbankingBrasilStatus1 = "PDNG"

	// OpenbankingBrasilStatus1PART captures enum value "PART"
	OpenbankingBrasilStatus1PART OpenbankingBrasilStatus1 = "PART"

	// OpenbankingBrasilStatus1ACSP captures enum value "ACSP"
	OpenbankingBrasilStatus1ACSP OpenbankingBrasilStatus1 = "ACSP"

	// OpenbankingBrasilStatus1ACSC captures enum value "ACSC"
	OpenbankingBrasilStatus1ACSC OpenbankingBrasilStatus1 = "ACSC"

	// OpenbankingBrasilStatus1ACCC captures enum value "ACCC"
	OpenbankingBrasilStatus1ACCC OpenbankingBrasilStatus1 = "ACCC"

	// OpenbankingBrasilStatus1RJCT captures enum value "RJCT"
	OpenbankingBrasilStatus1RJCT OpenbankingBrasilStatus1 = "RJCT"
)

// for schema
var openbankingBrasilStatus1Enum []interface{}

func init() {
	var res []OpenbankingBrasilStatus1
	if err := json.Unmarshal([]byte(`["PDNG","PART","ACSP","ACSC","ACCC","RJCT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openbankingBrasilStatus1Enum = append(openbankingBrasilStatus1Enum, v)
	}
}

func (m OpenbankingBrasilStatus1) validateOpenbankingBrasilStatus1Enum(path, location string, value OpenbankingBrasilStatus1) error {
	if err := validate.EnumCase(path, location, value, openbankingBrasilStatus1Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openbanking brasil status1
func (m OpenbankingBrasilStatus1) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenbankingBrasilStatus1Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openbanking brasil status1 based on context it is used
func (m OpenbankingBrasilStatus1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
