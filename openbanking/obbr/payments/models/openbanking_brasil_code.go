// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilCode Code
//
// Cdigos de erros previstos na criao de consentimento para a iniciao de pagamentos:
//  FORMA_PGTO_INVALIDA: Forma de pagamento invlida.
//  DATA_PGTO_INVALIDA: Data de pagamento invlida.
//  NAO_INFORMADO: No informado.
//
// swagger:model OpenbankingBrasilCode
type OpenbankingBrasilCode string

const (

	// OpenbankingBrasilCodeFORMAPGTOINVALIDA captures enum value "FORMA_PGTO_INVALIDA"
	OpenbankingBrasilCodeFORMAPGTOINVALIDA OpenbankingBrasilCode = "FORMA_PGTO_INVALIDA"

	// OpenbankingBrasilCodeDATAPGTOINVALIDA captures enum value "DATA_PGTO_INVALIDA"
	OpenbankingBrasilCodeDATAPGTOINVALIDA OpenbankingBrasilCode = "DATA_PGTO_INVALIDA"

	// OpenbankingBrasilCodeNAOINFORMADO captures enum value "NAO_INFORMADO"
	OpenbankingBrasilCodeNAOINFORMADO OpenbankingBrasilCode = "NAO_INFORMADO"
)

// for schema
var openbankingBrasilCodeEnum []interface{}

func init() {
	var res []OpenbankingBrasilCode
	if err := json.Unmarshal([]byte(`["FORMA_PGTO_INVALIDA","DATA_PGTO_INVALIDA","NAO_INFORMADO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openbankingBrasilCodeEnum = append(openbankingBrasilCodeEnum, v)
	}
}

func (m OpenbankingBrasilCode) validateOpenbankingBrasilCodeEnum(path, location string, value OpenbankingBrasilCode) error {
	if err := validate.EnumCase(path, location, value, openbankingBrasilCodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openbanking brasil code
func (m OpenbankingBrasilCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenbankingBrasilCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openbanking brasil code based on context it is used
func (m OpenbankingBrasilCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
