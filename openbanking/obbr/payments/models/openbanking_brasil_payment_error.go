// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilPaymentError Error
//
// swagger:model OpenbankingBrasilPaymentError
type OpenbankingBrasilPaymentError struct {

	// code
	// Required: true
	Code *OpenbankingBrasilPaymentCode `json:"code"`

	// Descrio especfica do erro de acordo com o cdigo reportado:
	//  FORMA_PGTO_INVALIDA  Meio de pagamento invlido.
	//  DATA_PGTO_INVALIDA  Data de pagamento invlida no contexto, por exemplo, data no passado. Para pagamentos nicos deve ser informada a data atual, do dia corrente.
	//  DETALHE_PGTO_INVALIDO: O campo [nome_campo] no atende os requisitos de preenchimento.
	//  NAO_INFORMADO  No reportado/identificado pela instituio detentora de conta.
	// Example: Meio de pagamento invlido.
	// Required: true
	// Max Length: 2048
	// Pattern: \w*\W*
	Detail string `json:"detail"`

	// Ttulo especfico do erro reportado, de acordo com o cdigo enviado:
	//  FORMA_PGTO_INVALIDA: Forma de pagamento invlida.
	//  DATA_PGTO_INVALIDA: Data de pagamento invlida.
	//  DETALHE_PGTO_INVALIDO: Detalhe do pagamento invlido.
	//  NAO_INFORMADO: No informado.
	// Example: Forma de pagamento invlida.
	// Required: true
	// Max Length: 255
	// Pattern: \w*\W*
	Title string `json:"title"`
}

// Validate validates this openbanking brasil payment error
func (m *OpenbankingBrasilPaymentError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingBrasilPaymentError) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	if m.Code != nil {
		if err := m.Code.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("code")
			}
			return err
		}
	}

	return nil
}

func (m *OpenbankingBrasilPaymentError) validateDetail(formats strfmt.Registry) error {

	if err := validate.RequiredString("detail", "body", m.Detail); err != nil {
		return err
	}

	if err := validate.MaxLength("detail", "body", m.Detail, 2048); err != nil {
		return err
	}

	if err := validate.Pattern("detail", "body", m.Detail, `\w*\W*`); err != nil {
		return err
	}

	return nil
}

func (m *OpenbankingBrasilPaymentError) validateTitle(formats strfmt.Registry) error {

	if err := validate.RequiredString("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", m.Title, 255); err != nil {
		return err
	}

	if err := validate.Pattern("title", "body", m.Title, `\w*\W*`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this openbanking brasil payment error based on the context it is used
func (m *OpenbankingBrasilPaymentError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingBrasilPaymentError) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if m.Code != nil {
		if err := m.Code.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("code")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenbankingBrasilPaymentError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenbankingBrasilPaymentError) UnmarshalBinary(b []byte) error {
	var res OpenbankingBrasilPaymentError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
