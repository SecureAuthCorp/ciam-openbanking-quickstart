// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilPaymentEnumLocalInstrument EnumLocalInstrument
//
// Especifica a forma de iniciao do pagamento:
// - MANU - Insero manual de dados da conta transacional
// - DICT - Insero manual de chave Pix
// - QRDN - QR code dinmico
// - QRES - QR code esttico
// - INIC - Indica que o recebedor (creditor) contratou o Iniciador de Pagamentos especificamente para realizar iniciaes de pagamento em que o beneficirio  previamente conhecido.
// Example: DICT
//
// swagger:model OpenbankingBrasilPaymentEnumLocalInstrument
type OpenbankingBrasilPaymentEnumLocalInstrument string

func NewOpenbankingBrasilPaymentEnumLocalInstrument(value OpenbankingBrasilPaymentEnumLocalInstrument) *OpenbankingBrasilPaymentEnumLocalInstrument {
	v := value
	return &v
}

const (

	// OpenbankingBrasilPaymentEnumLocalInstrumentMANU captures enum value "MANU"
	OpenbankingBrasilPaymentEnumLocalInstrumentMANU OpenbankingBrasilPaymentEnumLocalInstrument = "MANU"

	// OpenbankingBrasilPaymentEnumLocalInstrumentDICT captures enum value "DICT"
	OpenbankingBrasilPaymentEnumLocalInstrumentDICT OpenbankingBrasilPaymentEnumLocalInstrument = "DICT"

	// OpenbankingBrasilPaymentEnumLocalInstrumentQRDN captures enum value "QRDN"
	OpenbankingBrasilPaymentEnumLocalInstrumentQRDN OpenbankingBrasilPaymentEnumLocalInstrument = "QRDN"

	// OpenbankingBrasilPaymentEnumLocalInstrumentQRES captures enum value "QRES"
	OpenbankingBrasilPaymentEnumLocalInstrumentQRES OpenbankingBrasilPaymentEnumLocalInstrument = "QRES"

	// OpenbankingBrasilPaymentEnumLocalInstrumentINIC captures enum value "INIC"
	OpenbankingBrasilPaymentEnumLocalInstrumentINIC OpenbankingBrasilPaymentEnumLocalInstrument = "INIC"
)

// for schema
var openbankingBrasilPaymentEnumLocalInstrumentEnum []interface{}

func init() {
	var res []OpenbankingBrasilPaymentEnumLocalInstrument
	if err := json.Unmarshal([]byte(`["MANU","DICT","QRDN","QRES","INIC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openbankingBrasilPaymentEnumLocalInstrumentEnum = append(openbankingBrasilPaymentEnumLocalInstrumentEnum, v)
	}
}

func (m OpenbankingBrasilPaymentEnumLocalInstrument) validateOpenbankingBrasilPaymentEnumLocalInstrumentEnum(path, location string, value OpenbankingBrasilPaymentEnumLocalInstrument) error {
	if err := validate.EnumCase(path, location, value, openbankingBrasilPaymentEnumLocalInstrumentEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openbanking brasil payment enum local instrument
func (m OpenbankingBrasilPaymentEnumLocalInstrument) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenbankingBrasilPaymentEnumLocalInstrumentEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openbanking brasil payment enum local instrument based on context it is used
func (m OpenbankingBrasilPaymentEnumLocalInstrument) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
