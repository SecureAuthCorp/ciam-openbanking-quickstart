// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilPaymentPatchPaymentsConsentData PatchPaymentsConsentData
//
// Objeto contendo dados do pagamento e do recebedor (creditor).
//
// swagger:model OpenbankingBrasilPaymentPatchPaymentsConsentData
type OpenbankingBrasilPaymentPatchPaymentsConsentData struct {

	// revocation
	// Required: true
	Revocation *OpenbankingBrasilPaymentRevocation `json:"revocation"`

	// Estado para o qual deve ir.
	//
	// [Restrio] O nico valor vlido  REVOKED. (caso contrrio a detentora deve retornar erro HTTP 400)
	// Example: REVOKED
	// Required: true
	Status string `json:"status"`
}

// Validate validates this openbanking brasil payment patch payments consent data
func (m *OpenbankingBrasilPaymentPatchPaymentsConsentData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRevocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingBrasilPaymentPatchPaymentsConsentData) validateRevocation(formats strfmt.Registry) error {

	if err := validate.Required("revocation", "body", m.Revocation); err != nil {
		return err
	}

	if m.Revocation != nil {
		if err := m.Revocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revocation")
			}
			return err
		}
	}

	return nil
}

func (m *OpenbankingBrasilPaymentPatchPaymentsConsentData) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this openbanking brasil payment patch payments consent data based on the context it is used
func (m *OpenbankingBrasilPaymentPatchPaymentsConsentData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRevocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingBrasilPaymentPatchPaymentsConsentData) contextValidateRevocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Revocation != nil {
		if err := m.Revocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revocation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenbankingBrasilPaymentPatchPaymentsConsentData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenbankingBrasilPaymentPatchPaymentsConsentData) UnmarshalBinary(b []byte) error {
	var res OpenbankingBrasilPaymentPatchPaymentsConsentData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
