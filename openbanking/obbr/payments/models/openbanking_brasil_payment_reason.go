// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilPaymentReason Reason
//
// Define a razo pela qual o consentimento foi revogado.
//
// swagger:model OpenbankingBrasilPaymentReason
type OpenbankingBrasilPaymentReason struct {

	// Contm informaes adicionais definidas pelo requisitante da revogao.
	//
	// [Restrio] Dever ser obrigatoriamente preenchido quando a revogao for feita pela iniciadora ou pela detentora unilateralmente, ou seja, quando o campo revokedBy for igual a TPP ou ASPSP e o motivo de revogao for OTHER.
	// Example: No quero mais o servio
	// Max Length: 140
	// Pattern: [\w\W\s]*
	AdditionalInformation *string `json:"additionalInformation,omitempty"`

	// code
	// Required: true
	Code *OpenbankingBrasilPaymentEnumRevocationReason `json:"code"`
}

// Validate validates this openbanking brasil payment reason
func (m *OpenbankingBrasilPaymentReason) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingBrasilPaymentReason) validateAdditionalInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalInformation) { // not required
		return nil
	}

	if err := validate.MaxLength("additionalInformation", "body", *m.AdditionalInformation, 140); err != nil {
		return err
	}

	if err := validate.Pattern("additionalInformation", "body", *m.AdditionalInformation, `[\w\W\s]*`); err != nil {
		return err
	}

	return nil
}

func (m *OpenbankingBrasilPaymentReason) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	if m.Code != nil {
		if err := m.Code.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("code")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this openbanking brasil payment reason based on the context it is used
func (m *OpenbankingBrasilPaymentReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingBrasilPaymentReason) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if m.Code != nil {
		if err := m.Code.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("code")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenbankingBrasilPaymentReason) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenbankingBrasilPaymentReason) UnmarshalBinary(b []byte) error {
	var res OpenbankingBrasilPaymentReason
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
