// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilError2 Error2
//
// swagger:model OpenbankingBrasilError2
type OpenbankingBrasilError2 struct {

	// code
	// Required: true
	Code *OpenbankingBrasilCode1 `json:"code"`

	// Descrio especfica do erro de acordo com o cdigo reportado:
	//  SALDO_INSUFICIENTE: A conta selecionada no possui saldo suficiente para realizar o pagamento.
	//  BENEFICIARIO_INCOMPATIVEL: O beneficirio informado no consentimento no  o mesmo do esperado pelo DICT.
	//  VALOR_INCOMPATIVEL: O valor informado no consentimento no  o mesmo valor do informado no payload de pagamento.
	//  VALOR_ACIMA_LIMITE: O valor (ou quantidade de transaes) ultrapassa a faixa de limite parametrizada na detentora para permitir a realizao de transaes pelo cliente.
	//  VALOR_INVALIDO: O valor enviado no  vlido para o QR Code informado.
	//  COBRANCA_INVALIDA: Validao de expirao, validao de vencimento ou Status Vlido.
	//  CONSENTIMENTO_INVALIDO: Consentimento invlido (status diferente de "AUTHORISED" ou est expirado).
	//  JANELA_OPER_INVALIDA: Requisio est fora da janela de funcionamento.
	//  NAO_INFORMADO: No reportado/identificado pela instituio detentora de conta.
	// Example: A conta selecionada no possui saldo suficiente para realizar o pagamento.
	// Required: true
	// Max Length: 2048
	// Pattern: \w*\W*
	Detail string `json:"detail"`

	// Ttulo especfico do erro reportado, de acordo com o cdigo enviado:
	//  SALDO_INSUFICIENTE: Saldo insuficiente.
	//  BENEFICIARIO_INCOMPATIVEL: Beneficirio incompatvel.
	//  VALOR_INCOMPATIVEL: Valor da transao incompatvel.
	//  VALOR_ACIMA_LIMITE: Acima do limite estabelecido.
	//  VALOR_INVALIDO: Valor invlido.
	//  COBRANCA_INVALIDA: Cobrana invlida.
	//  CONSENTIMENTO_INVALIDO: Consentimento invlido.
	//  JANELA_OPER_INVALIDA: Janela de operao invlida.
	//  NAO_INFORMADO: No informado.
	// Example: Saldo insuficiente.
	// Required: true
	// Max Length: 255
	// Pattern: \w*\W*
	Title string `json:"title"`
}

// Validate validates this openbanking brasil error2
func (m *OpenbankingBrasilError2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingBrasilError2) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	if m.Code != nil {
		if err := m.Code.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("code")
			}
			return err
		}
	}

	return nil
}

func (m *OpenbankingBrasilError2) validateDetail(formats strfmt.Registry) error {

	if err := validate.RequiredString("detail", "body", m.Detail); err != nil {
		return err
	}

	if err := validate.MaxLength("detail", "body", m.Detail, 2048); err != nil {
		return err
	}

	if err := validate.Pattern("detail", "body", m.Detail, `\w*\W*`); err != nil {
		return err
	}

	return nil
}

func (m *OpenbankingBrasilError2) validateTitle(formats strfmt.Registry) error {

	if err := validate.RequiredString("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", m.Title, 255); err != nil {
		return err
	}

	if err := validate.Pattern("title", "body", m.Title, `\w*\W*`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this openbanking brasil error2 based on the context it is used
func (m *OpenbankingBrasilError2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingBrasilError2) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if m.Code != nil {
		if err := m.Code.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("code")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenbankingBrasilError2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenbankingBrasilError2) UnmarshalBinary(b []byte) error {
	var res OpenbankingBrasilError2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
