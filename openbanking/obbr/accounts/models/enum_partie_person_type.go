// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EnumPartiePersonType EnumPartiePersonType
//
// Identificação do Tipo de Pessoa da pessoa envolvida na transação.
// Pessoa Natural - Informar CPF no campo “payerCnpjCpf”
// Pessoa Jurídica - Informar CNPJ no campo “payerCnpjCpf”
//
// swagger:model EnumPartiePersonType
type EnumPartiePersonType string

const (

	// EnumPartiePersonTypePESSOANATURAL captures enum value "PESSOA_NATURAL"
	EnumPartiePersonTypePESSOANATURAL EnumPartiePersonType = "PESSOA_NATURAL"

	// EnumPartiePersonTypePESSOAJURIDICA captures enum value "PESSOA_JURIDICA"
	EnumPartiePersonTypePESSOAJURIDICA EnumPartiePersonType = "PESSOA_JURIDICA"
)

// for schema
var enumPartiePersonTypeEnum []interface{}

func init() {
	var res []EnumPartiePersonType
	if err := json.Unmarshal([]byte(`["PESSOA_NATURAL","PESSOA_JURIDICA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		enumPartiePersonTypeEnum = append(enumPartiePersonTypeEnum, v)
	}
}

func (m EnumPartiePersonType) validateEnumPartiePersonTypeEnum(path, location string, value EnumPartiePersonType) error {
	if err := validate.EnumCase(path, location, value, enumPartiePersonTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this enum partie person type
func (m EnumPartiePersonType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEnumPartiePersonTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this enum partie person type based on context it is used
func (m EnumPartiePersonType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
