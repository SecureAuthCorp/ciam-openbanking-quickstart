// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenStatus1 open-status1
// Example: ALL
//
// swagger:model open-status1
type OpenStatus1 string

func NewOpenStatus1(value OpenStatus1) *OpenStatus1 {
	v := value
	return &v
}

const (

	// OpenStatus1ALL captures enum value "ALL"
	OpenStatus1ALL OpenStatus1 = "ALL"

	// OpenStatus1CLOSED captures enum value "CLOSED"
	OpenStatus1CLOSED OpenStatus1 = "CLOSED"

	// OpenStatus1OPEN captures enum value "OPEN"
	OpenStatus1OPEN OpenStatus1 = "OPEN"
)

// for schema
var openStatus1Enum []interface{}

func init() {
	var res []OpenStatus1
	if err := json.Unmarshal([]byte(`["ALL","CLOSED","OPEN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openStatus1Enum = append(openStatus1Enum, v)
	}
}

func (m OpenStatus1) validateOpenStatus1Enum(path, location string, value OpenStatus1) error {
	if err := validate.EnumCase(path, location, value, openStatus1Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this open status1
func (m OpenStatus1) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenStatus1Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this open status1 based on context it is used
func (m OpenStatus1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
