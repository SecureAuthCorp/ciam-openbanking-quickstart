// Code generated by go-swagger; DO NOT EDIT.

package banking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTransactionsParams creates a new GetTransactionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTransactionsParams() *GetTransactionsParams {
	return &GetTransactionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTransactionsParamsWithTimeout creates a new GetTransactionsParams object
// with the ability to set a timeout on a request.
func NewGetTransactionsParamsWithTimeout(timeout time.Duration) *GetTransactionsParams {
	return &GetTransactionsParams{
		timeout: timeout,
	}
}

// NewGetTransactionsParamsWithContext creates a new GetTransactionsParams object
// with the ability to set a context for a request.
func NewGetTransactionsParamsWithContext(ctx context.Context) *GetTransactionsParams {
	return &GetTransactionsParams{
		Context: ctx,
	}
}

// NewGetTransactionsParamsWithHTTPClient creates a new GetTransactionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTransactionsParamsWithHTTPClient(client *http.Client) *GetTransactionsParams {
	return &GetTransactionsParams{
		HTTPClient: client,
	}
}

/* GetTransactionsParams contains all the parameters to send to the API endpoint
   for the get transactions operation.

   Typically these are written to a http.Request.
*/
type GetTransactionsParams struct {

	/* AccountID.

	   ID of the account to get transactions for.  Must have previously been returned by one of the account list end points.
	*/
	AccountID string

	/* MaxAmount.

	   Filter transactions to only transactions with amounts less than or equal to than this amount
	*/
	MaxAmount *string

	/* MinAmount.

	   Filter transactions to only transactions with amounts higher or equal to than this amount
	*/
	MinAmount *string

	/* NewestTime.

	   Constrain the transaction history request to transactions with effective time at or before this date/time.  If absent defaults to today.  Format is aligned to DateTimeString common type
	*/
	NewestTime *string

	/* OldestTime.

	   Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to newest-time minus 90 days.  Format is aligned to DateTimeString common type
	*/
	OldestTime *string

	/* Page.

	   Page of results to request (standard pagination)

	   Format: int32
	   Default: 1
	*/
	Page *int32

	/* PageSize.

	   Page size to request. Default is 25 (standard pagination)

	   Format: int32
	   Default: 25
	*/
	PageSize *int32

	/* Text.

	   Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string. This parameter is optionally implemented by data holders. If it is not implemented then a response should be provided as normal without text filtering applied and an additional boolean field named isQueryParamUnsupported should be included in the meta object and set to true (whether the text parameter is supplied or not)
	*/
	Text *string

	/* XCdsClientHeaders.

	   The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.
	*/
	XCdsClientHeaders *string

	/* XFapiAuthDate.

	   The time when the customer last logged in to the Data Recipient Software Product. Required for all resource calls (customer present and unattended) if the customer has logged in. Not to be included for unauthenticated calls.
	*/
	XFapiAuthDate *string

	/* XFapiCustomerIPAddress.

	   The customer's original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
	*/
	XFapiCustomerIPAddress *string

	/* XFapiInteractionID.

	   An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
	*/
	XFapiInteractionID *string

	/* XMinv.

	   Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.
	*/
	XMinv *string

	/* Xv.

	   Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)
	*/
	Xv string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get transactions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTransactionsParams) WithDefaults() *GetTransactionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get transactions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTransactionsParams) SetDefaults() {
	var (
		pageDefault = int32(1)

		pageSizeDefault = int32(25)
	)

	val := GetTransactionsParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get transactions params
func (o *GetTransactionsParams) WithTimeout(timeout time.Duration) *GetTransactionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get transactions params
func (o *GetTransactionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get transactions params
func (o *GetTransactionsParams) WithContext(ctx context.Context) *GetTransactionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get transactions params
func (o *GetTransactionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get transactions params
func (o *GetTransactionsParams) WithHTTPClient(client *http.Client) *GetTransactionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get transactions params
func (o *GetTransactionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get transactions params
func (o *GetTransactionsParams) WithAccountID(accountID string) *GetTransactionsParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get transactions params
func (o *GetTransactionsParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithMaxAmount adds the maxAmount to the get transactions params
func (o *GetTransactionsParams) WithMaxAmount(maxAmount *string) *GetTransactionsParams {
	o.SetMaxAmount(maxAmount)
	return o
}

// SetMaxAmount adds the maxAmount to the get transactions params
func (o *GetTransactionsParams) SetMaxAmount(maxAmount *string) {
	o.MaxAmount = maxAmount
}

// WithMinAmount adds the minAmount to the get transactions params
func (o *GetTransactionsParams) WithMinAmount(minAmount *string) *GetTransactionsParams {
	o.SetMinAmount(minAmount)
	return o
}

// SetMinAmount adds the minAmount to the get transactions params
func (o *GetTransactionsParams) SetMinAmount(minAmount *string) {
	o.MinAmount = minAmount
}

// WithNewestTime adds the newestTime to the get transactions params
func (o *GetTransactionsParams) WithNewestTime(newestTime *string) *GetTransactionsParams {
	o.SetNewestTime(newestTime)
	return o
}

// SetNewestTime adds the newestTime to the get transactions params
func (o *GetTransactionsParams) SetNewestTime(newestTime *string) {
	o.NewestTime = newestTime
}

// WithOldestTime adds the oldestTime to the get transactions params
func (o *GetTransactionsParams) WithOldestTime(oldestTime *string) *GetTransactionsParams {
	o.SetOldestTime(oldestTime)
	return o
}

// SetOldestTime adds the oldestTime to the get transactions params
func (o *GetTransactionsParams) SetOldestTime(oldestTime *string) {
	o.OldestTime = oldestTime
}

// WithPage adds the page to the get transactions params
func (o *GetTransactionsParams) WithPage(page *int32) *GetTransactionsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get transactions params
func (o *GetTransactionsParams) SetPage(page *int32) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get transactions params
func (o *GetTransactionsParams) WithPageSize(pageSize *int32) *GetTransactionsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get transactions params
func (o *GetTransactionsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithText adds the text to the get transactions params
func (o *GetTransactionsParams) WithText(text *string) *GetTransactionsParams {
	o.SetText(text)
	return o
}

// SetText adds the text to the get transactions params
func (o *GetTransactionsParams) SetText(text *string) {
	o.Text = text
}

// WithXCdsClientHeaders adds the xCdsClientHeaders to the get transactions params
func (o *GetTransactionsParams) WithXCdsClientHeaders(xCdsClientHeaders *string) *GetTransactionsParams {
	o.SetXCdsClientHeaders(xCdsClientHeaders)
	return o
}

// SetXCdsClientHeaders adds the xCdsClientHeaders to the get transactions params
func (o *GetTransactionsParams) SetXCdsClientHeaders(xCdsClientHeaders *string) {
	o.XCdsClientHeaders = xCdsClientHeaders
}

// WithXFapiAuthDate adds the xFapiAuthDate to the get transactions params
func (o *GetTransactionsParams) WithXFapiAuthDate(xFapiAuthDate *string) *GetTransactionsParams {
	o.SetXFapiAuthDate(xFapiAuthDate)
	return o
}

// SetXFapiAuthDate adds the xFapiAuthDate to the get transactions params
func (o *GetTransactionsParams) SetXFapiAuthDate(xFapiAuthDate *string) {
	o.XFapiAuthDate = xFapiAuthDate
}

// WithXFapiCustomerIPAddress adds the xFapiCustomerIPAddress to the get transactions params
func (o *GetTransactionsParams) WithXFapiCustomerIPAddress(xFapiCustomerIPAddress *string) *GetTransactionsParams {
	o.SetXFapiCustomerIPAddress(xFapiCustomerIPAddress)
	return o
}

// SetXFapiCustomerIPAddress adds the xFapiCustomerIpAddress to the get transactions params
func (o *GetTransactionsParams) SetXFapiCustomerIPAddress(xFapiCustomerIPAddress *string) {
	o.XFapiCustomerIPAddress = xFapiCustomerIPAddress
}

// WithXFapiInteractionID adds the xFapiInteractionID to the get transactions params
func (o *GetTransactionsParams) WithXFapiInteractionID(xFapiInteractionID *string) *GetTransactionsParams {
	o.SetXFapiInteractionID(xFapiInteractionID)
	return o
}

// SetXFapiInteractionID adds the xFapiInteractionId to the get transactions params
func (o *GetTransactionsParams) SetXFapiInteractionID(xFapiInteractionID *string) {
	o.XFapiInteractionID = xFapiInteractionID
}

// WithXMinv adds the xMinv to the get transactions params
func (o *GetTransactionsParams) WithXMinv(xMinv *string) *GetTransactionsParams {
	o.SetXMinv(xMinv)
	return o
}

// SetXMinv adds the xMinV to the get transactions params
func (o *GetTransactionsParams) SetXMinv(xMinv *string) {
	o.XMinv = xMinv
}

// WithXv adds the xv to the get transactions params
func (o *GetTransactionsParams) WithXv(xv string) *GetTransactionsParams {
	o.SetXv(xv)
	return o
}

// SetXv adds the xV to the get transactions params
func (o *GetTransactionsParams) SetXv(xv string) {
	o.Xv = xv
}

// WriteToRequest writes these params to a swagger request
func (o *GetTransactionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", o.AccountID); err != nil {
		return err
	}

	if o.MaxAmount != nil {

		// query param max-amount
		var qrMaxAmount string

		if o.MaxAmount != nil {
			qrMaxAmount = *o.MaxAmount
		}
		qMaxAmount := qrMaxAmount
		if qMaxAmount != "" {

			if err := r.SetQueryParam("max-amount", qMaxAmount); err != nil {
				return err
			}
		}
	}

	if o.MinAmount != nil {

		// query param min-amount
		var qrMinAmount string

		if o.MinAmount != nil {
			qrMinAmount = *o.MinAmount
		}
		qMinAmount := qrMinAmount
		if qMinAmount != "" {

			if err := r.SetQueryParam("min-amount", qMinAmount); err != nil {
				return err
			}
		}
	}

	if o.NewestTime != nil {

		// query param newest-time
		var qrNewestTime string

		if o.NewestTime != nil {
			qrNewestTime = *o.NewestTime
		}
		qNewestTime := qrNewestTime
		if qNewestTime != "" {

			if err := r.SetQueryParam("newest-time", qNewestTime); err != nil {
				return err
			}
		}
	}

	if o.OldestTime != nil {

		// query param oldest-time
		var qrOldestTime string

		if o.OldestTime != nil {
			qrOldestTime = *o.OldestTime
		}
		qOldestTime := qrOldestTime
		if qOldestTime != "" {

			if err := r.SetQueryParam("oldest-time", qOldestTime); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page-size
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page-size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.Text != nil {

		// query param text
		var qrText string

		if o.Text != nil {
			qrText = *o.Text
		}
		qText := qrText
		if qText != "" {

			if err := r.SetQueryParam("text", qText); err != nil {
				return err
			}
		}
	}

	if o.XCdsClientHeaders != nil {

		// header param x-cds-client-headers
		if err := r.SetHeaderParam("x-cds-client-headers", *o.XCdsClientHeaders); err != nil {
			return err
		}
	}

	if o.XFapiAuthDate != nil {

		// header param x-fapi-auth-date
		if err := r.SetHeaderParam("x-fapi-auth-date", *o.XFapiAuthDate); err != nil {
			return err
		}
	}

	if o.XFapiCustomerIPAddress != nil {

		// header param x-fapi-customer-ip-address
		if err := r.SetHeaderParam("x-fapi-customer-ip-address", *o.XFapiCustomerIPAddress); err != nil {
			return err
		}
	}

	if o.XFapiInteractionID != nil {

		// header param x-fapi-interaction-id
		if err := r.SetHeaderParam("x-fapi-interaction-id", *o.XFapiInteractionID); err != nil {
			return err
		}
	}

	if o.XMinv != nil {

		// header param x-min-v
		if err := r.SetHeaderParam("x-min-v", *o.XMinv); err != nil {
			return err
		}
	}

	// header param x-v
	if err := r.SetHeaderParam("x-v", o.Xv); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
