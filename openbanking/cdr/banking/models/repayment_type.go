// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RepaymentType RepaymentType
//
// Options in place for repayments. If absent, the lending rate is applicable to all repayment types
// Example: INTEREST_ONLY
//
// swagger:model RepaymentType
type RepaymentType string

const (

	// RepaymentTypeINTERESTONLY captures enum value "INTEREST_ONLY"
	RepaymentTypeINTERESTONLY RepaymentType = "INTEREST_ONLY"

	// RepaymentTypePRINCIPALANDINTEREST captures enum value "PRINCIPAL_AND_INTEREST"
	RepaymentTypePRINCIPALANDINTEREST RepaymentType = "PRINCIPAL_AND_INTEREST"
)

// for schema
var repaymentTypeEnum []interface{}

func init() {
	var res []RepaymentType
	if err := json.Unmarshal([]byte(`["INTEREST_ONLY","PRINCIPAL_AND_INTEREST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repaymentTypeEnum = append(repaymentTypeEnum, v)
	}
}

func (m RepaymentType) validateRepaymentTypeEnum(path, location string, value RepaymentType) error {
	if err := validate.EnumCase(path, location, value, repaymentTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this repayment type
func (m RepaymentType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRepaymentTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this repayment type based on context it is used
func (m RepaymentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
