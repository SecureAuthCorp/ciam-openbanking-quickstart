// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankingScheduledPaymentRecurrenceEventBased BankingScheduledPaymentRecurrenceEventBased
//
// Indicates that the schedule of payments is defined according to an external event that cannot be predetermined. Mandatory if recurrenceUType is set to eventBased
//
// swagger:model BankingScheduledPaymentRecurrenceEventBased
type BankingScheduledPaymentRecurrenceEventBased struct {

	// Description of the event and conditions that will result in the payment. Expected to be formatted for display to a customer
	// Required: true
	Description *string `json:"description"`
}

// Validate validates this banking scheduled payment recurrence event based
func (m *BankingScheduledPaymentRecurrenceEventBased) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingScheduledPaymentRecurrenceEventBased) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this banking scheduled payment recurrence event based based on context it is used
func (m *BankingScheduledPaymentRecurrenceEventBased) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BankingScheduledPaymentRecurrenceEventBased) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankingScheduledPaymentRecurrenceEventBased) UnmarshalBinary(b []byte) error {
	var res BankingScheduledPaymentRecurrenceEventBased
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
