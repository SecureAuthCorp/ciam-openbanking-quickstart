// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankingAccount BankingAccount
//
// swagger:model BankingAccount
type BankingAccount struct {

	// A unique ID of the account adhering to the standards for ID permanence
	// Required: true
	AccountID *string `json:"accountId"`

	// Date that the account was created (if known)
	CreationDate string `json:"creationDate,omitempty"`

	// The display name of the account as defined by the bank. This should not incorporate account numbers or PANs. If it does the values should be masked according to the rules of the MaskedAccountString common type.
	// Required: true
	DisplayName *string `json:"displayName"`

	// Flag indicating that the customer associated with the authorisation is an owner of the account. Does not indicate sole ownership, however. If not present then 'true' is assumed
	// Example: true
	IsOwned *bool `json:"isOwned,omitempty"`

	// A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number
	// Required: true
	MaskedNumber *string `json:"maskedNumber"`

	// A customer supplied nick name for the account
	Nickname string `json:"nickname,omitempty"`

	// open status
	OpenStatus OpenStatus `json:"openStatus,omitempty"`

	// product category
	// Required: true
	ProductCategory *BankingProductCategory `json:"productCategory"`

	// The unique identifier of the account as defined by the data holder (akin to model number for the account)
	// Required: true
	ProductName *string `json:"productName"`
}

// Validate validates this banking account
func (m *BankingAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaskedNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingAccount) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountId", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *BankingAccount) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *BankingAccount) validateMaskedNumber(formats strfmt.Registry) error {

	if err := validate.Required("maskedNumber", "body", m.MaskedNumber); err != nil {
		return err
	}

	return nil
}

func (m *BankingAccount) validateOpenStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.OpenStatus) { // not required
		return nil
	}

	if err := m.OpenStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("openStatus")
		}
		return err
	}

	return nil
}

func (m *BankingAccount) validateProductCategory(formats strfmt.Registry) error {

	if err := validate.Required("productCategory", "body", m.ProductCategory); err != nil {
		return err
	}

	if err := validate.Required("productCategory", "body", m.ProductCategory); err != nil {
		return err
	}

	if m.ProductCategory != nil {
		if err := m.ProductCategory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("productCategory")
			}
			return err
		}
	}

	return nil
}

func (m *BankingAccount) validateProductName(formats strfmt.Registry) error {

	if err := validate.Required("productName", "body", m.ProductName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this banking account based on the context it is used
func (m *BankingAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOpenStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProductCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingAccount) contextValidateOpenStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OpenStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("openStatus")
		}
		return err
	}

	return nil
}

func (m *BankingAccount) contextValidateProductCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.ProductCategory != nil {
		if err := m.ProductCategory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("productCategory")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankingAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankingAccount) UnmarshalBinary(b []byte) error {
	var res BankingAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
