// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtendedData ExtendedData
//
// swagger:model ExtendedData
type ExtendedData struct {

	// extension u type
	ExtensionUType ExtensionUType `json:"extensionUType,omitempty"`

	// Label of the target PayID.  Mandatory for an outbound payment. The name assigned to the BSB/Account Number or PayID (by the owner of the PayID)
	Payee string `json:"payee,omitempty"`

	// Label of the originating payer. Mandatory for inbound payment
	Payer string `json:"payer,omitempty"`

	// Identifier of the applicable overlay service. Valid values are: X2P1.01
	// Example: X2P1.01
	// Required: true
	Service *string `json:"service"`

	// x2p101 payload
	X2p101Payload *X2p101Payload `json:"x2p101Payload,omitempty"`
}

// Validate validates this extended data
func (m *ExtendedData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtensionUType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateX2p101Payload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtendedData) validateExtensionUType(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtensionUType) { // not required
		return nil
	}

	if err := m.ExtensionUType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("extensionUType")
		}
		return err
	}

	return nil
}

func (m *ExtendedData) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

func (m *ExtendedData) validateX2p101Payload(formats strfmt.Registry) error {
	if swag.IsZero(m.X2p101Payload) { // not required
		return nil
	}

	if m.X2p101Payload != nil {
		if err := m.X2p101Payload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x2p101Payload")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this extended data based on the context it is used
func (m *ExtendedData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExtensionUType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateX2p101Payload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtendedData) contextValidateExtensionUType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ExtensionUType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("extensionUType")
		}
		return err
	}

	return nil
}

func (m *ExtendedData) contextValidateX2p101Payload(ctx context.Context, formats strfmt.Registry) error {

	if m.X2p101Payload != nil {
		if err := m.X2p101Payload.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x2p101Payload")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExtendedData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtendedData) UnmarshalBinary(b []byte) error {
	var res ExtendedData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
