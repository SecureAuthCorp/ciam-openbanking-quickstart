// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PayeeUType PayeeUType
//
// Type of object included that describes the payee in detail
// Example: biller
//
// swagger:model PayeeUType
type PayeeUType string

const (

	// PayeeUTypeBiller captures enum value "biller"
	PayeeUTypeBiller PayeeUType = "biller"

	// PayeeUTypeDigitalWallet captures enum value "digitalWallet"
	PayeeUTypeDigitalWallet PayeeUType = "digitalWallet"

	// PayeeUTypeDomestic captures enum value "domestic"
	PayeeUTypeDomestic PayeeUType = "domestic"

	// PayeeUTypeInternational captures enum value "international"
	PayeeUTypeInternational PayeeUType = "international"
)

// for schema
var payeeUTypeEnum []interface{}

func init() {
	var res []PayeeUType
	if err := json.Unmarshal([]byte(`["biller","digitalWallet","domestic","international"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		payeeUTypeEnum = append(payeeUTypeEnum, v)
	}
}

func (m PayeeUType) validatePayeeUTypeEnum(path, location string, value PayeeUType) error {
	if err := validate.EnumCase(path, location, value, payeeUTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payee u type
func (m PayeeUType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePayeeUTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this payee u type based on context it is used
func (m PayeeUType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
