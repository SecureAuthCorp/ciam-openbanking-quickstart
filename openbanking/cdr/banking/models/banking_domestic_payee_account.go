// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankingDomesticPayeeAccount BankingDomesticPayeeAccount
//
// swagger:model BankingDomesticPayeeAccount
type BankingDomesticPayeeAccount struct {

	// Name of the account to pay to
	AccountName string `json:"accountName,omitempty"`

	// Number of the account to pay to
	// Required: true
	AccountNumber *string `json:"accountNumber"`

	// BSB of the account to pay to
	// Required: true
	Bsb *string `json:"bsb"`
}

// Validate validates this banking domestic payee account
func (m *BankingDomesticPayeeAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBsb(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingDomesticPayeeAccount) validateAccountNumber(formats strfmt.Registry) error {

	if err := validate.Required("accountNumber", "body", m.AccountNumber); err != nil {
		return err
	}

	return nil
}

func (m *BankingDomesticPayeeAccount) validateBsb(formats strfmt.Registry) error {

	if err := validate.Required("bsb", "body", m.Bsb); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this banking domestic payee account based on context it is used
func (m *BankingDomesticPayeeAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BankingDomesticPayeeAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankingDomesticPayeeAccount) UnmarshalBinary(b []byte) error {
	var res BankingDomesticPayeeAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
