// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Type1 Type1
//
// The type of payee.<br/>DOMESTIC means a registered payee for domestic payments including NPP. <br/>INTERNATIONAL means a registered payee for international payments. <br/>BILLER means a registered payee for BPAY. <br/>DIGITAL_WALLET means a registered payee for a bank's digital wallet
// Example: BILLER
//
// swagger:model Type1
type Type1 string

const (

	// Type1BILLER captures enum value "BILLER"
	Type1BILLER Type1 = "BILLER"

	// Type1DIGITALWALLET captures enum value "DIGITAL_WALLET"
	Type1DIGITALWALLET Type1 = "DIGITAL_WALLET"

	// Type1DOMESTIC captures enum value "DOMESTIC"
	Type1DOMESTIC Type1 = "DOMESTIC"

	// Type1INTERNATIONAL captures enum value "INTERNATIONAL"
	Type1INTERNATIONAL Type1 = "INTERNATIONAL"
)

// for schema
var type1Enum []interface{}

func init() {
	var res []Type1
	if err := json.Unmarshal([]byte(`["BILLER","DIGITAL_WALLET","DOMESTIC","INTERNATIONAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		type1Enum = append(type1Enum, v)
	}
}

func (m Type1) validateType1Enum(path, location string, value Type1) error {
	if err := validate.EnumCase(path, location, value, type1Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this type1
func (m Type1) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateType1Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this type1 based on context it is used
func (m Type1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
