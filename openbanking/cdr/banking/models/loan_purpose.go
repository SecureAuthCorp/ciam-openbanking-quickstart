// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LoanPurpose LoanPurpose
//
// The reason for taking out the loan. If absent, the lending rate is applicable to all loan purposes
// Example: INVESTMENT
//
// swagger:model LoanPurpose
type LoanPurpose string

const (

	// LoanPurposeINVESTMENT captures enum value "INVESTMENT"
	LoanPurposeINVESTMENT LoanPurpose = "INVESTMENT"

	// LoanPurposeOWNEROCCUPIED captures enum value "OWNER_OCCUPIED"
	LoanPurposeOWNEROCCUPIED LoanPurpose = "OWNER_OCCUPIED"
)

// for schema
var loanPurposeEnum []interface{}

func init() {
	var res []LoanPurpose
	if err := json.Unmarshal([]byte(`["INVESTMENT","OWNER_OCCUPIED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loanPurposeEnum = append(loanPurposeEnum, v)
	}
}

func (m LoanPurpose) validateLoanPurposeEnum(path, location string, value LoanPurpose) error {
	if err := validate.EnumCase(path, location, value, loanPurposeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this loan purpose
func (m LoanPurpose) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLoanPurposeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this loan purpose based on context it is used
func (m LoanPurpose) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
