// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Status1 Status1
//
// Indicates whether the schedule is currently active. The value SKIP is equivalent to ACTIVE except that the customer has requested the next normal occurrence to be skipped.
// Example: ACTIVE
//
// swagger:model Status1
type Status1 string

const (

	// Status1ACTIVE captures enum value "ACTIVE"
	Status1ACTIVE Status1 = "ACTIVE"

	// Status1INACTIVE captures enum value "INACTIVE"
	Status1INACTIVE Status1 = "INACTIVE"

	// Status1SKIP captures enum value "SKIP"
	Status1SKIP Status1 = "SKIP"
)

// for schema
var status1Enum []interface{}

func init() {
	var res []Status1
	if err := json.Unmarshal([]byte(`["ACTIVE","INACTIVE","SKIP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		status1Enum = append(status1Enum, v)
	}
}

func (m Status1) validateStatus1Enum(path, location string, value Status1) error {
	if err := validate.EnumCase(path, location, value, status1Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this status1
func (m Status1) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStatus1Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this status1 based on context it is used
func (m Status1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
