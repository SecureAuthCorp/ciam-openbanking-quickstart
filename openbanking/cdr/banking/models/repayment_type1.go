// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RepaymentType1 RepaymentType1
//
// Options in place for repayments. If absent defaults to PRINCIPAL_AND_INTEREST
// Example: INTEREST_ONLY
//
// swagger:model RepaymentType1
type RepaymentType1 string

const (

	// RepaymentType1INTERESTONLY captures enum value "INTEREST_ONLY"
	RepaymentType1INTERESTONLY RepaymentType1 = "INTEREST_ONLY"

	// RepaymentType1PRINCIPALANDINTEREST captures enum value "PRINCIPAL_AND_INTEREST"
	RepaymentType1PRINCIPALANDINTEREST RepaymentType1 = "PRINCIPAL_AND_INTEREST"
)

// for schema
var repaymentType1Enum []interface{}

func init() {
	var res []RepaymentType1
	if err := json.Unmarshal([]byte(`["INTEREST_ONLY","PRINCIPAL_AND_INTEREST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repaymentType1Enum = append(repaymentType1Enum, v)
	}
}

func (m RepaymentType1) validateRepaymentType1Enum(path, location string, value RepaymentType1) error {
	if err := validate.EnumCase(path, location, value, repaymentType1Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this repayment type1
func (m RepaymentType1) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRepaymentType1Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this repayment type1 based on context it is used
func (m RepaymentType1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
