// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankingProductRateTierV3 BankingProductRateTierV3
//
// Defines the criteria and conditions for which a rate applies
//
// swagger:model BankingProductRateTierV3
type BankingProductRateTierV3 struct {

	// Display text providing more information on the rate tier.
	AdditionalInfo string `json:"additionalInfo,omitempty"`

	// Link to a web page with more information on this rate tier
	AdditionalInfoURI string `json:"additionalInfoUri,omitempty"`

	// applicability conditions
	ApplicabilityConditions *BankingProductRateCondition `json:"applicabilityConditions,omitempty"`

	// The number of tierUnitOfMeasure units that form the upper bound of the tier or band. For a tier with a discrete value (as opposed to a range of values e.g. 1 month) this must be the same as tierValueMinimum. Where this is the same as the tierValueMinimum value of the next-higher tier the referenced tier should be exclusive of this value. For example a term deposit of 2 months falls into the upper tier of the following tiers: (1 – 2 months, 2 – 3 months). If absent the tier's range has no upper bound.
	MaximumValue float64 `json:"maximumValue,omitempty"`

	// The number of tierUnitOfMeasure units that form the lower bound of the tier. The tier should be inclusive of this value
	// Required: true
	MinimumValue *float64 `json:"minimumValue"`

	// A display name for the tier
	// Required: true
	Name *string `json:"name"`

	// rate application method
	RateApplicationMethod RateApplicationMethod `json:"rateApplicationMethod,omitempty"`

	// unit of measure
	// Required: true
	UnitOfMeasure *UnitOfMeasure `json:"unitOfMeasure"`
}

// Validate validates this banking product rate tier v3
func (m *BankingProductRateTierV3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicabilityConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinimumValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateApplicationMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitOfMeasure(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingProductRateTierV3) validateApplicabilityConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicabilityConditions) { // not required
		return nil
	}

	if m.ApplicabilityConditions != nil {
		if err := m.ApplicabilityConditions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicabilityConditions")
			}
			return err
		}
	}

	return nil
}

func (m *BankingProductRateTierV3) validateMinimumValue(formats strfmt.Registry) error {

	if err := validate.Required("minimumValue", "body", m.MinimumValue); err != nil {
		return err
	}

	return nil
}

func (m *BankingProductRateTierV3) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BankingProductRateTierV3) validateRateApplicationMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.RateApplicationMethod) { // not required
		return nil
	}

	if err := m.RateApplicationMethod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rateApplicationMethod")
		}
		return err
	}

	return nil
}

func (m *BankingProductRateTierV3) validateUnitOfMeasure(formats strfmt.Registry) error {

	if err := validate.Required("unitOfMeasure", "body", m.UnitOfMeasure); err != nil {
		return err
	}

	if err := validate.Required("unitOfMeasure", "body", m.UnitOfMeasure); err != nil {
		return err
	}

	if m.UnitOfMeasure != nil {
		if err := m.UnitOfMeasure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unitOfMeasure")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this banking product rate tier v3 based on the context it is used
func (m *BankingProductRateTierV3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicabilityConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRateApplicationMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnitOfMeasure(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingProductRateTierV3) contextValidateApplicabilityConditions(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicabilityConditions != nil {
		if err := m.ApplicabilityConditions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicabilityConditions")
			}
			return err
		}
	}

	return nil
}

func (m *BankingProductRateTierV3) contextValidateRateApplicationMethod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RateApplicationMethod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rateApplicationMethod")
		}
		return err
	}

	return nil
}

func (m *BankingProductRateTierV3) contextValidateUnitOfMeasure(ctx context.Context, formats strfmt.Registry) error {

	if m.UnitOfMeasure != nil {
		if err := m.UnitOfMeasure.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unitOfMeasure")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankingProductRateTierV3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankingProductRateTierV3) UnmarshalBinary(b []byte) error {
	var res BankingProductRateTierV3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
