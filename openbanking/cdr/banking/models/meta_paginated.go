// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetaPaginated MetaPaginated
//
// swagger:model MetaPaginated
type MetaPaginated struct {

	// The total number of pages in the full set. See [pagination](#pagination).
	// Required: true
	TotalPages *int32 `json:"totalPages"`

	// The total number of records in the full set. See [pagination](#pagination).
	// Required: true
	TotalRecords *int32 `json:"totalRecords"`
}

// Validate validates this meta paginated
func (m *MetaPaginated) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTotalPages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetaPaginated) validateTotalPages(formats strfmt.Registry) error {

	if err := validate.Required("totalPages", "body", m.TotalPages); err != nil {
		return err
	}

	return nil
}

func (m *MetaPaginated) validateTotalRecords(formats strfmt.Registry) error {

	if err := validate.Required("totalRecords", "body", m.TotalRecords); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this meta paginated based on context it is used
func (m *MetaPaginated) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MetaPaginated) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetaPaginated) UnmarshalBinary(b []byte) error {
	var res MetaPaginated
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
