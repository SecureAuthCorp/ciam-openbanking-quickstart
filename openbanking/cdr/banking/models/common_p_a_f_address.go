// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonPAFAddress CommonPAFAddress
//
// Australian address formatted according to the file format defined by the [PAF file format](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf)
//
// swagger:model CommonPAFAddress
type CommonPAFAddress struct {

	// Building/Property name 1
	BuildingName1 string `json:"buildingName1,omitempty"`

	// Building/Property name 2
	BuildingName2 string `json:"buildingName2,omitempty"`

	// Unique identifier for an address as defined by Australia Post.  Also known as Delivery Point Identifier
	Dpid string `json:"dpid,omitempty"`

	// Unit number (including suffix, if applicable)
	FlatUnitNumber string `json:"flatUnitNumber,omitempty"`

	// Type of flat or unit for the address
	FlatUnitType string `json:"flatUnitType,omitempty"`

	// Floor or level number (including alpha characters)
	FloorLevelNumber string `json:"floorLevelNumber,omitempty"`

	// Type of floor or level for the address
	FloorLevelType string `json:"floorLevelType,omitempty"`

	// Full name of locality
	// Required: true
	LocalityName *string `json:"localityName"`

	// Allotment number for the address
	LotNumber string `json:"lotNumber,omitempty"`

	// Postal delivery number if the address is a postal delivery type
	PostalDeliveryNumber int32 `json:"postalDeliveryNumber,omitempty"`

	// Postal delivery number prefix related to the postal delivery number
	PostalDeliveryNumberPrefix string `json:"postalDeliveryNumberPrefix,omitempty"`

	// Postal delivery number suffix related to the postal delivery number
	PostalDeliveryNumberSuffix string `json:"postalDeliveryNumberSuffix,omitempty"`

	// Postal delivery type. (eg. PO BOX). Valid enumeration defined by Australia Post PAF code file
	PostalDeliveryType string `json:"postalDeliveryType,omitempty"`

	// Postcode for the locality
	// Required: true
	Postcode *string `json:"postcode"`

	// State in which the address belongs. Valid enumeration defined by Australia Post PAF code file [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT
	// Required: true
	State *string `json:"state"`

	// The name of the street
	StreetName string `json:"streetName,omitempty"`

	// The street type suffix. Valid enumeration defined by Australia Post PAF code file
	StreetSuffix string `json:"streetSuffix,omitempty"`

	// The street type. Valid enumeration defined by Australia Post PAF code file
	StreetType string `json:"streetType,omitempty"`

	// Thoroughfare number for a property (first number in a property ranged address)
	ThoroughfareNumber1 int32 `json:"thoroughfareNumber1,omitempty"`

	// Suffix for the thoroughfare number. Only relevant is thoroughfareNumber1 is populated
	ThoroughfareNumber1Suffix string `json:"thoroughfareNumber1Suffix,omitempty"`

	// Second thoroughfare number (only used if the property has a ranged address eg 23-25)
	ThoroughfareNumber2 int32 `json:"thoroughfareNumber2,omitempty"`

	// Suffix for the second thoroughfare number. Only relevant is thoroughfareNumber2 is populated
	ThoroughfareNumber2Suffix string `json:"thoroughfareNumber2Suffix,omitempty"`
}

// Validate validates this common p a f address
func (m *CommonPAFAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalityName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostcode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonPAFAddress) validateLocalityName(formats strfmt.Registry) error {

	if err := validate.Required("localityName", "body", m.LocalityName); err != nil {
		return err
	}

	return nil
}

func (m *CommonPAFAddress) validatePostcode(formats strfmt.Registry) error {

	if err := validate.Required("postcode", "body", m.Postcode); err != nil {
		return err
	}

	return nil
}

func (m *CommonPAFAddress) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this common p a f address based on context it is used
func (m *CommonPAFAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommonPAFAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonPAFAddress) UnmarshalBinary(b []byte) error {
	var res CommonPAFAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
