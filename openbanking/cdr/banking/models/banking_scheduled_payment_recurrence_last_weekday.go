// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankingScheduledPaymentRecurrenceLastWeekday BankingScheduledPaymentRecurrenceLastWeekday
//
// Indicates that the schedule of payments is defined according to the last occurrence of a specific weekday in an interval. Mandatory if recurrenceUType is set to lastWeekDay
//
// swagger:model BankingScheduledPaymentRecurrenceLastWeekday
type BankingScheduledPaymentRecurrenceLastWeekday struct {

	// The limit date after which no more payments should be made using this schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely
	FinalPaymentDate string `json:"finalPaymentDate,omitempty"`

	// The interval for the payment. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax) with components less than a day in length ignored. This duration defines the period between payments starting with nextPaymentDate
	// Required: true
	Interval *string `json:"interval"`

	// last week day
	// Required: true
	LastWeekDay *LastWeekDay `json:"lastWeekDay"`

	// non business day treatment
	NonBusinessDayTreatment NonBusinessDayTreatment `json:"nonBusinessDayTreatment,omitempty"`

	// Indicates the number of payments remaining in the schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely
	// Example: 1
	PaymentsRemaining int32 `json:"paymentsRemaining,omitempty"`
}

// Validate validates this banking scheduled payment recurrence last weekday
func (m *BankingScheduledPaymentRecurrenceLastWeekday) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastWeekDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonBusinessDayTreatment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingScheduledPaymentRecurrenceLastWeekday) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

func (m *BankingScheduledPaymentRecurrenceLastWeekday) validateLastWeekDay(formats strfmt.Registry) error {

	if err := validate.Required("lastWeekDay", "body", m.LastWeekDay); err != nil {
		return err
	}

	if err := validate.Required("lastWeekDay", "body", m.LastWeekDay); err != nil {
		return err
	}

	if m.LastWeekDay != nil {
		if err := m.LastWeekDay.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastWeekDay")
			}
			return err
		}
	}

	return nil
}

func (m *BankingScheduledPaymentRecurrenceLastWeekday) validateNonBusinessDayTreatment(formats strfmt.Registry) error {
	if swag.IsZero(m.NonBusinessDayTreatment) { // not required
		return nil
	}

	if err := m.NonBusinessDayTreatment.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("nonBusinessDayTreatment")
		}
		return err
	}

	return nil
}

// ContextValidate validate this banking scheduled payment recurrence last weekday based on the context it is used
func (m *BankingScheduledPaymentRecurrenceLastWeekday) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastWeekDay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNonBusinessDayTreatment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingScheduledPaymentRecurrenceLastWeekday) contextValidateLastWeekDay(ctx context.Context, formats strfmt.Registry) error {

	if m.LastWeekDay != nil {
		if err := m.LastWeekDay.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastWeekDay")
			}
			return err
		}
	}

	return nil
}

func (m *BankingScheduledPaymentRecurrenceLastWeekday) contextValidateNonBusinessDayTreatment(ctx context.Context, formats strfmt.Registry) error {

	if err := m.NonBusinessDayTreatment.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("nonBusinessDayTreatment")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankingScheduledPaymentRecurrenceLastWeekday) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankingScheduledPaymentRecurrenceLastWeekday) UnmarshalBinary(b []byte) error {
	var res BankingScheduledPaymentRecurrenceLastWeekday
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
