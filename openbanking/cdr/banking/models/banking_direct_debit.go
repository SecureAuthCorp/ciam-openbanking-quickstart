// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankingDirectDebit BankingDirectDebit
//
// swagger:model BankingDirectDebit
type BankingDirectDebit struct {

	// A unique ID of the account adhering to the standards for ID permanence.
	// Required: true
	AccountID *string `json:"accountId"`

	// authorised entity
	// Required: true
	AuthorisedEntity *BankingAuthorisedEntity `json:"authorisedEntity"`

	// The amount of the last debit executed under this authorisation
	LastDebitAmount string `json:"lastDebitAmount,omitempty"`

	// The date and time of the last debit executed under this authorisation
	LastDebitDateTime string `json:"lastDebitDateTime,omitempty"`
}

// Validate validates this banking direct debit
func (m *BankingDirectDebit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorisedEntity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingDirectDebit) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountId", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *BankingDirectDebit) validateAuthorisedEntity(formats strfmt.Registry) error {

	if err := validate.Required("authorisedEntity", "body", m.AuthorisedEntity); err != nil {
		return err
	}

	if m.AuthorisedEntity != nil {
		if err := m.AuthorisedEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorisedEntity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this banking direct debit based on the context it is used
func (m *BankingDirectDebit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthorisedEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingDirectDebit) contextValidateAuthorisedEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthorisedEntity != nil {
		if err := m.AuthorisedEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorisedEntity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankingDirectDebit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankingDirectDebit) UnmarshalBinary(b []byte) error {
	var res BankingDirectDebit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
