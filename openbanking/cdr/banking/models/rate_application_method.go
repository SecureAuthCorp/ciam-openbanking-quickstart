// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RateApplicationMethod RateApplicationMethod
//
// The method used to calculate the amount to be applied using one or more tiers. A single rate may be applied to the entire balance or each applicable tier rate is applied to the portion of the balance that falls into that tier (referred to as 'bands' or 'steps')
// Example: PER_TIER
//
// swagger:model RateApplicationMethod
type RateApplicationMethod string

const (

	// RateApplicationMethodPERTIER captures enum value "PER_TIER"
	RateApplicationMethodPERTIER RateApplicationMethod = "PER_TIER"

	// RateApplicationMethodWHOLEBALANCE captures enum value "WHOLE_BALANCE"
	RateApplicationMethodWHOLEBALANCE RateApplicationMethod = "WHOLE_BALANCE"
)

// for schema
var rateApplicationMethodEnum []interface{}

func init() {
	var res []RateApplicationMethod
	if err := json.Unmarshal([]byte(`["PER_TIER","WHOLE_BALANCE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rateApplicationMethodEnum = append(rateApplicationMethodEnum, v)
	}
}

func (m RateApplicationMethod) validateRateApplicationMethodEnum(path, location string, value RateApplicationMethod) error {
	if err := validate.EnumCase(path, location, value, rateApplicationMethodEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this rate application method
func (m RateApplicationMethod) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRateApplicationMethodEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this rate application method based on context it is used
func (m RateApplicationMethod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
