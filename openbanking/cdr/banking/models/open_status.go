// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenStatus OpenStatus
//
// Open or closed status for the account. If not present then OPEN is assumed
// Example: CLOSED
//
// swagger:model OpenStatus
type OpenStatus string

const (

	// OpenStatusCLOSED captures enum value "CLOSED"
	OpenStatusCLOSED OpenStatus = "CLOSED"

	// OpenStatusOPEN captures enum value "OPEN"
	OpenStatusOPEN OpenStatus = "OPEN"
)

// for schema
var openStatusEnum []interface{}

func init() {
	var res []OpenStatus
	if err := json.Unmarshal([]byte(`["CLOSED","OPEN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openStatusEnum = append(openStatusEnum, v)
	}
}

func (m OpenStatus) validateOpenStatusEnum(path, location string, value OpenStatus) error {
	if err := validate.EnumCase(path, location, value, openStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this open status
func (m OpenStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this open status based on context it is used
func (m OpenStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
