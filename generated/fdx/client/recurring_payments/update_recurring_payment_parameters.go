// Code generated by go-swagger; DO NOT EDIT.

package recurring_payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/openbanking-quickstart/generated/fdx/models"
)

// NewUpdateRecurringPaymentParams creates a new UpdateRecurringPaymentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateRecurringPaymentParams() *UpdateRecurringPaymentParams {
	return &UpdateRecurringPaymentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateRecurringPaymentParamsWithTimeout creates a new UpdateRecurringPaymentParams object
// with the ability to set a timeout on a request.
func NewUpdateRecurringPaymentParamsWithTimeout(timeout time.Duration) *UpdateRecurringPaymentParams {
	return &UpdateRecurringPaymentParams{
		timeout: timeout,
	}
}

// NewUpdateRecurringPaymentParamsWithContext creates a new UpdateRecurringPaymentParams object
// with the ability to set a context for a request.
func NewUpdateRecurringPaymentParamsWithContext(ctx context.Context) *UpdateRecurringPaymentParams {
	return &UpdateRecurringPaymentParams{
		Context: ctx,
	}
}

// NewUpdateRecurringPaymentParamsWithHTTPClient creates a new UpdateRecurringPaymentParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateRecurringPaymentParamsWithHTTPClient(client *http.Client) *UpdateRecurringPaymentParams {
	return &UpdateRecurringPaymentParams{
		HTTPClient: client,
	}
}

/* UpdateRecurringPaymentParams contains all the parameters to send to the API endpoint
   for the update recurring payment operation.

   Typically these are written to a http.Request.
*/
type UpdateRecurringPaymentParams struct {

	// ContentType.
	ContentType *string

	// Body.
	Body *models.RecurringPaymentforUpdateentity2

	/* IdempotencyKey.

	   Used to de-duplicate requests
	*/
	IdempotencyKey string

	/* RecurringPaymentID.

	   Recurring Payment Identifier. Uniquely identifies a recurring payment
	*/
	RecurringPaymentID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update recurring payment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateRecurringPaymentParams) WithDefaults() *UpdateRecurringPaymentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update recurring payment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateRecurringPaymentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update recurring payment params
func (o *UpdateRecurringPaymentParams) WithTimeout(timeout time.Duration) *UpdateRecurringPaymentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update recurring payment params
func (o *UpdateRecurringPaymentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update recurring payment params
func (o *UpdateRecurringPaymentParams) WithContext(ctx context.Context) *UpdateRecurringPaymentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update recurring payment params
func (o *UpdateRecurringPaymentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update recurring payment params
func (o *UpdateRecurringPaymentParams) WithHTTPClient(client *http.Client) *UpdateRecurringPaymentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update recurring payment params
func (o *UpdateRecurringPaymentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentType adds the contentType to the update recurring payment params
func (o *UpdateRecurringPaymentParams) WithContentType(contentType *string) *UpdateRecurringPaymentParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the update recurring payment params
func (o *UpdateRecurringPaymentParams) SetContentType(contentType *string) {
	o.ContentType = contentType
}

// WithBody adds the body to the update recurring payment params
func (o *UpdateRecurringPaymentParams) WithBody(body *models.RecurringPaymentforUpdateentity2) *UpdateRecurringPaymentParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update recurring payment params
func (o *UpdateRecurringPaymentParams) SetBody(body *models.RecurringPaymentforUpdateentity2) {
	o.Body = body
}

// WithIdempotencyKey adds the idempotencyKey to the update recurring payment params
func (o *UpdateRecurringPaymentParams) WithIdempotencyKey(idempotencyKey string) *UpdateRecurringPaymentParams {
	o.SetIdempotencyKey(idempotencyKey)
	return o
}

// SetIdempotencyKey adds the idempotencyKey to the update recurring payment params
func (o *UpdateRecurringPaymentParams) SetIdempotencyKey(idempotencyKey string) {
	o.IdempotencyKey = idempotencyKey
}

// WithRecurringPaymentID adds the recurringPaymentID to the update recurring payment params
func (o *UpdateRecurringPaymentParams) WithRecurringPaymentID(recurringPaymentID string) *UpdateRecurringPaymentParams {
	o.SetRecurringPaymentID(recurringPaymentID)
	return o
}

// SetRecurringPaymentID adds the recurringPaymentId to the update recurring payment params
func (o *UpdateRecurringPaymentParams) SetRecurringPaymentID(recurringPaymentID string) {
	o.RecurringPaymentID = recurringPaymentID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateRecurringPaymentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContentType != nil {

		// header param Content-Type
		if err := r.SetHeaderParam("Content-Type", *o.ContentType); err != nil {
			return err
		}
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// header param idempotency-key
	if err := r.SetHeaderParam("idempotency-key", o.IdempotencyKey); err != nil {
		return err
	}

	// path param recurringPaymentId
	if err := r.SetPathParam("recurringPaymentId", o.RecurringPaymentID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
