// Code generated by go-swagger; DO NOT EDIT.

package recurring_payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPaymentsForRecurringPaymentParams creates a new PaymentsForRecurringPaymentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPaymentsForRecurringPaymentParams() *PaymentsForRecurringPaymentParams {
	return &PaymentsForRecurringPaymentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPaymentsForRecurringPaymentParamsWithTimeout creates a new PaymentsForRecurringPaymentParams object
// with the ability to set a timeout on a request.
func NewPaymentsForRecurringPaymentParamsWithTimeout(timeout time.Duration) *PaymentsForRecurringPaymentParams {
	return &PaymentsForRecurringPaymentParams{
		timeout: timeout,
	}
}

// NewPaymentsForRecurringPaymentParamsWithContext creates a new PaymentsForRecurringPaymentParams object
// with the ability to set a context for a request.
func NewPaymentsForRecurringPaymentParamsWithContext(ctx context.Context) *PaymentsForRecurringPaymentParams {
	return &PaymentsForRecurringPaymentParams{
		Context: ctx,
	}
}

// NewPaymentsForRecurringPaymentParamsWithHTTPClient creates a new PaymentsForRecurringPaymentParams object
// with the ability to set a custom HTTPClient for a request.
func NewPaymentsForRecurringPaymentParamsWithHTTPClient(client *http.Client) *PaymentsForRecurringPaymentParams {
	return &PaymentsForRecurringPaymentParams{
		HTTPClient: client,
	}
}

/* PaymentsForRecurringPaymentParams contains all the parameters to send to the API endpoint
   for the payments for recurring payment operation.

   Typically these are written to a http.Request.
*/
type PaymentsForRecurringPaymentParams struct {

	/* Limit.

	   Number of elements that the consumer wishes to receive. Providers should implement reasonable default and maximum values

	   Format: int32
	*/
	Limit *int32

	/* Offset.

	   Opaque cursor used by the provider to send the next set of records
	*/
	Offset *string

	/* RecurringPaymentID.

	   Recurring Payment Identifier. Uniquely identifies a recurring payment
	*/
	RecurringPaymentID string

	/* UpdatedSince.

	   Return items that have been created or updated since the update id
	*/
	UpdatedSince *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the payments for recurring payment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PaymentsForRecurringPaymentParams) WithDefaults() *PaymentsForRecurringPaymentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the payments for recurring payment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PaymentsForRecurringPaymentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the payments for recurring payment params
func (o *PaymentsForRecurringPaymentParams) WithTimeout(timeout time.Duration) *PaymentsForRecurringPaymentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the payments for recurring payment params
func (o *PaymentsForRecurringPaymentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the payments for recurring payment params
func (o *PaymentsForRecurringPaymentParams) WithContext(ctx context.Context) *PaymentsForRecurringPaymentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the payments for recurring payment params
func (o *PaymentsForRecurringPaymentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the payments for recurring payment params
func (o *PaymentsForRecurringPaymentParams) WithHTTPClient(client *http.Client) *PaymentsForRecurringPaymentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the payments for recurring payment params
func (o *PaymentsForRecurringPaymentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the payments for recurring payment params
func (o *PaymentsForRecurringPaymentParams) WithLimit(limit *int32) *PaymentsForRecurringPaymentParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the payments for recurring payment params
func (o *PaymentsForRecurringPaymentParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the payments for recurring payment params
func (o *PaymentsForRecurringPaymentParams) WithOffset(offset *string) *PaymentsForRecurringPaymentParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the payments for recurring payment params
func (o *PaymentsForRecurringPaymentParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithRecurringPaymentID adds the recurringPaymentID to the payments for recurring payment params
func (o *PaymentsForRecurringPaymentParams) WithRecurringPaymentID(recurringPaymentID string) *PaymentsForRecurringPaymentParams {
	o.SetRecurringPaymentID(recurringPaymentID)
	return o
}

// SetRecurringPaymentID adds the recurringPaymentId to the payments for recurring payment params
func (o *PaymentsForRecurringPaymentParams) SetRecurringPaymentID(recurringPaymentID string) {
	o.RecurringPaymentID = recurringPaymentID
}

// WithUpdatedSince adds the updatedSince to the payments for recurring payment params
func (o *PaymentsForRecurringPaymentParams) WithUpdatedSince(updatedSince *string) *PaymentsForRecurringPaymentParams {
	o.SetUpdatedSince(updatedSince)
	return o
}

// SetUpdatedSince adds the updatedSince to the payments for recurring payment params
func (o *PaymentsForRecurringPaymentParams) SetUpdatedSince(updatedSince *string) {
	o.UpdatedSince = updatedSince
}

// WriteToRequest writes these params to a swagger request
func (o *PaymentsForRecurringPaymentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	// path param recurringPaymentId
	if err := r.SetPathParam("recurringPaymentId", o.RecurringPaymentID); err != nil {
		return err
	}

	if o.UpdatedSince != nil {

		// query param updatedSince
		var qrUpdatedSince string

		if o.UpdatedSince != nil {
			qrUpdatedSince = *o.UpdatedSince
		}
		qUpdatedSince := qrUpdatedSince
		if qUpdatedSince != "" {

			if err := r.SetQueryParam("updatedSince", qUpdatedSince); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
