// Code generated by go-swagger; DO NOT EDIT.

package recurring_payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new recurring payments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for recurring payments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelRecurringPayment(params *CancelRecurringPaymentParams, opts ...ClientOption) (*CancelRecurringPaymentOK, error)

	GetRecurringPayment(params *GetRecurringPaymentParams, opts ...ClientOption) (*GetRecurringPaymentOK, error)

	PaymentsForRecurringPayment(params *PaymentsForRecurringPaymentParams, opts ...ClientOption) (*PaymentsForRecurringPaymentOK, error)

	ScheduleRecurringPayment(params *ScheduleRecurringPaymentParams, opts ...ClientOption) (*ScheduleRecurringPaymentOK, *ScheduleRecurringPaymentCreated, error)

	SearchForRecurringPayments(params *SearchForRecurringPaymentsParams, opts ...ClientOption) (*SearchForRecurringPaymentsOK, error)

	UpdateRecurringPayment(params *UpdateRecurringPaymentParams, opts ...ClientOption) (*UpdateRecurringPaymentOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CancelRecurringPayment cancels recurring payment

  Cancel a recurring payment
*/
func (a *Client) CancelRecurringPayment(params *CancelRecurringPaymentParams, opts ...ClientOption) (*CancelRecurringPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelRecurringPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelRecurringPayment",
		Method:             "DELETE",
		PathPattern:        "/recurring-payments/{recurringPaymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelRecurringPaymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelRecurringPaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelRecurringPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRecurringPayment gets recurring payment

  Get a recurring payment
*/
func (a *Client) GetRecurringPayment(params *GetRecurringPaymentParams, opts ...ClientOption) (*GetRecurringPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecurringPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRecurringPayment",
		Method:             "GET",
		PathPattern:        "/recurring-payments/{recurringPaymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecurringPaymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecurringPaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRecurringPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PaymentsForRecurringPayment payments for recurring payment

  Search for payments associated with the recurring payment
*/
func (a *Client) PaymentsForRecurringPayment(params *PaymentsForRecurringPaymentParams, opts ...ClientOption) (*PaymentsForRecurringPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentsForRecurringPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "paymentsForRecurringPayment",
		Method:             "GET",
		PathPattern:        "/recurring-payments/{recurringPaymentId}/payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentsForRecurringPaymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PaymentsForRecurringPaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for paymentsForRecurringPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ScheduleRecurringPayment schedules recurring payment

  Schedule a recurring payment
*/
func (a *Client) ScheduleRecurringPayment(params *ScheduleRecurringPaymentParams, opts ...ClientOption) (*ScheduleRecurringPaymentOK, *ScheduleRecurringPaymentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleRecurringPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "scheduleRecurringPayment",
		Method:             "POST",
		PathPattern:        "/recurring-payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduleRecurringPaymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ScheduleRecurringPaymentOK:
		return value, nil, nil
	case *ScheduleRecurringPaymentCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for recurring_payments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchForRecurringPayments searches for recurring payments

  Search for recurring payments
*/
func (a *Client) SearchForRecurringPayments(params *SearchForRecurringPaymentsParams, opts ...ClientOption) (*SearchForRecurringPaymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchForRecurringPaymentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchForRecurringPayments",
		Method:             "GET",
		PathPattern:        "/recurring-payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchForRecurringPaymentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchForRecurringPaymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchForRecurringPayments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRecurringPayment updates recurring payment

  Update a recurring payment
*/
func (a *Client) UpdateRecurringPayment(params *UpdateRecurringPaymentParams, opts ...ClientOption) (*UpdateRecurringPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRecurringPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRecurringPayment",
		Method:             "PATCH",
		PathPattern:        "/recurring-payments/{recurringPaymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRecurringPaymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRecurringPaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRecurringPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
