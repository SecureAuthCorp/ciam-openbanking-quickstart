// Code generated by go-swagger; DO NOT EDIT.

package internal_transfers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/openbanking-quickstart/generated/fdx/models"
)

// RequestAccountTransferReader is a Reader for the RequestAccountTransfer structure.
type RequestAccountTransferReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RequestAccountTransferReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRequestAccountTransferOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRequestAccountTransferBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRequestAccountTransferUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRequestAccountTransferNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewRequestAccountTransferConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRequestAccountTransferInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewRequestAccountTransferNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewRequestAccountTransferServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRequestAccountTransferOK creates a RequestAccountTransferOK with default headers values
func NewRequestAccountTransferOK() *RequestAccountTransferOK {
	return &RequestAccountTransferOK{}
}

/* RequestAccountTransferOK describes a response with status code 200, with default header values.

Initial status of the requested transfer
*/
type RequestAccountTransferOK struct {
	Payload *models.Transferentity
}

func (o *RequestAccountTransferOK) Error() string {
	return fmt.Sprintf("[POST /transfers][%d] requestAccountTransferOK  %+v", 200, o.Payload)
}
func (o *RequestAccountTransferOK) GetPayload() *models.Transferentity {
	return o.Payload
}

func (o *RequestAccountTransferOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Transferentity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestAccountTransferBadRequest creates a RequestAccountTransferBadRequest with default headers values
func NewRequestAccountTransferBadRequest() *RequestAccountTransferBadRequest {
	return &RequestAccountTransferBadRequest{}
}

/* RequestAccountTransferBadRequest describes a response with status code 400, with default header values.

Source account does not have sufficient funds
*/
type RequestAccountTransferBadRequest struct {
	Payload *models.Error
}

func (o *RequestAccountTransferBadRequest) Error() string {
	return fmt.Sprintf("[POST /transfers][%d] requestAccountTransferBadRequest  %+v", 400, o.Payload)
}
func (o *RequestAccountTransferBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RequestAccountTransferBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestAccountTransferUnauthorized creates a RequestAccountTransferUnauthorized with default headers values
func NewRequestAccountTransferUnauthorized() *RequestAccountTransferUnauthorized {
	return &RequestAccountTransferUnauthorized{}
}

/* RequestAccountTransferUnauthorized describes a response with status code 401, with default header values.

Account not authorized for transfer
*/
type RequestAccountTransferUnauthorized struct {
	Payload *models.Error
}

func (o *RequestAccountTransferUnauthorized) Error() string {
	return fmt.Sprintf("[POST /transfers][%d] requestAccountTransferUnauthorized  %+v", 401, o.Payload)
}
func (o *RequestAccountTransferUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RequestAccountTransferUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestAccountTransferNotFound creates a RequestAccountTransferNotFound with default headers values
func NewRequestAccountTransferNotFound() *RequestAccountTransferNotFound {
	return &RequestAccountTransferNotFound{}
}

/* RequestAccountTransferNotFound describes a response with status code 404, with default header values.

Requested transfer is invalid
*/
type RequestAccountTransferNotFound struct {
	Payload *models.Error
}

func (o *RequestAccountTransferNotFound) Error() string {
	return fmt.Sprintf("[POST /transfers][%d] requestAccountTransferNotFound  %+v", 404, o.Payload)
}
func (o *RequestAccountTransferNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RequestAccountTransferNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestAccountTransferConflict creates a RequestAccountTransferConflict with default headers values
func NewRequestAccountTransferConflict() *RequestAccountTransferConflict {
	return &RequestAccountTransferConflict{}
}

/* RequestAccountTransferConflict describes a response with status code 409, with default header values.

Duplicate transfer request
*/
type RequestAccountTransferConflict struct {
	Payload *models.Error
}

func (o *RequestAccountTransferConflict) Error() string {
	return fmt.Sprintf("[POST /transfers][%d] requestAccountTransferConflict  %+v", 409, o.Payload)
}
func (o *RequestAccountTransferConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *RequestAccountTransferConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestAccountTransferInternalServerError creates a RequestAccountTransferInternalServerError with default headers values
func NewRequestAccountTransferInternalServerError() *RequestAccountTransferInternalServerError {
	return &RequestAccountTransferInternalServerError{}
}

/* RequestAccountTransferInternalServerError describes a response with status code 500, with default header values.

Catch all exception where request was not processed due to an internal outage/issue. Consider other more specific errors before using this error
*/
type RequestAccountTransferInternalServerError struct {
	Payload *models.Error
}

func (o *RequestAccountTransferInternalServerError) Error() string {
	return fmt.Sprintf("[POST /transfers][%d] requestAccountTransferInternalServerError  %+v", 500, o.Payload)
}
func (o *RequestAccountTransferInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *RequestAccountTransferInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestAccountTransferNotImplemented creates a RequestAccountTransferNotImplemented with default headers values
func NewRequestAccountTransferNotImplemented() *RequestAccountTransferNotImplemented {
	return &RequestAccountTransferNotImplemented{}
}

/* RequestAccountTransferNotImplemented describes a response with status code 501, with default header values.

Error when FdxVersion in Header is not one of those implemented at backend
*/
type RequestAccountTransferNotImplemented struct {
	Payload *models.Error
}

func (o *RequestAccountTransferNotImplemented) Error() string {
	return fmt.Sprintf("[POST /transfers][%d] requestAccountTransferNotImplemented  %+v", 501, o.Payload)
}
func (o *RequestAccountTransferNotImplemented) GetPayload() *models.Error {
	return o.Payload
}

func (o *RequestAccountTransferNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestAccountTransferServiceUnavailable creates a RequestAccountTransferServiceUnavailable with default headers values
func NewRequestAccountTransferServiceUnavailable() *RequestAccountTransferServiceUnavailable {
	return &RequestAccountTransferServiceUnavailable{}
}

/* RequestAccountTransferServiceUnavailable describes a response with status code 503, with default header values.

System is down for maintenance
*/
type RequestAccountTransferServiceUnavailable struct {
	Payload *models.Error
}

func (o *RequestAccountTransferServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /transfers][%d] requestAccountTransferServiceUnavailable  %+v", 503, o.Payload)
}
func (o *RequestAccountTransferServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *RequestAccountTransferServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
