// Code generated by go-swagger; DO NOT EDIT.

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchForPaymentsParams creates a new SearchForPaymentsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchForPaymentsParams() *SearchForPaymentsParams {
	return &SearchForPaymentsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchForPaymentsParamsWithTimeout creates a new SearchForPaymentsParams object
// with the ability to set a timeout on a request.
func NewSearchForPaymentsParamsWithTimeout(timeout time.Duration) *SearchForPaymentsParams {
	return &SearchForPaymentsParams{
		timeout: timeout,
	}
}

// NewSearchForPaymentsParamsWithContext creates a new SearchForPaymentsParams object
// with the ability to set a context for a request.
func NewSearchForPaymentsParamsWithContext(ctx context.Context) *SearchForPaymentsParams {
	return &SearchForPaymentsParams{
		Context: ctx,
	}
}

// NewSearchForPaymentsParamsWithHTTPClient creates a new SearchForPaymentsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchForPaymentsParamsWithHTTPClient(client *http.Client) *SearchForPaymentsParams {
	return &SearchForPaymentsParams{
		HTTPClient: client,
	}
}

/* SearchForPaymentsParams contains all the parameters to send to the API endpoint
   for the search for payments operation.

   Typically these are written to a http.Request.
*/
type SearchForPaymentsParams struct {

	/* Limit.

	   Number of elements that the consumer wishes to receive. Providers should implement reasonable default and maximum values

	   Format: int32
	*/
	Limit *int32

	/* Offset.

	   Opaque cursor used by the provider to send the next set of records
	*/
	Offset *string

	/* UpdatedSince.

	   Return items that have been created or updated since the update id
	*/
	UpdatedSince *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search for payments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchForPaymentsParams) WithDefaults() *SearchForPaymentsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search for payments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchForPaymentsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search for payments params
func (o *SearchForPaymentsParams) WithTimeout(timeout time.Duration) *SearchForPaymentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search for payments params
func (o *SearchForPaymentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search for payments params
func (o *SearchForPaymentsParams) WithContext(ctx context.Context) *SearchForPaymentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search for payments params
func (o *SearchForPaymentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search for payments params
func (o *SearchForPaymentsParams) WithHTTPClient(client *http.Client) *SearchForPaymentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search for payments params
func (o *SearchForPaymentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the search for payments params
func (o *SearchForPaymentsParams) WithLimit(limit *int32) *SearchForPaymentsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the search for payments params
func (o *SearchForPaymentsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the search for payments params
func (o *SearchForPaymentsParams) WithOffset(offset *string) *SearchForPaymentsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the search for payments params
func (o *SearchForPaymentsParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithUpdatedSince adds the updatedSince to the search for payments params
func (o *SearchForPaymentsParams) WithUpdatedSince(updatedSince *string) *SearchForPaymentsParams {
	o.SetUpdatedSince(updatedSince)
	return o
}

// SetUpdatedSince adds the updatedSince to the search for payments params
func (o *SearchForPaymentsParams) SetUpdatedSince(updatedSince *string) {
	o.UpdatedSince = updatedSince
}

// WriteToRequest writes these params to a swagger request
func (o *SearchForPaymentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.UpdatedSince != nil {

		// query param updatedSince
		var qrUpdatedSince string

		if o.UpdatedSince != nil {
			qrUpdatedSince = *o.UpdatedSince
		}
		qUpdatedSince := qrUpdatedSince
		if qUpdatedSince != "" {

			if err := r.SetQueryParam("updatedSince", qUpdatedSince); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
