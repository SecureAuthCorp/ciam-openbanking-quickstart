// Code generated by go-swagger; DO NOT EDIT.

package account_transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchForAccountTransactionsParams creates a new SearchForAccountTransactionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchForAccountTransactionsParams() *SearchForAccountTransactionsParams {
	return &SearchForAccountTransactionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchForAccountTransactionsParamsWithTimeout creates a new SearchForAccountTransactionsParams object
// with the ability to set a timeout on a request.
func NewSearchForAccountTransactionsParamsWithTimeout(timeout time.Duration) *SearchForAccountTransactionsParams {
	return &SearchForAccountTransactionsParams{
		timeout: timeout,
	}
}

// NewSearchForAccountTransactionsParamsWithContext creates a new SearchForAccountTransactionsParams object
// with the ability to set a context for a request.
func NewSearchForAccountTransactionsParamsWithContext(ctx context.Context) *SearchForAccountTransactionsParams {
	return &SearchForAccountTransactionsParams{
		Context: ctx,
	}
}

// NewSearchForAccountTransactionsParamsWithHTTPClient creates a new SearchForAccountTransactionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchForAccountTransactionsParamsWithHTTPClient(client *http.Client) *SearchForAccountTransactionsParams {
	return &SearchForAccountTransactionsParams{
		HTTPClient: client,
	}
}

/* SearchForAccountTransactionsParams contains all the parameters to send to the API endpoint
   for the search for account transactions operation.

   Typically these are written to a http.Request.
*/
type SearchForAccountTransactionsParams struct {

	/* AccountID.

	   Account Identifier
	*/
	AccountID string

	/* EndTime.

	   End time for use in retrieval of elements (ISO 8601)

	   Format: date
	*/
	EndTime *strfmt.Date

	/* Limit.

	   Number of elements that the consumer wishes to receive. Providers should implement reasonable default and maximum values

	   Format: int32
	*/
	Limit *int32

	/* Offset.

	   Opaque cursor used by the provider to send the next set of records
	*/
	Offset *string

	/* StartTime.

	   Start time for use in retrieval of elements (ISO 8601)

	   Format: date
	*/
	StartTime *strfmt.Date

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search for account transactions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchForAccountTransactionsParams) WithDefaults() *SearchForAccountTransactionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search for account transactions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchForAccountTransactionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search for account transactions params
func (o *SearchForAccountTransactionsParams) WithTimeout(timeout time.Duration) *SearchForAccountTransactionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search for account transactions params
func (o *SearchForAccountTransactionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search for account transactions params
func (o *SearchForAccountTransactionsParams) WithContext(ctx context.Context) *SearchForAccountTransactionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search for account transactions params
func (o *SearchForAccountTransactionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search for account transactions params
func (o *SearchForAccountTransactionsParams) WithHTTPClient(client *http.Client) *SearchForAccountTransactionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search for account transactions params
func (o *SearchForAccountTransactionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the search for account transactions params
func (o *SearchForAccountTransactionsParams) WithAccountID(accountID string) *SearchForAccountTransactionsParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the search for account transactions params
func (o *SearchForAccountTransactionsParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithEndTime adds the endTime to the search for account transactions params
func (o *SearchForAccountTransactionsParams) WithEndTime(endTime *strfmt.Date) *SearchForAccountTransactionsParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the search for account transactions params
func (o *SearchForAccountTransactionsParams) SetEndTime(endTime *strfmt.Date) {
	o.EndTime = endTime
}

// WithLimit adds the limit to the search for account transactions params
func (o *SearchForAccountTransactionsParams) WithLimit(limit *int32) *SearchForAccountTransactionsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the search for account transactions params
func (o *SearchForAccountTransactionsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the search for account transactions params
func (o *SearchForAccountTransactionsParams) WithOffset(offset *string) *SearchForAccountTransactionsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the search for account transactions params
func (o *SearchForAccountTransactionsParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithStartTime adds the startTime to the search for account transactions params
func (o *SearchForAccountTransactionsParams) WithStartTime(startTime *strfmt.Date) *SearchForAccountTransactionsParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the search for account transactions params
func (o *SearchForAccountTransactionsParams) SetStartTime(startTime *strfmt.Date) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *SearchForAccountTransactionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", o.AccountID); err != nil {
		return err
	}

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime strfmt.Date

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime.String()
		if qEndTime != "" {

			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime strfmt.Date

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime.String()
		if qStartTime != "" {

			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
