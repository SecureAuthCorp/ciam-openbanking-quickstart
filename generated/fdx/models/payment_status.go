// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PaymentStatus PaymentStatus
//
// Defines the payment lifecycle<br/> * `CANCELLED`: Payment was cancelled by the user<br/> * `FAILED`: Payment failed for reasons other then “No Funds”. For example: fraud, invalid payee, source account was closed etc.<br/> * `NOFUNDS`: Payment failed because of the lack of funds<br/> * `PROCESSED`: The payment has been executed by the payment service provider.<br/> * `PROCESSING`: Payment is in the process of being executed by the payment service provider<br/> * `SCHEDULED`: Payment has been scheduled
//
// swagger:model PaymentStatus
type PaymentStatus string

func NewPaymentStatus(value PaymentStatus) *PaymentStatus {
	v := value
	return &v
}

const (

	// PaymentStatusCANCELLED captures enum value "CANCELLED"
	PaymentStatusCANCELLED PaymentStatus = "CANCELLED"

	// PaymentStatusFAILED captures enum value "FAILED"
	PaymentStatusFAILED PaymentStatus = "FAILED"

	// PaymentStatusNOFUNDS captures enum value "NOFUNDS"
	PaymentStatusNOFUNDS PaymentStatus = "NOFUNDS"

	// PaymentStatusPROCESSED captures enum value "PROCESSED"
	PaymentStatusPROCESSED PaymentStatus = "PROCESSED"

	// PaymentStatusPROCESSING captures enum value "PROCESSING"
	PaymentStatusPROCESSING PaymentStatus = "PROCESSING"

	// PaymentStatusSCHEDULED captures enum value "SCHEDULED"
	PaymentStatusSCHEDULED PaymentStatus = "SCHEDULED"
)

// for schema
var paymentStatusEnum []interface{}

func init() {
	var res []PaymentStatus
	if err := json.Unmarshal([]byte(`["CANCELLED","FAILED","NOFUNDS","PROCESSED","PROCESSING","SCHEDULED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentStatusEnum = append(paymentStatusEnum, v)
	}
}

func (m PaymentStatus) validatePaymentStatusEnum(path, location string, value PaymentStatus) error {
	if err := validate.EnumCase(path, location, value, paymentStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payment status
func (m PaymentStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePaymentStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this payment status based on context it is used
func (m PaymentStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
