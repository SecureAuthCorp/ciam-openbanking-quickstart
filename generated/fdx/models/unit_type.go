// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UnitType UnitType
//
// The units of an investment transaction
//
// swagger:model UnitType
type UnitType string

func NewUnitType(value UnitType) *UnitType {
	v := value
	return &v
}

const (

	// UnitTypeCURRENCY captures enum value "CURRENCY"
	UnitTypeCURRENCY UnitType = "CURRENCY"

	// UnitTypeSHARES captures enum value "SHARES"
	UnitTypeSHARES UnitType = "SHARES"
)

// for schema
var unitTypeEnum []interface{}

func init() {
	var res []UnitType
	if err := json.Unmarshal([]byte(`["CURRENCY","SHARES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		unitTypeEnum = append(unitTypeEnum, v)
	}
}

func (m UnitType) validateUnitTypeEnum(path, location string, value UnitType) error {
	if err := validate.EnumCase(path, location, value, unitTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this unit type
func (m UnitType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUnitTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this unit type based on context it is used
func (m UnitType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
