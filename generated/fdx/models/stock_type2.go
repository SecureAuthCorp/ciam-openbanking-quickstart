// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StockType2 StockType2
//
// COMMON, PREFERRED, CONVERTIBLE, OTHER
//
// swagger:model StockType2
type StockType2 string

func NewStockType2(value StockType2) *StockType2 {
	v := value
	return &v
}

const (

	// StockType2COMMON captures enum value "COMMON"
	StockType2COMMON StockType2 = "COMMON"

	// StockType2CONVERTIBLE captures enum value "CONVERTIBLE"
	StockType2CONVERTIBLE StockType2 = "CONVERTIBLE"

	// StockType2OTHER captures enum value "OTHER"
	StockType2OTHER StockType2 = "OTHER"

	// StockType2PREFERRED captures enum value "PREFERRED"
	StockType2PREFERRED StockType2 = "PREFERRED"
)

// for schema
var stockType2Enum []interface{}

func init() {
	var res []StockType2
	if err := json.Unmarshal([]byte(`["COMMON","CONVERTIBLE","OTHER","PREFERRED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stockType2Enum = append(stockType2Enum, v)
	}
}

func (m StockType2) validateStockType2Enum(path, location string, value StockType2) error {
	if err := validate.EnumCase(path, location, value, stockType2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this stock type2
func (m StockType2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStockType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this stock type2 based on context it is used
func (m StockType2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
