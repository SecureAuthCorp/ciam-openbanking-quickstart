// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Billsentity Billsentity
//
// The payments due on an account
//
// swagger:model Billsentity
type Billsentity struct {

	// The amount of money the user has set to autopay this bill
	AutoPayAmount float64 `json:"autoPayAmount,omitempty"`

	// The date the autopayment is set to trigger for this bill
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	AutoPayDate strfmt.Date `json:"autoPayDate,omitempty"`

	// Whether the user's bill is paid automatically
	AutoPayEnabled bool `json:"autoPayEnabled,omitempty"`

	// The date that the payment is due
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	DueDate strfmt.Date `json:"dueDate,omitempty"`

	// The amount of the most recent payment
	LastPaymentAmount float64 `json:"lastPaymentAmount,omitempty"`

	// The date of most recent payment
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	LastPaymentDate strfmt.Date `json:"lastPaymentDate,omitempty"`

	// The minimum amount which is due
	MinimumPaymentDue float64 `json:"minimumPaymentDue,omitempty"`

	// The amount that the user should have already paid. The value is negative if user owes money
	PastDueAmount float64 `json:"pastDueAmount,omitempty"`

	// The amount of the last statement.  The value is negative if the user owes money
	StatementBalance float64 `json:"statementBalance,omitempty"`

	// The date the statement was issued
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	StatementDate strfmt.Date `json:"statementDate,omitempty"`

	// Total payment due or next payment due.  Monthly payment due for loans
	TotalPaymentDue float64 `json:"totalPaymentDue,omitempty"`
}

// Validate validates this billsentity
func (m *Billsentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoPayDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDueDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastPaymentDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatementDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Billsentity) validateAutoPayDate(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoPayDate) { // not required
		return nil
	}

	if err := validate.FormatOf("autoPayDate", "body", "date", m.AutoPayDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Billsentity) validateDueDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DueDate) { // not required
		return nil
	}

	if err := validate.FormatOf("dueDate", "body", "date", m.DueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Billsentity) validateLastPaymentDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastPaymentDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastPaymentDate", "body", "date", m.LastPaymentDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Billsentity) validateStatementDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StatementDate) { // not required
		return nil
	}

	if err := validate.FormatOf("statementDate", "body", "date", m.StatementDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this billsentity based on context it is used
func (m *Billsentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Billsentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Billsentity) UnmarshalBinary(b []byte) error {
	var res Billsentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
