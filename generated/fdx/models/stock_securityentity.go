// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockSecurityentity StockSecurityentity
//
// A stock security
//
// swagger:model StockSecurityentity
type StockSecurityentity struct {

	// Selection to reinvest dividends
	ReinvestDividends bool `json:"reinvestDividends,omitempty"`

	// stock type
	StockType StockType2 `json:"stockType,omitempty"`

	// The units in the FI's street name as a positive quantity
	UnitsStreet float64 `json:"unitsStreet,omitempty"`

	// The units in user's name directly as a positive quantity
	UnitsUser float64 `json:"unitsUser,omitempty"`

	// The current yield
	Yield float64 `json:"yield,omitempty"`

	// Yield as-of date
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	YieldAsOfDate strfmt.Date `json:"yieldAsOfDate,omitempty"`
}

// Validate validates this stock securityentity
func (m *StockSecurityentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStockType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYieldAsOfDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockSecurityentity) validateStockType(formats strfmt.Registry) error {
	if swag.IsZero(m.StockType) { // not required
		return nil
	}

	if err := m.StockType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("stockType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("stockType")
		}
		return err
	}

	return nil
}

func (m *StockSecurityentity) validateYieldAsOfDate(formats strfmt.Registry) error {
	if swag.IsZero(m.YieldAsOfDate) { // not required
		return nil
	}

	if err := validate.FormatOf("yieldAsOfDate", "body", "date", m.YieldAsOfDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this stock securityentity based on the context it is used
func (m *StockSecurityentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStockType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockSecurityentity) contextValidateStockType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.StockType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("stockType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("stockType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StockSecurityentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockSecurityentity) UnmarshalBinary(b []byte) error {
	var res StockSecurityentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
