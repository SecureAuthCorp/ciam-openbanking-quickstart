// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Investment401kSourceType Investment401kSourceType
//
// The source of a 401k investment
//
// swagger:model Investment401kSourceType
type Investment401kSourceType string

func NewInvestment401kSourceType(value Investment401kSourceType) *Investment401kSourceType {
	v := value
	return &v
}

const (

	// Investment401kSourceTypeAFTERTAX captures enum value "AFTERTAX"
	Investment401kSourceTypeAFTERTAX Investment401kSourceType = "AFTERTAX"

	// Investment401kSourceTypeMATCH captures enum value "MATCH"
	Investment401kSourceTypeMATCH Investment401kSourceType = "MATCH"

	// Investment401kSourceTypeOTHERNONVEST captures enum value "OTHERNONVEST"
	Investment401kSourceTypeOTHERNONVEST Investment401kSourceType = "OTHERNONVEST"

	// Investment401kSourceTypeOTHERVEST captures enum value "OTHERVEST"
	Investment401kSourceTypeOTHERVEST Investment401kSourceType = "OTHERVEST"

	// Investment401kSourceTypePRETAX captures enum value "PRETAX"
	Investment401kSourceTypePRETAX Investment401kSourceType = "PRETAX"

	// Investment401kSourceTypePROFITSHARING captures enum value "PROFITSHARING"
	Investment401kSourceTypePROFITSHARING Investment401kSourceType = "PROFITSHARING"

	// Investment401kSourceTypeROLLOVER captures enum value "ROLLOVER"
	Investment401kSourceTypeROLLOVER Investment401kSourceType = "ROLLOVER"
)

// for schema
var investment401kSourceTypeEnum []interface{}

func init() {
	var res []Investment401kSourceType
	if err := json.Unmarshal([]byte(`["AFTERTAX","MATCH","OTHERNONVEST","OTHERVEST","PRETAX","PROFITSHARING","ROLLOVER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		investment401kSourceTypeEnum = append(investment401kSourceTypeEnum, v)
	}
}

func (m Investment401kSourceType) validateInvestment401kSourceTypeEnum(path, location string, value Investment401kSourceType) error {
	if err := validate.EnumCase(path, location, value, investment401kSourceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this investment401k source type
func (m Investment401kSourceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInvestment401kSourceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this investment401k source type based on context it is used
func (m Investment401kSourceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
