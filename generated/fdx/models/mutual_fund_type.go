// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MutualFundType MutualFundType
//
// The type of a mutual fund
//
// swagger:model MutualFundType
type MutualFundType string

func NewMutualFundType(value MutualFundType) *MutualFundType {
	v := value
	return &v
}

const (

	// MutualFundTypeOPENEND captures enum value "OPENEND"
	MutualFundTypeOPENEND MutualFundType = "OPENEND"

	// MutualFundTypeCLOSEEND captures enum value "CLOSEEND"
	MutualFundTypeCLOSEEND MutualFundType = "CLOSEEND"

	// MutualFundTypeOTHER captures enum value "OTHER"
	MutualFundTypeOTHER MutualFundType = "OTHER"
)

// for schema
var mutualFundTypeEnum []interface{}

func init() {
	var res []MutualFundType
	if err := json.Unmarshal([]byte(`["OPENEND","CLOSEEND","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mutualFundTypeEnum = append(mutualFundTypeEnum, v)
	}
}

func (m MutualFundType) validateMutualFundTypeEnum(path, location string, value MutualFundType) error {
	if err := validate.EnumCase(path, location, value, mutualFundTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this mutual fund type
func (m MutualFundType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMutualFundTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this mutual fund type based on context it is used
func (m MutualFundType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
