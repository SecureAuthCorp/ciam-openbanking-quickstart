// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionRewardentity TransactionRewardentity
//
// Rewards earned on a transaction
//
// swagger:model TransactionRewardentity
type TransactionRewardentity struct {

	// Reward units accrued on this transaction
	Accrued float64 `json:"accrued,omitempty"`

	// Reward units adjusted on this transaction
	Adjusted float64 `json:"adjusted,omitempty"`

	// Long term persistent identity of the reward category. This ID is mapped to a category definition returned by calling the getRewardProgramCategories operation
	// Max Length: 256
	CategoryID string `json:"categoryId,omitempty"`
}

// Validate validates this transaction rewardentity
func (m *TransactionRewardentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoryID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionRewardentity) validateCategoryID(formats strfmt.Registry) error {
	if swag.IsZero(m.CategoryID) { // not required
		return nil
	}

	if err := validate.MaxLength("categoryId", "body", m.CategoryID, 256); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this transaction rewardentity based on context it is used
func (m *TransactionRewardentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TransactionRewardentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionRewardentity) UnmarshalBinary(b []byte) error {
	var res TransactionRewardentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
