// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RewardCategoryentity RewardCategoryentity
//
// Reward category used to calculate rewards on a transaction
//
// swagger:model RewardCategoryentity
type RewardCategoryentity struct {

	// Long term persistent identity of the reward category
	// Max Length: 256
	CategoryID string `json:"categoryId,omitempty"`

	// Reward category name
	CategoryName string `json:"categoryName,omitempty"`

	// Description of the reward category
	Description string `json:"description,omitempty"`

	// Array of FI-specific attributes
	FiAttributes []*FIAttributeentity `json:"fiAttributes"`

	// Factor used to calculate rewards accrued
	// Minimum: 0
	Multiplier *float64 `json:"multiplier,omitempty"`

	// Long term persistent identity of the reward program
	// Max Length: 256
	RewardProgramID string `json:"rewardProgramId,omitempty"`
}

// Validate validates this reward categoryentity
func (m *RewardCategoryentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMultiplier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRewardProgramID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RewardCategoryentity) validateCategoryID(formats strfmt.Registry) error {
	if swag.IsZero(m.CategoryID) { // not required
		return nil
	}

	if err := validate.MaxLength("categoryId", "body", m.CategoryID, 256); err != nil {
		return err
	}

	return nil
}

func (m *RewardCategoryentity) validateFiAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.FiAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.FiAttributes); i++ {
		if swag.IsZero(m.FiAttributes[i]) { // not required
			continue
		}

		if m.FiAttributes[i] != nil {
			if err := m.FiAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fiAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fiAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RewardCategoryentity) validateMultiplier(formats strfmt.Registry) error {
	if swag.IsZero(m.Multiplier) { // not required
		return nil
	}

	if err := validate.Minimum("multiplier", "body", *m.Multiplier, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *RewardCategoryentity) validateRewardProgramID(formats strfmt.Registry) error {
	if swag.IsZero(m.RewardProgramID) { // not required
		return nil
	}

	if err := validate.MaxLength("rewardProgramId", "body", m.RewardProgramID, 256); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this reward categoryentity based on the context it is used
func (m *RewardCategoryentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFiAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RewardCategoryentity) contextValidateFiAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FiAttributes); i++ {

		if m.FiAttributes[i] != nil {
			if err := m.FiAttributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fiAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fiAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RewardCategoryentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RewardCategoryentity) UnmarshalBinary(b []byte) error {
	var res RewardCategoryentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
