// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TransactionType TransactionType
//
// Type of insurance transaction
//
// swagger:model TransactionType
type TransactionType string

func NewTransactionType(value TransactionType) *TransactionType {
	v := value
	return &v
}

const (

	// TransactionTypePAYMENT captures enum value "PAYMENT"
	TransactionTypePAYMENT TransactionType = "PAYMENT"

	// TransactionTypeFEE captures enum value "FEE"
	TransactionTypeFEE TransactionType = "FEE"

	// TransactionTypeADJUSTMENT captures enum value "ADJUSTMENT"
	TransactionTypeADJUSTMENT TransactionType = "ADJUSTMENT"

	// TransactionTypeINTEREST captures enum value "INTEREST"
	TransactionTypeINTEREST TransactionType = "INTEREST"
)

// for schema
var transactionTypeEnum []interface{}

func init() {
	var res []TransactionType
	if err := json.Unmarshal([]byte(`["PAYMENT","FEE","ADJUSTMENT","INTEREST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionTypeEnum = append(transactionTypeEnum, v)
	}
}

func (m TransactionType) validateTransactionTypeEnum(path, location string, value TransactionType) error {
	if err := validate.EnumCase(path, location, value, transactionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this transaction type
func (m TransactionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTransactionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this transaction type based on context it is used
func (m TransactionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
