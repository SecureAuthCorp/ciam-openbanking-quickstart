// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvestmentBalanceentity InvestmentBalanceentity
//
// A point-in-time balance of the investment account
//
// swagger:model InvestmentBalanceentity
type InvestmentBalanceentity struct {

	// Date as of this balance
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	BalanceDate strfmt.Date `json:"balanceDate,omitempty"`

	// Description of balance
	BalanceDescription string `json:"balanceDescription,omitempty"`

	// Name of the balance
	BalanceName string `json:"balanceName,omitempty"`

	// balance type
	BalanceType InvestmentBalanceType2 `json:"balanceType,omitempty"`

	// Value of named balance
	BalanceValue float64 `json:"balanceValue,omitempty"`

	// currency
	Currency *Currencyentity2 `json:"currency,omitempty"`
}

// Validate validates this investment balanceentity
func (m *InvestmentBalanceentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalanceDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvestmentBalanceentity) validateBalanceDate(formats strfmt.Registry) error {
	if swag.IsZero(m.BalanceDate) { // not required
		return nil
	}

	if err := validate.FormatOf("balanceDate", "body", "date", m.BalanceDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InvestmentBalanceentity) validateBalanceType(formats strfmt.Registry) error {
	if swag.IsZero(m.BalanceType) { // not required
		return nil
	}

	if err := m.BalanceType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("balanceType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("balanceType")
		}
		return err
	}

	return nil
}

func (m *InvestmentBalanceentity) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this investment balanceentity based on the context it is used
func (m *InvestmentBalanceentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBalanceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvestmentBalanceentity) contextValidateBalanceType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BalanceType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("balanceType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("balanceType")
		}
		return err
	}

	return nil
}

func (m *InvestmentBalanceentity) contextValidateCurrency(ctx context.Context, formats strfmt.Registry) error {

	if m.Currency != nil {
		if err := m.Currency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvestmentBalanceentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvestmentBalanceentity) UnmarshalBinary(b []byte) error {
	var res InvestmentBalanceentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
