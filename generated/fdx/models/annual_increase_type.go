// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AnnualIncreaseType AnnualIncreaseType
//
// The type of annual increase of an annuity account.  Deprecated, will be removed in v6.0
//
// swagger:model AnnualIncreaseType
type AnnualIncreaseType string

func NewAnnualIncreaseType(value AnnualIncreaseType) *AnnualIncreaseType {
	v := value
	return &v
}

const (

	// AnnualIncreaseTypeFIXED captures enum value "FIXED"
	AnnualIncreaseTypeFIXED AnnualIncreaseType = "FIXED"

	// AnnualIncreaseTypePERCENT captures enum value "PERCENT"
	AnnualIncreaseTypePERCENT AnnualIncreaseType = "PERCENT"

	// AnnualIncreaseTypeDOLLAR captures enum value "DOLLAR"
	AnnualIncreaseTypeDOLLAR AnnualIncreaseType = "DOLLAR"
)

// for schema
var annualIncreaseTypeEnum []interface{}

func init() {
	var res []AnnualIncreaseType
	if err := json.Unmarshal([]byte(`["FIXED","PERCENT","DOLLAR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		annualIncreaseTypeEnum = append(annualIncreaseTypeEnum, v)
	}
}

func (m AnnualIncreaseType) validateAnnualIncreaseTypeEnum(path, location string, value AnnualIncreaseType) error {
	if err := validate.EnumCase(path, location, value, annualIncreaseTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this annual increase type
func (m AnnualIncreaseType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAnnualIncreaseTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this annual increase type based on context it is used
func (m AnnualIncreaseType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
