// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HeldInAccount2 HeldInAccount2
//
// Sub-account CASH, MARGIN, SHORT, OTHER
//
// swagger:model HeldInAccount2
type HeldInAccount2 string

func NewHeldInAccount2(value HeldInAccount2) *HeldInAccount2 {
	v := value
	return &v
}

const (

	// HeldInAccount2CASH captures enum value "CASH"
	HeldInAccount2CASH HeldInAccount2 = "CASH"

	// HeldInAccount2MARGIN captures enum value "MARGIN"
	HeldInAccount2MARGIN HeldInAccount2 = "MARGIN"

	// HeldInAccount2OTHER captures enum value "OTHER"
	HeldInAccount2OTHER HeldInAccount2 = "OTHER"

	// HeldInAccount2SHORT captures enum value "SHORT"
	HeldInAccount2SHORT HeldInAccount2 = "SHORT"
)

// for schema
var heldInAccount2Enum []interface{}

func init() {
	var res []HeldInAccount2
	if err := json.Unmarshal([]byte(`["CASH","MARGIN","OTHER","SHORT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		heldInAccount2Enum = append(heldInAccount2Enum, v)
	}
}

func (m HeldInAccount2) validateHeldInAccount2Enum(path, location string, value HeldInAccount2) error {
	if err := validate.EnumCase(path, location, value, heldInAccount2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this held in account2
func (m HeldInAccount2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHeldInAccount2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this held in account2 based on context it is used
func (m HeldInAccount2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
