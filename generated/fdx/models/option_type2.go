// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OptionType2 OptionType2
//
// Option type. One of PUT, CALL
//
// swagger:model OptionType2
type OptionType2 string

func NewOptionType2(value OptionType2) *OptionType2 {
	v := value
	return &v
}

const (

	// OptionType2CALL captures enum value "CALL"
	OptionType2CALL OptionType2 = "CALL"

	// OptionType2PUT captures enum value "PUT"
	OptionType2PUT OptionType2 = "PUT"
)

// for schema
var optionType2Enum []interface{}

func init() {
	var res []OptionType2
	if err := json.Unmarshal([]byte(`["CALL","PUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		optionType2Enum = append(optionType2Enum, v)
	}
}

func (m OptionType2) validateOptionType2Enum(path, location string, value OptionType2) error {
	if err := validate.EnumCase(path, location, value, optionType2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this option type2
func (m OptionType2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOptionType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this option type2 based on context it is used
func (m OptionType2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
