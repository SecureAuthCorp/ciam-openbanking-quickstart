// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SweepSecurityentity SweepSecurityentity
//
// A sweep security
//
// swagger:model SweepSecurityentity
type SweepSecurityentity struct {

	// Balance of funds available for use
	AvailableBalance float64 `json:"availableBalance,omitempty"`

	// As-of date of balances
	// Example: 2021-07-15T14:46:41.375Z
	// Format: date-time
	BalanceAsOf strfmt.DateTime `json:"balanceAsOf,omitempty"`

	// Whether or not checks can be written on the account
	Checks bool `json:"checks,omitempty"`

	// Balance of funds in account
	CurrentBalance float64 `json:"currentBalance,omitempty"`
}

// Validate validates this sweep securityentity
func (m *SweepSecurityentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalanceAsOf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SweepSecurityentity) validateBalanceAsOf(formats strfmt.Registry) error {
	if swag.IsZero(m.BalanceAsOf) { // not required
		return nil
	}

	if err := validate.FormatOf("balanceAsOf", "body", "date-time", m.BalanceAsOf.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sweep securityentity based on context it is used
func (m *SweepSecurityentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SweepSecurityentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SweepSecurityentity) UnmarshalBinary(b []byte) error {
	var res SweepSecurityentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
