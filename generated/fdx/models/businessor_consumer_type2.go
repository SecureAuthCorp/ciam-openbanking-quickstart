// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BusinessorConsumerType2 BusinessorConsumerType2
//
// BUSINESS or CONSUMER membership
//
// swagger:model BusinessorConsumerType2
type BusinessorConsumerType2 string

func NewBusinessorConsumerType2(value BusinessorConsumerType2) *BusinessorConsumerType2 {
	v := value
	return &v
}

const (

	// BusinessorConsumerType2BUSINESS captures enum value "BUSINESS"
	BusinessorConsumerType2BUSINESS BusinessorConsumerType2 = "BUSINESS"

	// BusinessorConsumerType2CONSUMER captures enum value "CONSUMER"
	BusinessorConsumerType2CONSUMER BusinessorConsumerType2 = "CONSUMER"
)

// for schema
var businessorConsumerType2Enum []interface{}

func init() {
	var res []BusinessorConsumerType2
	if err := json.Unmarshal([]byte(`["BUSINESS","CONSUMER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		businessorConsumerType2Enum = append(businessorConsumerType2Enum, v)
	}
}

func (m BusinessorConsumerType2) validateBusinessorConsumerType2Enum(path, location string, value BusinessorConsumerType2) error {
	if err := validate.EnumCase(path, location, value, businessorConsumerType2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this businessor consumer type2
func (m BusinessorConsumerType2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBusinessorConsumerType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this businessor consumer type2 based on context it is used
func (m BusinessorConsumerType2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
