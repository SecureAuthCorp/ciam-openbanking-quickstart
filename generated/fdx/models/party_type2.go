// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PartyType2 PartyType2
//
// Extensible string enum identifying the type of the party
//
// swagger:model PartyType2
type PartyType2 string

func NewPartyType2(value PartyType2) *PartyType2 {
	v := value
	return &v
}

const (

	// PartyType2DATAACCESSPLATFORM captures enum value "DATA_ACCESS_PLATFORM"
	PartyType2DATAACCESSPLATFORM PartyType2 = "DATA_ACCESS_PLATFORM"

	// PartyType2DATAPROVIDER captures enum value "DATA_PROVIDER"
	PartyType2DATAPROVIDER PartyType2 = "DATA_PROVIDER"

	// PartyType2DATARECIPIENT captures enum value "DATA_RECIPIENT"
	PartyType2DATARECIPIENT PartyType2 = "DATA_RECIPIENT"

	// PartyType2INDIVIDUAL captures enum value "INDIVIDUAL"
	PartyType2INDIVIDUAL PartyType2 = "INDIVIDUAL"

	// PartyType2MERCHANT captures enum value "MERCHANT"
	PartyType2MERCHANT PartyType2 = "MERCHANT"

	// PartyType2VENDOR captures enum value "VENDOR"
	PartyType2VENDOR PartyType2 = "VENDOR"
)

// for schema
var partyType2Enum []interface{}

func init() {
	var res []PartyType2
	if err := json.Unmarshal([]byte(`["DATA_ACCESS_PLATFORM","DATA_PROVIDER","DATA_RECIPIENT","INDIVIDUAL","MERCHANT","VENDOR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		partyType2Enum = append(partyType2Enum, v)
	}
}

func (m PartyType2) validatePartyType2Enum(path, location string, value PartyType2) error {
	if err := validate.EnumCase(path, location, value, partyType2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this party type2
func (m PartyType2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePartyType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this party type2 based on context it is used
func (m PartyType2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
