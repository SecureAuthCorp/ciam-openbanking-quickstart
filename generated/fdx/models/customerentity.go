// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Customerentity Customerentity
//
// Represents a customer
//
// swagger:model Customerentity
type Customerentity struct {

	// List of accounts related to this customer
	Accounts []*CustomertoAccountRelationshipentity `json:"accounts"`

	// An array of the customer's physical mail addresses
	Addresses []*DeliveryAddress `json:"addresses"`

	// Long-term persistent identity of the customer. This identity must be unique to the owning institution
	// Max Length: 256
	CustomerID string `json:"customerId,omitempty"`

	// The customer's date of birth
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	DateOfBirth strfmt.Date `json:"dateOfBirth,omitempty"`

	// An array of the customer's electronic mail addresses
	Email []string `json:"email"`

	// A federal (such as passport) or state (such as driver's license) issued identifier
	GovernmentID string `json:"governmentId,omitempty"`

	// name
	Name *CustomerNameentity1 `json:"name,omitempty"`

	// Country specific Tax Id associated with this customer (SIN or NAS in Canada, SSN or TIN in US, etc.)
	TaxID string `json:"taxId,omitempty"`

	// tax Id country
	TaxIDCountry ISO3166CountryCode1 `json:"taxIdCountry,omitempty"`

	// An array of the customer's telephone numbers
	Telephones []*TelephoneNumber `json:"telephones"`
}

// Validate validates this customerentity
func (m *Customerentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxIDCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelephones(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Customerentity) validateAccounts(formats strfmt.Registry) error {
	if swag.IsZero(m.Accounts) { // not required
		return nil
	}

	for i := 0; i < len(m.Accounts); i++ {
		if swag.IsZero(m.Accounts[i]) { // not required
			continue
		}

		if m.Accounts[i] != nil {
			if err := m.Accounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Customerentity) validateAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.Addresses) { // not required
		return nil
	}

	for i := 0; i < len(m.Addresses); i++ {
		if swag.IsZero(m.Addresses[i]) { // not required
			continue
		}

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Customerentity) validateCustomerID(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerID) { // not required
		return nil
	}

	if err := validate.MaxLength("customerId", "body", m.CustomerID, 256); err != nil {
		return err
	}

	return nil
}

func (m *Customerentity) validateDateOfBirth(formats strfmt.Registry) error {
	if swag.IsZero(m.DateOfBirth) { // not required
		return nil
	}

	if err := validate.FormatOf("dateOfBirth", "body", "date", m.DateOfBirth.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Customerentity) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

func (m *Customerentity) validateTaxIDCountry(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxIDCountry) { // not required
		return nil
	}

	if err := m.TaxIDCountry.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("taxIdCountry")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("taxIdCountry")
		}
		return err
	}

	return nil
}

func (m *Customerentity) validateTelephones(formats strfmt.Registry) error {
	if swag.IsZero(m.Telephones) { // not required
		return nil
	}

	for i := 0; i < len(m.Telephones); i++ {
		if swag.IsZero(m.Telephones[i]) { // not required
			continue
		}

		if m.Telephones[i] != nil {
			if err := m.Telephones[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("telephones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("telephones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this customerentity based on the context it is used
func (m *Customerentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAddresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxIDCountry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTelephones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Customerentity) contextValidateAccounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Accounts); i++ {

		if m.Accounts[i] != nil {
			if err := m.Accounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Customerentity) contextValidateAddresses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Addresses); i++ {

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Customerentity) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

func (m *Customerentity) contextValidateTaxIDCountry(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TaxIDCountry.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("taxIdCountry")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("taxIdCountry")
		}
		return err
	}

	return nil
}

func (m *Customerentity) contextValidateTelephones(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Telephones); i++ {

		if m.Telephones[i] != nil {
			if err := m.Telephones[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("telephones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("telephones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Customerentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Customerentity) UnmarshalBinary(b []byte) error {
	var res Customerentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
