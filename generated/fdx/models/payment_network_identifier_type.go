// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PaymentNetworkIdentifierType PaymentNetworkIdentifierType
//
// Suggested values for Payment Initiation Identifier Type
//
// swagger:model PaymentNetworkIdentifierType
type PaymentNetworkIdentifierType string

func NewPaymentNetworkIdentifierType(value PaymentNetworkIdentifierType) *PaymentNetworkIdentifierType {
	v := value
	return &v
}

const (

	// PaymentNetworkIdentifierTypeACCOUNTNUMBER captures enum value "ACCOUNT_NUMBER"
	PaymentNetworkIdentifierTypeACCOUNTNUMBER PaymentNetworkIdentifierType = "ACCOUNT_NUMBER"

	// PaymentNetworkIdentifierTypeTOKENIZEDACCOUNTNUMBER captures enum value "TOKENIZED_ACCOUNT_NUMBER"
	PaymentNetworkIdentifierTypeTOKENIZEDACCOUNTNUMBER PaymentNetworkIdentifierType = "TOKENIZED_ACCOUNT_NUMBER"
)

// for schema
var paymentNetworkIdentifierTypeEnum []interface{}

func init() {
	var res []PaymentNetworkIdentifierType
	if err := json.Unmarshal([]byte(`["ACCOUNT_NUMBER","TOKENIZED_ACCOUNT_NUMBER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentNetworkIdentifierTypeEnum = append(paymentNetworkIdentifierTypeEnum, v)
	}
}

func (m PaymentNetworkIdentifierType) validatePaymentNetworkIdentifierTypeEnum(path, location string, value PaymentNetworkIdentifierType) error {
	if err := validate.EnumCase(path, location, value, paymentNetworkIdentifierTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payment network identifier type
func (m PaymentNetworkIdentifierType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePaymentNetworkIdentifierTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this payment network identifier type based on context it is used
func (m PaymentNetworkIdentifierType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
