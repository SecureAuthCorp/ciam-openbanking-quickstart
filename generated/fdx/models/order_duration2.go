// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrderDuration2 OrderDuration2
//
// This order is good for DAY, GOODTILLCANCEL, IMMEDIATE
//
// swagger:model OrderDuration2
type OrderDuration2 string

func NewOrderDuration2(value OrderDuration2) *OrderDuration2 {
	v := value
	return &v
}

const (

	// OrderDuration2DAY captures enum value "DAY"
	OrderDuration2DAY OrderDuration2 = "DAY"

	// OrderDuration2GOODTILLCANCEL captures enum value "GOODTILLCANCEL"
	OrderDuration2GOODTILLCANCEL OrderDuration2 = "GOODTILLCANCEL"

	// OrderDuration2IMMEDIATE captures enum value "IMMEDIATE"
	OrderDuration2IMMEDIATE OrderDuration2 = "IMMEDIATE"
)

// for schema
var orderDuration2Enum []interface{}

func init() {
	var res []OrderDuration2
	if err := json.Unmarshal([]byte(`["DAY","GOODTILLCANCEL","IMMEDIATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderDuration2Enum = append(orderDuration2Enum, v)
	}
}

func (m OrderDuration2) validateOrderDuration2Enum(path, location string, value OrderDuration2) error {
	if err := validate.EnumCase(path, location, value, orderDuration2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this order duration2
func (m OrderDuration2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrderDuration2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this order duration2 based on context it is used
func (m OrderDuration2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
