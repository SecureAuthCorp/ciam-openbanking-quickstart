// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SecurityType2 SecurityType2
//
// STOCK, MUTUALFUND, DEBT, OPTION, SWEEP, OTHER, BOND
//
// swagger:model SecurityType2
type SecurityType2 string

func NewSecurityType2(value SecurityType2) *SecurityType2 {
	v := value
	return &v
}

const (

	// SecurityType2BOND captures enum value "BOND"
	SecurityType2BOND SecurityType2 = "BOND"

	// SecurityType2DEBT captures enum value "DEBT"
	SecurityType2DEBT SecurityType2 = "DEBT"

	// SecurityType2DIGITALASSET captures enum value "DIGITALASSET"
	SecurityType2DIGITALASSET SecurityType2 = "DIGITALASSET"

	// SecurityType2MUTUALFUND captures enum value "MUTUALFUND"
	SecurityType2MUTUALFUND SecurityType2 = "MUTUALFUND"

	// SecurityType2OPTION captures enum value "OPTION"
	SecurityType2OPTION SecurityType2 = "OPTION"

	// SecurityType2OTHER captures enum value "OTHER"
	SecurityType2OTHER SecurityType2 = "OTHER"

	// SecurityType2STOCK captures enum value "STOCK"
	SecurityType2STOCK SecurityType2 = "STOCK"

	// SecurityType2SWEEP captures enum value "SWEEP"
	SecurityType2SWEEP SecurityType2 = "SWEEP"
)

// for schema
var securityType2Enum []interface{}

func init() {
	var res []SecurityType2
	if err := json.Unmarshal([]byte(`["BOND","DEBT","DIGITALASSET","MUTUALFUND","OPTION","OTHER","STOCK","SWEEP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityType2Enum = append(securityType2Enum, v)
	}
}

func (m SecurityType2) validateSecurityType2Enum(path, location string, value SecurityType2) error {
	if err := validate.EnumCase(path, location, value, securityType2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this security type2
func (m SecurityType2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecurityType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this security type2 based on context it is used
func (m SecurityType2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
