// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Secured2 Secured2
//
// How the option is secured. One of NAKED, COVERED
//
// swagger:model Secured2
type Secured2 string

func NewSecured2(value Secured2) *Secured2 {
	v := value
	return &v
}

const (

	// Secured2COVERED captures enum value "COVERED"
	Secured2COVERED Secured2 = "COVERED"

	// Secured2NAKED captures enum value "NAKED"
	Secured2NAKED Secured2 = "NAKED"
)

// for schema
var secured2Enum []interface{}

func init() {
	var res []Secured2
	if err := json.Unmarshal([]byte(`["COVERED","NAKED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		secured2Enum = append(secured2Enum, v)
	}
}

func (m Secured2) validateSecured2Enum(path, location string, value Secured2) error {
	if err := validate.EnumCase(path, location, value, secured2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this secured2
func (m Secured2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecured2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this secured2 based on context it is used
func (m Secured2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
