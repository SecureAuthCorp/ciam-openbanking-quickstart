// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PolicyPremiumTerm PolicyPremiumTerm
//
// The payment term for the premium
//
// swagger:model PolicyPremiumTerm
type PolicyPremiumTerm string

func NewPolicyPremiumTerm(value PolicyPremiumTerm) *PolicyPremiumTerm {
	v := value
	return &v
}

const (

	// PolicyPremiumTermMONTHLY captures enum value "MONTHLY"
	PolicyPremiumTermMONTHLY PolicyPremiumTerm = "MONTHLY"

	// PolicyPremiumTermANNUAL captures enum value "ANNUAL"
	PolicyPremiumTermANNUAL PolicyPremiumTerm = "ANNUAL"
)

// for schema
var policyPremiumTermEnum []interface{}

func init() {
	var res []PolicyPremiumTerm
	if err := json.Unmarshal([]byte(`["MONTHLY","ANNUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyPremiumTermEnum = append(policyPremiumTermEnum, v)
	}
}

func (m PolicyPremiumTerm) validatePolicyPremiumTermEnum(path, location string, value PolicyPremiumTerm) error {
	if err := validate.EnumCase(path, location, value, policyPremiumTermEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this policy premium term
func (m PolicyPremiumTerm) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePolicyPremiumTermEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this policy premium term based on context it is used
func (m PolicyPremiumTerm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
