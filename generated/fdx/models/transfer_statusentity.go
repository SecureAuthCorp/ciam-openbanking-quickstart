// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransferStatusentity TransferStatusentity
//
// The status of a transfer of money. Used only by the deprecated endpoint `/transfers/{transferId}/status`.
//
// swagger:model TransferStatusentity
type TransferStatusentity struct {

	// Long-term persistent identifier for transfer attempt
	// Max Length: 256
	ReferenceID string `json:"referenceId,omitempty"`

	// status
	Status PaymentStatus1 `json:"status,omitempty"`

	// Date of transfer attempt
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	TransferDate strfmt.Date `json:"transferDate,omitempty"`

	// Client generated, long-term persistent identity of the transfer action. This ID should be maintained and returned by institution
	// Max Length: 256
	TransferID string `json:"transferId,omitempty"`
}

// Validate validates this transfer statusentity
func (m *TransferStatusentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransferStatusentity) validateReferenceID(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferenceID) { // not required
		return nil
	}

	if err := validate.MaxLength("referenceId", "body", m.ReferenceID, 256); err != nil {
		return err
	}

	return nil
}

func (m *TransferStatusentity) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *TransferStatusentity) validateTransferDate(formats strfmt.Registry) error {
	if swag.IsZero(m.TransferDate) { // not required
		return nil
	}

	if err := validate.FormatOf("transferDate", "body", "date", m.TransferDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransferStatusentity) validateTransferID(formats strfmt.Registry) error {
	if swag.IsZero(m.TransferID) { // not required
		return nil
	}

	if err := validate.MaxLength("transferId", "body", m.TransferID, 256); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this transfer statusentity based on the context it is used
func (m *TransferStatusentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransferStatusentity) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransferStatusentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransferStatusentity) UnmarshalBinary(b []byte) error {
	var res TransferStatusentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
