// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AccountBillPayStatus2 AccountBillPayStatus2
//
// Defines account's ability to participate in bill payments
//
// swagger:model AccountBillPayStatus2
type AccountBillPayStatus2 string

func NewAccountBillPayStatus2(value AccountBillPayStatus2) *AccountBillPayStatus2 {
	v := value
	return &v
}

const (

	// AccountBillPayStatus2ACTIVE captures enum value "ACTIVE"
	AccountBillPayStatus2ACTIVE AccountBillPayStatus2 = "ACTIVE"

	// AccountBillPayStatus2AVAILABLE captures enum value "AVAILABLE"
	AccountBillPayStatus2AVAILABLE AccountBillPayStatus2 = "AVAILABLE"

	// AccountBillPayStatus2NOTAVAILABLE captures enum value "NOT_AVAILABLE"
	AccountBillPayStatus2NOTAVAILABLE AccountBillPayStatus2 = "NOT_AVAILABLE"

	// AccountBillPayStatus2PENDING captures enum value "PENDING"
	AccountBillPayStatus2PENDING AccountBillPayStatus2 = "PENDING"
)

// for schema
var accountBillPayStatus2Enum []interface{}

func init() {
	var res []AccountBillPayStatus2
	if err := json.Unmarshal([]byte(`["ACTIVE","AVAILABLE","NOT_AVAILABLE","PENDING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountBillPayStatus2Enum = append(accountBillPayStatus2Enum, v)
	}
}

func (m AccountBillPayStatus2) validateAccountBillPayStatus2Enum(path, location string, value AccountBillPayStatus2) error {
	if err := validate.EnumCase(path, location, value, accountBillPayStatus2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this account bill pay status2
func (m AccountBillPayStatus2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAccountBillPayStatus2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this account bill pay status2 based on context it is used
func (m AccountBillPayStatus2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
