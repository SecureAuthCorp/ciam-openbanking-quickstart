// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SecurityIDType SecurityIdType
//
// The type of identifier for a security
//
// swagger:model SecurityIdType
type SecurityIDType string

func NewSecurityIDType(value SecurityIDType) *SecurityIDType {
	v := value
	return &v
}

const (

	// SecurityIDTypeCINS captures enum value "CINS"
	SecurityIDTypeCINS SecurityIDType = "CINS"

	// SecurityIDTypeCMC captures enum value "CMC"
	SecurityIDTypeCMC SecurityIDType = "CMC"

	// SecurityIDTypeCME captures enum value "CME"
	SecurityIDTypeCME SecurityIDType = "CME"

	// SecurityIDTypeCUSIP captures enum value "CUSIP"
	SecurityIDTypeCUSIP SecurityIDType = "CUSIP"

	// SecurityIDTypeISIN captures enum value "ISIN"
	SecurityIDTypeISIN SecurityIDType = "ISIN"

	// SecurityIDTypeITSA captures enum value "ITSA"
	SecurityIDTypeITSA SecurityIDType = "ITSA"

	// SecurityIDTypeNASDAQ captures enum value "NASDAQ"
	SecurityIDTypeNASDAQ SecurityIDType = "NASDAQ"

	// SecurityIDTypeSEDOL captures enum value "SEDOL"
	SecurityIDTypeSEDOL SecurityIDType = "SEDOL"

	// SecurityIDTypeSICC captures enum value "SICC"
	SecurityIDTypeSICC SecurityIDType = "SICC"

	// SecurityIDTypeVALOR captures enum value "VALOR"
	SecurityIDTypeVALOR SecurityIDType = "VALOR"

	// SecurityIDTypeWKN captures enum value "WKN"
	SecurityIDTypeWKN SecurityIDType = "WKN"
)

// for schema
var securityIdTypeEnum []interface{}

func init() {
	var res []SecurityIDType
	if err := json.Unmarshal([]byte(`["CINS","CMC","CME","CUSIP","ISIN","ITSA","NASDAQ","SEDOL","SICC","VALOR","WKN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityIdTypeEnum = append(securityIdTypeEnum, v)
	}
}

func (m SecurityIDType) validateSecurityIDTypeEnum(path, location string, value SecurityIDType) error {
	if err := validate.EnumCase(path, location, value, securityIdTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this security Id type
func (m SecurityIDType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecurityIDTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this security Id type based on context it is used
func (m SecurityIDType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
