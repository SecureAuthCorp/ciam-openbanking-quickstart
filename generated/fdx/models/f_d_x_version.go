// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FDXVersion FDXVersion
//
// The list of prior and current FDX major and minor versions.
//
// swagger:model FDXVersion
type FDXVersion string

func NewFDXVersion(value FDXVersion) *FDXVersion {
	v := value
	return &v
}

const (

	// FDXVersionV1Dot0 captures enum value "V1.0"
	FDXVersionV1Dot0 FDXVersion = "V1.0"

	// FDXVersionV2Dot0 captures enum value "V2.0"
	FDXVersionV2Dot0 FDXVersion = "V2.0"

	// FDXVersionV2Dot1 captures enum value "V2.1"
	FDXVersionV2Dot1 FDXVersion = "V2.1"

	// FDXVersionV3Dot0 captures enum value "V3.0"
	FDXVersionV3Dot0 FDXVersion = "V3.0"

	// FDXVersionV4Dot0 captures enum value "V4.0"
	FDXVersionV4Dot0 FDXVersion = "V4.0"

	// FDXVersionV4Dot1 captures enum value "V4.1"
	FDXVersionV4Dot1 FDXVersion = "V4.1"

	// FDXVersionV4Dot2 captures enum value "V4.2"
	FDXVersionV4Dot2 FDXVersion = "V4.2"

	// FDXVersionV4Dot5 captures enum value "V4.5"
	FDXVersionV4Dot5 FDXVersion = "V4.5"

	// FDXVersionV4Dot6 captures enum value "V4.6"
	FDXVersionV4Dot6 FDXVersion = "V4.6"

	// FDXVersionV5Dot0 captures enum value "V5.0"
	FDXVersionV5Dot0 FDXVersion = "V5.0"

	// FDXVersionV5Dot0Dot1 captures enum value "V5.0.1"
	FDXVersionV5Dot0Dot1 FDXVersion = "V5.0.1"

	// FDXVersionV5Dot1 captures enum value "V5.1"
	FDXVersionV5Dot1 FDXVersion = "V5.1"
)

// for schema
var fDXVersionEnum []interface{}

func init() {
	var res []FDXVersion
	if err := json.Unmarshal([]byte(`["V1.0","V2.0","V2.1","V3.0","V4.0","V4.1","V4.2","V4.5","V4.6","V5.0","V5.0.1","V5.1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXVersionEnum = append(fDXVersionEnum, v)
	}
}

func (m FDXVersion) validateFDXVersionEnum(path, location string, value FDXVersion) error {
	if err := validate.EnumCase(path, location, value, fDXVersionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this f d x version
func (m FDXVersion) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFDXVersionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this f d x version based on context it is used
func (m FDXVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
