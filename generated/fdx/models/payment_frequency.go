// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PaymentFrequency PaymentFrequency
//
// The frequency of payments.  Deprecated, will be removed in v6.0
//
// swagger:model PaymentFrequency
type PaymentFrequency string

func NewPaymentFrequency(value PaymentFrequency) *PaymentFrequency {
	v := value
	return &v
}

const (

	// PaymentFrequencyANNUALLY captures enum value "ANNUALLY"
	PaymentFrequencyANNUALLY PaymentFrequency = "ANNUALLY"

	// PaymentFrequencyBIWEEKLY captures enum value "BIWEEKLY"
	PaymentFrequencyBIWEEKLY PaymentFrequency = "BIWEEKLY"

	// PaymentFrequencyDAILY captures enum value "DAILY"
	PaymentFrequencyDAILY PaymentFrequency = "DAILY"

	// PaymentFrequencyMONTHLY captures enum value "MONTHLY"
	PaymentFrequencyMONTHLY PaymentFrequency = "MONTHLY"

	// PaymentFrequencySEMIANNUALLY captures enum value "SEMIANNUALLY"
	PaymentFrequencySEMIANNUALLY PaymentFrequency = "SEMIANNUALLY"

	// PaymentFrequencySEMIMONTHLY captures enum value "SEMIMONTHLY"
	PaymentFrequencySEMIMONTHLY PaymentFrequency = "SEMIMONTHLY"

	// PaymentFrequencyWEEKLY captures enum value "WEEKLY"
	PaymentFrequencyWEEKLY PaymentFrequency = "WEEKLY"
)

// for schema
var paymentFrequencyEnum []interface{}

func init() {
	var res []PaymentFrequency
	if err := json.Unmarshal([]byte(`["ANNUALLY","BIWEEKLY","DAILY","MONTHLY","SEMIANNUALLY","SEMIMONTHLY","WEEKLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentFrequencyEnum = append(paymentFrequencyEnum, v)
	}
}

func (m PaymentFrequency) validatePaymentFrequencyEnum(path, location string, value PaymentFrequency) error {
	if err := validate.EnumCase(path, location, value, paymentFrequencyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payment frequency
func (m PaymentFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePaymentFrequencyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this payment frequency based on context it is used
func (m PaymentFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
