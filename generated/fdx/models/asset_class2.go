// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AssetClass2 AssetClass2
//
// The asset class for this allocation
//
// swagger:model AssetClass2
type AssetClass2 string

func NewAssetClass2(value AssetClass2) *AssetClass2 {
	v := value
	return &v
}

const (

	// AssetClass2DOMESTICBOND captures enum value "DOMESTICBOND"
	AssetClass2DOMESTICBOND AssetClass2 = "DOMESTICBOND"

	// AssetClass2INTLBOND captures enum value "INTLBOND"
	AssetClass2INTLBOND AssetClass2 = "INTLBOND"

	// AssetClass2INTLSTOCK captures enum value "INTLSTOCK"
	AssetClass2INTLSTOCK AssetClass2 = "INTLSTOCK"

	// AssetClass2LARGESTOCK captures enum value "LARGESTOCK"
	AssetClass2LARGESTOCK AssetClass2 = "LARGESTOCK"

	// AssetClass2MONEYMARKET captures enum value "MONEYMARKET"
	AssetClass2MONEYMARKET AssetClass2 = "MONEYMARKET"

	// AssetClass2OTHER captures enum value "OTHER"
	AssetClass2OTHER AssetClass2 = "OTHER"

	// AssetClass2SMALLSTOCK captures enum value "SMALLSTOCK"
	AssetClass2SMALLSTOCK AssetClass2 = "SMALLSTOCK"
)

// for schema
var assetClass2Enum []interface{}

func init() {
	var res []AssetClass2
	if err := json.Unmarshal([]byte(`["DOMESTICBOND","INTLBOND","INTLSTOCK","LARGESTOCK","MONEYMARKET","OTHER","SMALLSTOCK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetClass2Enum = append(assetClass2Enum, v)
	}
}

func (m AssetClass2) validateAssetClass2Enum(path, location string, value AssetClass2) error {
	if err := validate.EnumCase(path, location, value, assetClass2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this asset class2
func (m AssetClass2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAssetClass2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this asset class2 based on context it is used
func (m AssetClass2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
