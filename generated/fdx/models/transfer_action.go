// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TransferAction TransferAction
//
// Transfer direction
//
// swagger:model TransferAction
type TransferAction string

func NewTransferAction(value TransferAction) *TransferAction {
	v := value
	return &v
}

const (

	// TransferActionIN captures enum value "IN"
	TransferActionIN TransferAction = "IN"

	// TransferActionOUT captures enum value "OUT"
	TransferActionOUT TransferAction = "OUT"
)

// for schema
var transferActionEnum []interface{}

func init() {
	var res []TransferAction
	if err := json.Unmarshal([]byte(`["IN","OUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transferActionEnum = append(transferActionEnum, v)
	}
}

func (m TransferAction) validateTransferActionEnum(path, location string, value TransferAction) error {
	if err := validate.EnumCase(path, location, value, transferActionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this transfer action
func (m TransferAction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTransferActionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this transfer action based on context it is used
func (m TransferAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
