// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PeriodCertainType2 PeriodCertainType2
//
// The number of modal periods comprising the duration of the certain period of an annuity payout
//
// swagger:model PeriodCertainType2
type PeriodCertainType2 string

func NewPeriodCertainType2(value PeriodCertainType2) *PeriodCertainType2 {
	v := value
	return &v
}

const (

	// PeriodCertainType2NONE captures enum value "NONE"
	PeriodCertainType2NONE PeriodCertainType2 = "NONE"

	// PeriodCertainType2Nr5YEAR captures enum value "5_YEAR"
	PeriodCertainType2Nr5YEAR PeriodCertainType2 = "5_YEAR"

	// PeriodCertainType2Nr10YEAR captures enum value "10_YEAR"
	PeriodCertainType2Nr10YEAR PeriodCertainType2 = "10_YEAR"

	// PeriodCertainType2Nr20YEAR captures enum value "20_YEAR"
	PeriodCertainType2Nr20YEAR PeriodCertainType2 = "20_YEAR"

	// PeriodCertainType2Nr30YEAR captures enum value "30_YEAR"
	PeriodCertainType2Nr30YEAR PeriodCertainType2 = "30_YEAR"
)

// for schema
var periodCertainType2Enum []interface{}

func init() {
	var res []PeriodCertainType2
	if err := json.Unmarshal([]byte(`["NONE","5_YEAR","10_YEAR","20_YEAR","30_YEAR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		periodCertainType2Enum = append(periodCertainType2Enum, v)
	}
}

func (m PeriodCertainType2) validatePeriodCertainType2Enum(path, location string, value PeriodCertainType2) error {
	if err := validate.EnumCase(path, location, value, periodCertainType2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this period certain type2
func (m PeriodCertainType2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePeriodCertainType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this period certain type2 based on context it is used
func (m PeriodCertainType2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
