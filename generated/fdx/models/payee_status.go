// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PayeeStatus PayeeStatus
//
// Defines the payee lifecycle.<br/> * `ACTIVE`: Payee is ready to receive payments<br/> * `DELETED`: Payee has been deleted and will not move into any other state<br/> * `PENDING`: Payee is not ready to receive payments<br/> * `REJECTED`: Payee was found to be invalid and cannot to receive payments
//
// swagger:model PayeeStatus
type PayeeStatus string

func NewPayeeStatus(value PayeeStatus) *PayeeStatus {
	v := value
	return &v
}

const (

	// PayeeStatusACTIVE captures enum value "ACTIVE"
	PayeeStatusACTIVE PayeeStatus = "ACTIVE"

	// PayeeStatusDELETED captures enum value "DELETED"
	PayeeStatusDELETED PayeeStatus = "DELETED"

	// PayeeStatusPENDING captures enum value "PENDING"
	PayeeStatusPENDING PayeeStatus = "PENDING"

	// PayeeStatusREJECTED captures enum value "REJECTED"
	PayeeStatusREJECTED PayeeStatus = "REJECTED"
)

// for schema
var payeeStatusEnum []interface{}

func init() {
	var res []PayeeStatus
	if err := json.Unmarshal([]byte(`["ACTIVE","DELETED","PENDING","REJECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		payeeStatusEnum = append(payeeStatusEnum, v)
	}
}

func (m PayeeStatus) validatePayeeStatusEnum(path, location string, value PayeeStatus) error {
	if err := validate.EnumCase(path, location, value, payeeStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payee status
func (m PayeeStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePayeeStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this payee status based on context it is used
func (m PayeeStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
