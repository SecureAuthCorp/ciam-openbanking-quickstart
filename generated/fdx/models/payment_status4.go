// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PaymentStatus4 PaymentStatus4
//
// Defines the status of the payment
//
// swagger:model PaymentStatus4
type PaymentStatus4 string

func NewPaymentStatus4(value PaymentStatus4) *PaymentStatus4 {
	v := value
	return &v
}

const (

	// PaymentStatus4CANCELLED captures enum value "CANCELLED"
	PaymentStatus4CANCELLED PaymentStatus4 = "CANCELLED"

	// PaymentStatus4FAILED captures enum value "FAILED"
	PaymentStatus4FAILED PaymentStatus4 = "FAILED"

	// PaymentStatus4NOFUNDS captures enum value "NOFUNDS"
	PaymentStatus4NOFUNDS PaymentStatus4 = "NOFUNDS"

	// PaymentStatus4PROCESSED captures enum value "PROCESSED"
	PaymentStatus4PROCESSED PaymentStatus4 = "PROCESSED"

	// PaymentStatus4PROCESSING captures enum value "PROCESSING"
	PaymentStatus4PROCESSING PaymentStatus4 = "PROCESSING"

	// PaymentStatus4SCHEDULED captures enum value "SCHEDULED"
	PaymentStatus4SCHEDULED PaymentStatus4 = "SCHEDULED"
)

// for schema
var paymentStatus4Enum []interface{}

func init() {
	var res []PaymentStatus4
	if err := json.Unmarshal([]byte(`["CANCELLED","FAILED","NOFUNDS","PROCESSED","PROCESSING","SCHEDULED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentStatus4Enum = append(paymentStatus4Enum, v)
	}
}

func (m PaymentStatus4) validatePaymentStatus4Enum(path, location string, value PaymentStatus4) error {
	if err := validate.EnumCase(path, location, value, paymentStatus4Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payment status4
func (m PaymentStatus4) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePaymentStatus4Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this payment status4 based on context it is used
func (m PaymentStatus4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
