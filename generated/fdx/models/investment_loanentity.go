// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvestmentLoanentity InvestmentLoanentity
//
// Any loan information against an investment account
//
// swagger:model InvestmentLoanentity
type InvestmentLoanentity struct {

	// Current loan principal balance amount
	CurrentLoanBalance float64 `json:"currentLoanBalance,omitempty"`

	// Date and time of current loan balance
	// Example: 2021-07-15T14:46:41.375Z
	// Format: date-time
	DateAsOf strfmt.DateTime `json:"dateAsOf,omitempty"`

	// Initial loan balance amount
	InitialLoanBalance float64 `json:"initialLoanBalance,omitempty"`

	// Description of loan
	LoanDescription string `json:"loanDescription,omitempty"`

	// Unique identifier for this loan
	LoanID string `json:"loanId,omitempty"`

	// Total interest paid to date on this loan
	LoanInterestToDate float64 `json:"loanInterestToDate,omitempty"`

	// Expected loan end date
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	LoanMaturityDate strfmt.Date `json:"loanMaturityDate,omitempty"`

	// The next payment date for the loan
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	LoanNextPaymentDate strfmt.Date `json:"loanNextPaymentDate,omitempty"`

	// Loan payment amount
	LoanPaymentAmount float64 `json:"loanPaymentAmount,omitempty"`

	// loan payment frequency
	LoanPaymentFrequency LoanPaymentFrequency2 `json:"loanPaymentFrequency,omitempty"`

	// Initial number of loan payments
	LoanPaymentInitial float64 `json:"loanPaymentInitial,omitempty"`

	// Remaining number of loan payments
	LoanPaymentsRemaining int32 `json:"loanPaymentsRemaining,omitempty"`

	// Loan annual interest rate for the loan
	LoanRate float64 `json:"loanRate,omitempty"`

	// Start date of the loan
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	LoanStartDate strfmt.Date `json:"loanStartDate,omitempty"`

	// Total projected interest to be paid on this loan
	LoanTotalProjectedInterest float64 `json:"loanTotalProjectedInterest,omitempty"`
}

// Validate validates this investment loanentity
func (m *InvestmentLoanentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateAsOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanMaturityDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanNextPaymentDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanPaymentFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvestmentLoanentity) validateDateAsOf(formats strfmt.Registry) error {
	if swag.IsZero(m.DateAsOf) { // not required
		return nil
	}

	if err := validate.FormatOf("dateAsOf", "body", "date-time", m.DateAsOf.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InvestmentLoanentity) validateLoanMaturityDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LoanMaturityDate) { // not required
		return nil
	}

	if err := validate.FormatOf("loanMaturityDate", "body", "date", m.LoanMaturityDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InvestmentLoanentity) validateLoanNextPaymentDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LoanNextPaymentDate) { // not required
		return nil
	}

	if err := validate.FormatOf("loanNextPaymentDate", "body", "date", m.LoanNextPaymentDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InvestmentLoanentity) validateLoanPaymentFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.LoanPaymentFrequency) { // not required
		return nil
	}

	if err := m.LoanPaymentFrequency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("loanPaymentFrequency")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("loanPaymentFrequency")
		}
		return err
	}

	return nil
}

func (m *InvestmentLoanentity) validateLoanStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LoanStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("loanStartDate", "body", "date", m.LoanStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this investment loanentity based on the context it is used
func (m *InvestmentLoanentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLoanPaymentFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvestmentLoanentity) contextValidateLoanPaymentFrequency(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LoanPaymentFrequency.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("loanPaymentFrequency")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("loanPaymentFrequency")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvestmentLoanentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvestmentLoanentity) UnmarshalBinary(b []byte) error {
	var res InvestmentLoanentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
