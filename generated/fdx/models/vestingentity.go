// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Vestingentity Vestingentity
//
// Represents the vesting of ownership of an investment account
//
// swagger:model Vestingentity
type Vestingentity struct {

	// Other vested amount
	OtherVestAmount float64 `json:"otherVestAmount,omitempty"`

	// Other vested percentage
	OtherVestPercentage float64 `json:"otherVestPercentage,omitempty"`

	// Strike price
	StrikePrice float64 `json:"strikePrice,omitempty"`

	// Security symbol
	Symbol string `json:"symbol,omitempty"`

	// Unvested balance
	UnVestedBalance float64 `json:"unVestedBalance,omitempty"`

	// Unvested quantity
	UnVestedQuantity float64 `json:"unVestedQuantity,omitempty"`

	// Vested balance
	VestedBalance float64 `json:"vestedBalance,omitempty"`

	// Vested quantity
	VestedQuantity float64 `json:"vestedQuantity,omitempty"`

	// Vesting date
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	VestingDate strfmt.Date `json:"vestingDate,omitempty"`

	// Vesting percentage
	VestingPercentage float64 `json:"vestingPercentage,omitempty"`
}

// Validate validates this vestingentity
func (m *Vestingentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVestingDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Vestingentity) validateVestingDate(formats strfmt.Registry) error {
	if swag.IsZero(m.VestingDate) { // not required
		return nil
	}

	if err := validate.FormatOf("vestingDate", "body", "date", m.VestingDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vestingentity based on context it is used
func (m *Vestingentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Vestingentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Vestingentity) UnmarshalBinary(b []byte) error {
	var res Vestingentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
