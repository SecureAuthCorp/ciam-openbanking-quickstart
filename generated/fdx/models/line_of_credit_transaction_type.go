// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LineOfCreditTransactionType Line-Of-CreditTransactionType
//
// The type of a line-of-credit transaction
//
// swagger:model Line-Of-CreditTransactionType
type LineOfCreditTransactionType string

func NewLineOfCreditTransactionType(value LineOfCreditTransactionType) *LineOfCreditTransactionType {
	v := value
	return &v
}

const (

	// LineOfCreditTransactionTypeADJUSTMENT captures enum value "ADJUSTMENT"
	LineOfCreditTransactionTypeADJUSTMENT LineOfCreditTransactionType = "ADJUSTMENT"

	// LineOfCreditTransactionTypeCHECK captures enum value "CHECK"
	LineOfCreditTransactionTypeCHECK LineOfCreditTransactionType = "CHECK"

	// LineOfCreditTransactionTypeFEE captures enum value "FEE"
	LineOfCreditTransactionTypeFEE LineOfCreditTransactionType = "FEE"

	// LineOfCreditTransactionTypeINTEREST captures enum value "INTEREST"
	LineOfCreditTransactionTypeINTEREST LineOfCreditTransactionType = "INTEREST"

	// LineOfCreditTransactionTypePAYMENT captures enum value "PAYMENT"
	LineOfCreditTransactionTypePAYMENT LineOfCreditTransactionType = "PAYMENT"

	// LineOfCreditTransactionTypeWITHDRAWAL captures enum value "WITHDRAWAL"
	LineOfCreditTransactionTypeWITHDRAWAL LineOfCreditTransactionType = "WITHDRAWAL"
)

// for schema
var lineOfCreditTransactionTypeEnum []interface{}

func init() {
	var res []LineOfCreditTransactionType
	if err := json.Unmarshal([]byte(`["ADJUSTMENT","CHECK","FEE","INTEREST","PAYMENT","WITHDRAWAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lineOfCreditTransactionTypeEnum = append(lineOfCreditTransactionTypeEnum, v)
	}
}

func (m LineOfCreditTransactionType) validateLineOfCreditTransactionTypeEnum(path, location string, value LineOfCreditTransactionType) error {
	if err := validate.EnumCase(path, location, value, lineOfCreditTransactionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this line of credit transaction type
func (m LineOfCreditTransactionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLineOfCreditTransactionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this line of credit transaction type based on context it is used
func (m LineOfCreditTransactionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
