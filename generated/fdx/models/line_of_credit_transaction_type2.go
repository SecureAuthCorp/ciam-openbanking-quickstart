// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LineOfCreditTransactionType2 Line-Of-CreditTransactionType2
//
// CHECK, WITHDRAWAL, PAYMENT, FEE, ADJUSTMENT, INTEREST
//
// swagger:model Line-Of-CreditTransactionType2
type LineOfCreditTransactionType2 string

func NewLineOfCreditTransactionType2(value LineOfCreditTransactionType2) *LineOfCreditTransactionType2 {
	v := value
	return &v
}

const (

	// LineOfCreditTransactionType2ADJUSTMENT captures enum value "ADJUSTMENT"
	LineOfCreditTransactionType2ADJUSTMENT LineOfCreditTransactionType2 = "ADJUSTMENT"

	// LineOfCreditTransactionType2CHECK captures enum value "CHECK"
	LineOfCreditTransactionType2CHECK LineOfCreditTransactionType2 = "CHECK"

	// LineOfCreditTransactionType2FEE captures enum value "FEE"
	LineOfCreditTransactionType2FEE LineOfCreditTransactionType2 = "FEE"

	// LineOfCreditTransactionType2INTEREST captures enum value "INTEREST"
	LineOfCreditTransactionType2INTEREST LineOfCreditTransactionType2 = "INTEREST"

	// LineOfCreditTransactionType2PAYMENT captures enum value "PAYMENT"
	LineOfCreditTransactionType2PAYMENT LineOfCreditTransactionType2 = "PAYMENT"

	// LineOfCreditTransactionType2WITHDRAWAL captures enum value "WITHDRAWAL"
	LineOfCreditTransactionType2WITHDRAWAL LineOfCreditTransactionType2 = "WITHDRAWAL"
)

// for schema
var lineOfCreditTransactionType2Enum []interface{}

func init() {
	var res []LineOfCreditTransactionType2
	if err := json.Unmarshal([]byte(`["ADJUSTMENT","CHECK","FEE","INTEREST","PAYMENT","WITHDRAWAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lineOfCreditTransactionType2Enum = append(lineOfCreditTransactionType2Enum, v)
	}
}

func (m LineOfCreditTransactionType2) validateLineOfCreditTransactionType2Enum(path, location string, value LineOfCreditTransactionType2) error {
	if err := validate.EnumCase(path, location, value, lineOfCreditTransactionType2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this line of credit transaction type2
func (m LineOfCreditTransactionType2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLineOfCreditTransactionType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this line of credit transaction type2 based on context it is used
func (m LineOfCreditTransactionType2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
