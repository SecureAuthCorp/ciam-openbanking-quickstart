// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OptionType OptionType
//
// The type of a stock option
//
// swagger:model OptionType
type OptionType string

func NewOptionType(value OptionType) *OptionType {
	v := value
	return &v
}

const (

	// OptionTypeCALL captures enum value "CALL"
	OptionTypeCALL OptionType = "CALL"

	// OptionTypePUT captures enum value "PUT"
	OptionTypePUT OptionType = "PUT"
)

// for schema
var optionTypeEnum []interface{}

func init() {
	var res []OptionType
	if err := json.Unmarshal([]byte(`["CALL","PUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		optionTypeEnum = append(optionTypeEnum, v)
	}
}

func (m OptionType) validateOptionTypeEnum(path, location string, value OptionType) error {
	if err := validate.EnumCase(path, location, value, optionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this option type
func (m OptionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOptionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this option type based on context it is used
func (m OptionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
