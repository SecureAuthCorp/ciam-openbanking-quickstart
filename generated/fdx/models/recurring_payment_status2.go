// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RecurringPaymentStatus2 RecurringPaymentStatus2
//
// Defines the status of the recurring payment
//
// swagger:model RecurringPaymentStatus2
type RecurringPaymentStatus2 string

func NewRecurringPaymentStatus2(value RecurringPaymentStatus2) *RecurringPaymentStatus2 {
	v := value
	return &v
}

const (

	// RecurringPaymentStatus2CANCELLED captures enum value "CANCELLED"
	RecurringPaymentStatus2CANCELLED RecurringPaymentStatus2 = "CANCELLED"

	// RecurringPaymentStatus2FAILED captures enum value "FAILED"
	RecurringPaymentStatus2FAILED RecurringPaymentStatus2 = "FAILED"

	// RecurringPaymentStatus2PROCESSED captures enum value "PROCESSED"
	RecurringPaymentStatus2PROCESSED RecurringPaymentStatus2 = "PROCESSED"

	// RecurringPaymentStatus2SCHEDULED captures enum value "SCHEDULED"
	RecurringPaymentStatus2SCHEDULED RecurringPaymentStatus2 = "SCHEDULED"
)

// for schema
var recurringPaymentStatus2Enum []interface{}

func init() {
	var res []RecurringPaymentStatus2
	if err := json.Unmarshal([]byte(`["CANCELLED","FAILED","PROCESSED","SCHEDULED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recurringPaymentStatus2Enum = append(recurringPaymentStatus2Enum, v)
	}
}

func (m RecurringPaymentStatus2) validateRecurringPaymentStatus2Enum(path, location string, value RecurringPaymentStatus2) error {
	if err := validate.EnumCase(path, location, value, recurringPaymentStatus2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this recurring payment status2
func (m RecurringPaymentStatus2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRecurringPaymentStatus2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this recurring payment status2 based on context it is used
func (m RecurringPaymentStatus2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
