// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RewardProgramentity RewardProgramentity
//
// Reward program detail
//
// swagger:model RewardProgramentity
type RewardProgramentity struct {

	// Array of FI-specific attributes
	FiAttributes []*FIAttributeentity `json:"fiAttributes"`

	// Array of reward memberships
	Memberships []*RewardProgramMembershipentity `json:"memberships"`

	// Long term persistent identity of the reward program
	// Max Length: 256
	ProgramID string `json:"programId,omitempty"`

	// Name of reward program
	ProgramName string `json:"programName,omitempty"`

	// URL of reward program
	ProgramURL string `json:"programUrl,omitempty"`
}

// Validate validates this reward programentity
func (m *RewardProgramentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFiAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgramID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RewardProgramentity) validateFiAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.FiAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.FiAttributes); i++ {
		if swag.IsZero(m.FiAttributes[i]) { // not required
			continue
		}

		if m.FiAttributes[i] != nil {
			if err := m.FiAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fiAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fiAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RewardProgramentity) validateMemberships(formats strfmt.Registry) error {
	if swag.IsZero(m.Memberships) { // not required
		return nil
	}

	for i := 0; i < len(m.Memberships); i++ {
		if swag.IsZero(m.Memberships[i]) { // not required
			continue
		}

		if m.Memberships[i] != nil {
			if err := m.Memberships[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberships" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("memberships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RewardProgramentity) validateProgramID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProgramID) { // not required
		return nil
	}

	if err := validate.MaxLength("programId", "body", m.ProgramID, 256); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this reward programentity based on the context it is used
func (m *RewardProgramentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFiAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemberships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RewardProgramentity) contextValidateFiAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FiAttributes); i++ {

		if m.FiAttributes[i] != nil {
			if err := m.FiAttributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fiAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fiAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RewardProgramentity) contextValidateMemberships(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Memberships); i++ {

		if m.Memberships[i] != nil {
			if err := m.Memberships[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberships" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("memberships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RewardProgramentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RewardProgramentity) UnmarshalBinary(b []byte) error {
	var res RewardProgramentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
