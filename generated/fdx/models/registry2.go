// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Registry2 Registry2
//
// The Registry source
//
// swagger:model Registry2
type Registry2 string

func NewRegistry2(value Registry2) *Registry2 {
	v := value
	return &v
}

const (

	// Registry2PRIVATE captures enum value "PRIVATE"
	Registry2PRIVATE Registry2 = "PRIVATE"

	// Registry2FDX captures enum value "FDX"
	Registry2FDX Registry2 = "FDX"

	// Registry2GLEIF captures enum value "GLEIF"
	Registry2GLEIF Registry2 = "GLEIF"

	// Registry2ICANN captures enum value "ICANN"
	Registry2ICANN Registry2 = "ICANN"
)

// for schema
var registry2Enum []interface{}

func init() {
	var res []Registry2
	if err := json.Unmarshal([]byte(`["PRIVATE","FDX","GLEIF","ICANN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registry2Enum = append(registry2Enum, v)
	}
}

func (m Registry2) validateRegistry2Enum(path, location string, value Registry2) error {
	if err := validate.EnumCase(path, location, value, registry2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this registry2
func (m Registry2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRegistry2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this registry2 based on context it is used
func (m Registry2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
