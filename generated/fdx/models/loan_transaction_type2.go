// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LoanTransactionType2 LoanTransactionType2
//
// PAYMENT, FEE, ADJUSTMENT, INTEREST
//
// swagger:model LoanTransactionType2
type LoanTransactionType2 string

func NewLoanTransactionType2(value LoanTransactionType2) *LoanTransactionType2 {
	v := value
	return &v
}

const (

	// LoanTransactionType2ADJUSTMENT captures enum value "ADJUSTMENT"
	LoanTransactionType2ADJUSTMENT LoanTransactionType2 = "ADJUSTMENT"

	// LoanTransactionType2FEE captures enum value "FEE"
	LoanTransactionType2FEE LoanTransactionType2 = "FEE"

	// LoanTransactionType2INTEREST captures enum value "INTEREST"
	LoanTransactionType2INTEREST LoanTransactionType2 = "INTEREST"

	// LoanTransactionType2PAYMENT captures enum value "PAYMENT"
	LoanTransactionType2PAYMENT LoanTransactionType2 = "PAYMENT"

	// LoanTransactionType2LUMPSUMPAYMENT captures enum value "LUMP_SUM_PAYMENT"
	LoanTransactionType2LUMPSUMPAYMENT LoanTransactionType2 = "LUMP_SUM_PAYMENT"

	// LoanTransactionType2SKIPPAYMENT captures enum value "SKIP_PAYMENT"
	LoanTransactionType2SKIPPAYMENT LoanTransactionType2 = "SKIP_PAYMENT"

	// LoanTransactionType2DOUBLEUPPAYMENT captures enum value "DOUBLE_UP_PAYMENT"
	LoanTransactionType2DOUBLEUPPAYMENT LoanTransactionType2 = "DOUBLE_UP_PAYMENT"

	// LoanTransactionType2PAYOFF captures enum value "PAYOFF"
	LoanTransactionType2PAYOFF LoanTransactionType2 = "PAYOFF"
)

// for schema
var loanTransactionType2Enum []interface{}

func init() {
	var res []LoanTransactionType2
	if err := json.Unmarshal([]byte(`["ADJUSTMENT","FEE","INTEREST","PAYMENT","LUMP_SUM_PAYMENT","SKIP_PAYMENT","DOUBLE_UP_PAYMENT","PAYOFF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loanTransactionType2Enum = append(loanTransactionType2Enum, v)
	}
}

func (m LoanTransactionType2) validateLoanTransactionType2Enum(path, location string, value LoanTransactionType2) error {
	if err := validate.EnumCase(path, location, value, loanTransactionType2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this loan transaction type2
func (m LoanTransactionType2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLoanTransactionType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this loan transaction type2 based on context it is used
func (m LoanTransactionType2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
