// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RewardProgramMembershipentity RewardProgramMembershipentity
//
// Details of a single membership in a reward programs
//
// swagger:model RewardProgramMembershipentity
type RewardProgramMembershipentity struct {

	// accountIds associated to the reward program
	// Unique: true
	AccountIds []string `json:"accountIds"`

	// Array of balances
	// Min Items: 1
	Balances []*RewardBalanceentity `json:"balances"`

	// business or consumer
	BusinessOrConsumer BusinessorConsumerType2 `json:"businessOrConsumer,omitempty"`

	// Long-term persistent identity of the associated Customer
	// Max Length: 256
	CustomerID string `json:"customerId,omitempty"`

	// Long term persistent identity of the program member
	// Max Length: 256
	MemberID string `json:"memberId,omitempty"`

	// Reward program membership number
	MemberNumber string `json:"memberNumber,omitempty"`

	// If the reward program is tiered, member's current tier
	MemberTier string `json:"memberTier,omitempty"`
}

// Validate validates this reward program membershipentity
func (m *RewardProgramMembershipentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessOrConsumer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RewardProgramMembershipentity) validateAccountIds(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("accountIds", "body", m.AccountIds); err != nil {
		return err
	}

	for i := 0; i < len(m.AccountIds); i++ {

		if err := validate.MaxLength("accountIds"+"."+strconv.Itoa(i), "body", m.AccountIds[i], 256); err != nil {
			return err
		}

	}

	return nil
}

func (m *RewardProgramMembershipentity) validateBalances(formats strfmt.Registry) error {
	if swag.IsZero(m.Balances) { // not required
		return nil
	}

	iBalancesSize := int64(len(m.Balances))

	if err := validate.MinItems("balances", "body", iBalancesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Balances); i++ {
		if swag.IsZero(m.Balances[i]) { // not required
			continue
		}

		if m.Balances[i] != nil {
			if err := m.Balances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("balances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("balances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RewardProgramMembershipentity) validateBusinessOrConsumer(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessOrConsumer) { // not required
		return nil
	}

	if err := m.BusinessOrConsumer.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("businessOrConsumer")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("businessOrConsumer")
		}
		return err
	}

	return nil
}

func (m *RewardProgramMembershipentity) validateCustomerID(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerID) { // not required
		return nil
	}

	if err := validate.MaxLength("customerId", "body", m.CustomerID, 256); err != nil {
		return err
	}

	return nil
}

func (m *RewardProgramMembershipentity) validateMemberID(formats strfmt.Registry) error {
	if swag.IsZero(m.MemberID) { // not required
		return nil
	}

	if err := validate.MaxLength("memberId", "body", m.MemberID, 256); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this reward program membershipentity based on the context it is used
func (m *RewardProgramMembershipentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBalances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBusinessOrConsumer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RewardProgramMembershipentity) contextValidateBalances(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Balances); i++ {

		if m.Balances[i] != nil {
			if err := m.Balances[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("balances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("balances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RewardProgramMembershipentity) contextValidateBusinessOrConsumer(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BusinessOrConsumer.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("businessOrConsumer")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("businessOrConsumer")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RewardProgramMembershipentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RewardProgramMembershipentity) UnmarshalBinary(b []byte) error {
	var res RewardProgramMembershipentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
