// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RewardType RewardType
//
// The type of the reward balance.  Example: a reward program awarding "Stars" for purchases would use the `POINTS` reward type.<br/> * `CASHBACK`: Rewards balances enumerated using a monetary amount<br/> * `MILES`: Rewards balances enumerated using distance<br/> * `POINTS`: Default when a reward balance is not of type CASHBACK or MILES
//
// swagger:model RewardType
type RewardType string

func NewRewardType(value RewardType) *RewardType {
	v := value
	return &v
}

const (

	// RewardTypeCASHBACK captures enum value "CASHBACK"
	RewardTypeCASHBACK RewardType = "CASHBACK"

	// RewardTypeMILES captures enum value "MILES"
	RewardTypeMILES RewardType = "MILES"

	// RewardTypePOINTS captures enum value "POINTS"
	RewardTypePOINTS RewardType = "POINTS"
)

// for schema
var rewardTypeEnum []interface{}

func init() {
	var res []RewardType
	if err := json.Unmarshal([]byte(`["CASHBACK","MILES","POINTS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rewardTypeEnum = append(rewardTypeEnum, v)
	}
}

func (m RewardType) validateRewardTypeEnum(path, location string, value RewardType) error {
	if err := validate.EnumCase(path, location, value, rewardTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this reward type
func (m RewardType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRewardTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this reward type based on context it is used
func (m RewardType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
