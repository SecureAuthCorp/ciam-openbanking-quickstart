// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Recurringpaymentdurationtypeenum2 Recurringpaymentdurationtypeenum2
//
// Type of duration
//
// swagger:model Recurringpaymentdurationtypeenum2
type Recurringpaymentdurationtypeenum2 string

func NewRecurringpaymentdurationtypeenum2(value Recurringpaymentdurationtypeenum2) *Recurringpaymentdurationtypeenum2 {
	v := value
	return &v
}

const (

	// Recurringpaymentdurationtypeenum2NOEND captures enum value "NOEND"
	Recurringpaymentdurationtypeenum2NOEND Recurringpaymentdurationtypeenum2 = "NOEND"

	// Recurringpaymentdurationtypeenum2NUMBEROFTIMES captures enum value "NUMBEROFTIMES"
	Recurringpaymentdurationtypeenum2NUMBEROFTIMES Recurringpaymentdurationtypeenum2 = "NUMBEROFTIMES"
)

// for schema
var recurringpaymentdurationtypeenum2Enum []interface{}

func init() {
	var res []Recurringpaymentdurationtypeenum2
	if err := json.Unmarshal([]byte(`["NOEND","NUMBEROFTIMES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recurringpaymentdurationtypeenum2Enum = append(recurringpaymentdurationtypeenum2Enum, v)
	}
}

func (m Recurringpaymentdurationtypeenum2) validateRecurringpaymentdurationtypeenum2Enum(path, location string, value Recurringpaymentdurationtypeenum2) error {
	if err := validate.EnumCase(path, location, value, recurringpaymentdurationtypeenum2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this recurringpaymentdurationtypeenum2
func (m Recurringpaymentdurationtypeenum2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRecurringpaymentdurationtypeenum2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this recurringpaymentdurationtypeenum2 based on context it is used
func (m Recurringpaymentdurationtypeenum2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
