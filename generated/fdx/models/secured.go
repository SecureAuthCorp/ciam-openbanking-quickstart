// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Secured Secured
//
// How the option is secured
//
// swagger:model Secured
type Secured string

func NewSecured(value Secured) *Secured {
	v := value
	return &v
}

const (

	// SecuredCOVERED captures enum value "COVERED"
	SecuredCOVERED Secured = "COVERED"

	// SecuredNAKED captures enum value "NAKED"
	SecuredNAKED Secured = "NAKED"
)

// for schema
var securedEnum []interface{}

func init() {
	var res []Secured
	if err := json.Unmarshal([]byte(`["COVERED","NAKED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securedEnum = append(securedEnum, v)
	}
}

func (m Secured) validateSecuredEnum(path, location string, value Secured) error {
	if err := validate.EnumCase(path, location, value, securedEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this secured
func (m Secured) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecuredEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this secured based on context it is used
func (m Secured) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
