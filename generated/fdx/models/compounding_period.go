// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CompoundingPeriod CompoundingPeriod
//
// Interest compounding Period
//
// swagger:model CompoundingPeriod
type CompoundingPeriod string

func NewCompoundingPeriod(value CompoundingPeriod) *CompoundingPeriod {
	v := value
	return &v
}

const (

	// CompoundingPeriodANNUALLY captures enum value "ANNUALLY"
	CompoundingPeriodANNUALLY CompoundingPeriod = "ANNUALLY"

	// CompoundingPeriodBIWEEKLY captures enum value "BIWEEKLY"
	CompoundingPeriodBIWEEKLY CompoundingPeriod = "BIWEEKLY"

	// CompoundingPeriodDAILY captures enum value "DAILY"
	CompoundingPeriodDAILY CompoundingPeriod = "DAILY"

	// CompoundingPeriodMONTHLY captures enum value "MONTHLY"
	CompoundingPeriodMONTHLY CompoundingPeriod = "MONTHLY"

	// CompoundingPeriodSEMIANNUALLY captures enum value "SEMIANNUALLY"
	CompoundingPeriodSEMIANNUALLY CompoundingPeriod = "SEMIANNUALLY"

	// CompoundingPeriodSEMIMONTHLY captures enum value "SEMIMONTHLY"
	CompoundingPeriodSEMIMONTHLY CompoundingPeriod = "SEMIMONTHLY"

	// CompoundingPeriodWEEKLY captures enum value "WEEKLY"
	CompoundingPeriodWEEKLY CompoundingPeriod = "WEEKLY"
)

// for schema
var compoundingPeriodEnum []interface{}

func init() {
	var res []CompoundingPeriod
	if err := json.Unmarshal([]byte(`["ANNUALLY","BIWEEKLY","DAILY","MONTHLY","SEMIANNUALLY","SEMIMONTHLY","WEEKLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		compoundingPeriodEnum = append(compoundingPeriodEnum, v)
	}
}

func (m CompoundingPeriod) validateCompoundingPeriodEnum(path, location string, value CompoundingPeriod) error {
	if err := validate.EnumCase(path, location, value, compoundingPeriodEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this compounding period
func (m CompoundingPeriod) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCompoundingPeriodEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this compounding period based on context it is used
func (m CompoundingPeriod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
