// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrderDuration OrderDuration
//
// The duration of the order
//
// swagger:model OrderDuration
type OrderDuration string

func NewOrderDuration(value OrderDuration) *OrderDuration {
	v := value
	return &v
}

const (

	// OrderDurationDAY captures enum value "DAY"
	OrderDurationDAY OrderDuration = "DAY"

	// OrderDurationGOODTILLCANCEL captures enum value "GOODTILLCANCEL"
	OrderDurationGOODTILLCANCEL OrderDuration = "GOODTILLCANCEL"

	// OrderDurationIMMEDIATE captures enum value "IMMEDIATE"
	OrderDurationIMMEDIATE OrderDuration = "IMMEDIATE"
)

// for schema
var orderDurationEnum []interface{}

func init() {
	var res []OrderDuration
	if err := json.Unmarshal([]byte(`["DAY","GOODTILLCANCEL","IMMEDIATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderDurationEnum = append(orderDurationEnum, v)
	}
}

func (m OrderDuration) validateOrderDurationEnum(path, location string, value OrderDuration) error {
	if err := validate.EnumCase(path, location, value, orderDurationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this order duration
func (m OrderDuration) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrderDurationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this order duration based on context it is used
func (m OrderDuration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
