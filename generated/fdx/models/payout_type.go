// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PayoutType PayoutType
//
// Indicates a type of payout such as immediate or deferred.<br/> <br/> | Value | Description |<br/> |-----|-----|<br/> | DEFERRED | Deferred payout starts at a predetermined date in the future |<br/> | IMMEDIATE | Immediate payout begins paying out shortly after the annuity is purchased |
//
// swagger:model PayoutType
type PayoutType string

func NewPayoutType(value PayoutType) *PayoutType {
	v := value
	return &v
}

const (

	// PayoutTypeDEFERRED captures enum value "DEFERRED"
	PayoutTypeDEFERRED PayoutType = "DEFERRED"

	// PayoutTypeIMMEDIATE captures enum value "IMMEDIATE"
	PayoutTypeIMMEDIATE PayoutType = "IMMEDIATE"
)

// for schema
var payoutTypeEnum []interface{}

func init() {
	var res []PayoutType
	if err := json.Unmarshal([]byte(`["DEFERRED","IMMEDIATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		payoutTypeEnum = append(payoutTypeEnum, v)
	}
}

func (m PayoutType) validatePayoutTypeEnum(path, location string, value PayoutType) error {
	if err := validate.EnumCase(path, location, value, payoutTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payout type
func (m PayoutType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePayoutTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this payout type based on context it is used
func (m PayoutType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
