// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Partyentity Partyentity
//
// FDX Participant - an entity or person that is a part of a FDX API transaction
//
// swagger:model Partyentity
type Partyentity struct {

	// URI for party, where an end user could learn more about the company or application involved in the data sharing chain
	HomeURI string `json:"homeUri,omitempty"`

	// URI for a logo asset to be displayed to the end user
	LogoURI string `json:"logoUri,omitempty"`

	// Human recognizable common name
	// Required: true
	Name *string `json:"name"`

	// Registered id of party
	RegisteredEntityID string `json:"registeredEntityId,omitempty"`

	// Registered name of party
	RegisteredEntityName string `json:"registeredEntityName,omitempty"`

	// registry
	Registry PartyRegistry2 `json:"registry,omitempty"`

	// type
	// Required: true
	Type *PartyType2 `json:"type"`
}

// Validate validates this partyentity
func (m *Partyentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Partyentity) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Partyentity) validateRegistry(formats strfmt.Registry) error {
	if swag.IsZero(m.Registry) { // not required
		return nil
	}

	if err := m.Registry.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("registry")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("registry")
		}
		return err
	}

	return nil
}

func (m *Partyentity) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this partyentity based on the context it is used
func (m *Partyentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegistry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Partyentity) contextValidateRegistry(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Registry.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("registry")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("registry")
		}
		return err
	}

	return nil
}

func (m *Partyentity) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Partyentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Partyentity) UnmarshalBinary(b []byte) error {
	var res Partyentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
