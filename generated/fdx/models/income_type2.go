// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// IncomeType2 IncomeType2
//
// Type of investment income. One of CGLONG (capital gains-long term), CGSHORT (capital gains-short term), MISC
//
// swagger:model IncomeType2
type IncomeType2 string

func NewIncomeType2(value IncomeType2) *IncomeType2 {
	v := value
	return &v
}

const (

	// IncomeType2CGLONG captures enum value "CGLONG"
	IncomeType2CGLONG IncomeType2 = "CGLONG"

	// IncomeType2CGSHORT captures enum value "CGSHORT"
	IncomeType2CGSHORT IncomeType2 = "CGSHORT"

	// IncomeType2MISC captures enum value "MISC"
	IncomeType2MISC IncomeType2 = "MISC"
)

// for schema
var incomeType2Enum []interface{}

func init() {
	var res []IncomeType2
	if err := json.Unmarshal([]byte(`["CGLONG","CGSHORT","MISC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		incomeType2Enum = append(incomeType2Enum, v)
	}
}

func (m IncomeType2) validateIncomeType2Enum(path, location string, value IncomeType2) error {
	if err := validate.EnumCase(path, location, value, incomeType2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this income type2
func (m IncomeType2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateIncomeType2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this income type2 based on context it is used
func (m IncomeType2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
