// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RewardBalanceentity RewardBalanceentity
//
// Reward program balance
//
// swagger:model RewardBalanceentity
type RewardBalanceentity struct {

	// Total units accrued in the current program year at time of download
	// Minimum: 0
	AccruedYtd *float64 `json:"accruedYtd,omitempty"`

	// Total units available for redemption at time of download
	Balance float64 `json:"balance,omitempty"`

	// Array of FI-specific attributes
	FiAttributes []*FIAttributeentity `json:"fiAttributes"`

	// Name used to denominate the balance
	Name string `json:"name,omitempty"`

	// Balance used for qualifying purposes
	Qualifying *bool `json:"qualifying,omitempty"`

	// Total units redeemed in the current program year at time of download
	// Minimum: 0
	RedeemedYtd *float64 `json:"redeemedYtd,omitempty"`

	// type
	Type RewardType2 `json:"type,omitempty"`
}

// Validate validates this reward balanceentity
func (m *RewardBalanceentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccruedYtd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedeemedYtd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RewardBalanceentity) validateAccruedYtd(formats strfmt.Registry) error {
	if swag.IsZero(m.AccruedYtd) { // not required
		return nil
	}

	if err := validate.Minimum("accruedYtd", "body", *m.AccruedYtd, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *RewardBalanceentity) validateFiAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.FiAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.FiAttributes); i++ {
		if swag.IsZero(m.FiAttributes[i]) { // not required
			continue
		}

		if m.FiAttributes[i] != nil {
			if err := m.FiAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fiAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fiAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RewardBalanceentity) validateRedeemedYtd(formats strfmt.Registry) error {
	if swag.IsZero(m.RedeemedYtd) { // not required
		return nil
	}

	if err := validate.Minimum("redeemedYtd", "body", *m.RedeemedYtd, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *RewardBalanceentity) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this reward balanceentity based on the context it is used
func (m *RewardBalanceentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFiAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RewardBalanceentity) contextValidateFiAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FiAttributes); i++ {

		if m.FiAttributes[i] != nil {
			if err := m.FiAttributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fiAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fiAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RewardBalanceentity) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RewardBalanceentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RewardBalanceentity) UnmarshalBinary(b []byte) error {
	var res RewardBalanceentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
