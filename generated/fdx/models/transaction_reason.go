// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TransactionReason TransactionReason
//
// The reason for an investment transaction
//
// swagger:model TransactionReason
type TransactionReason string

func NewTransactionReason(value TransactionReason) *TransactionReason {
	v := value
	return &v
}

const (

	// TransactionReasonCALL captures enum value "CALL"
	TransactionReasonCALL TransactionReason = "CALL"

	// TransactionReasonMATURITY captures enum value "MATURITY"
	TransactionReasonMATURITY TransactionReason = "MATURITY"

	// TransactionReasonSELL captures enum value "SELL"
	TransactionReasonSELL TransactionReason = "SELL"
)

// for schema
var transactionReasonEnum []interface{}

func init() {
	var res []TransactionReason
	if err := json.Unmarshal([]byte(`["CALL","MATURITY","SELL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionReasonEnum = append(transactionReasonEnum, v)
	}
}

func (m TransactionReason) validateTransactionReasonEnum(path, location string, value TransactionReason) error {
	if err := validate.EnumCase(path, location, value, transactionReasonEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this transaction reason
func (m TransactionReason) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTransactionReasonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this transaction reason based on context it is used
func (m TransactionReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
