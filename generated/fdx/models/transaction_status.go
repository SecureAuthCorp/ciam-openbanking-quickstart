// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TransactionStatus TransactionStatus
//
// The status of a transaction
//
// swagger:model TransactionStatus
type TransactionStatus string

func NewTransactionStatus(value TransactionStatus) *TransactionStatus {
	v := value
	return &v
}

const (

	// TransactionStatusAUTHORIZATION captures enum value "AUTHORIZATION"
	TransactionStatusAUTHORIZATION TransactionStatus = "AUTHORIZATION"

	// TransactionStatusMEMO captures enum value "MEMO"
	TransactionStatusMEMO TransactionStatus = "MEMO"

	// TransactionStatusPENDING captures enum value "PENDING"
	TransactionStatusPENDING TransactionStatus = "PENDING"

	// TransactionStatusPOSTED captures enum value "POSTED"
	TransactionStatusPOSTED TransactionStatus = "POSTED"
)

// for schema
var transactionStatusEnum []interface{}

func init() {
	var res []TransactionStatus
	if err := json.Unmarshal([]byte(`["AUTHORIZATION","MEMO","PENDING","POSTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionStatusEnum = append(transactionStatusEnum, v)
	}
}

func (m TransactionStatus) validateTransactionStatusEnum(path, location string, value TransactionStatus) error {
	if err := validate.EnumCase(path, location, value, transactionStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this transaction status
func (m TransactionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTransactionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this transaction status based on context it is used
func (m TransactionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
