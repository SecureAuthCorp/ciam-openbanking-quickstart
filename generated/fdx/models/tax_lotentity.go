// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaxLotentity TaxLotentity
//
// Block of securities receiving the same tax treatment
//
// swagger:model TaxLotentity
type TaxLotentity struct {

	// Total amount of money spent acquiring this lot including any fees or commission expenses incurred
	CostBasis float64 `json:"costBasis,omitempty"`

	// Lot market value
	CurrentValue float64 `json:"currentValue,omitempty"`

	// Lot acquired date
	// Example: 2021-07-15T00:00:00.000Z
	// Format: date
	OriginalPurchaseDate strfmt.Date `json:"originalPurchaseDate,omitempty"`

	// position type
	PositionType PositionType1 `json:"positionType,omitempty"`

	// Original purchase price
	PurchasedPrice float64 `json:"purchasedPrice,omitempty"`

	// Lot quantity
	Quantity float64 `json:"quantity,omitempty"`
}

// Validate validates this tax lotentity
func (m *TaxLotentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOriginalPurchaseDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePositionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaxLotentity) validateOriginalPurchaseDate(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginalPurchaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("originalPurchaseDate", "body", "date", m.OriginalPurchaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaxLotentity) validatePositionType(formats strfmt.Registry) error {
	if swag.IsZero(m.PositionType) { // not required
		return nil
	}

	if err := m.PositionType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("positionType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("positionType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this tax lotentity based on the context it is used
func (m *TaxLotentity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePositionType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaxLotentity) contextValidatePositionType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PositionType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("positionType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("positionType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaxLotentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaxLotentity) UnmarshalBinary(b []byte) error {
	var res TaxLotentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
