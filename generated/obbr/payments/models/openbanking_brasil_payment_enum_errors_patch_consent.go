// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilPaymentEnumErrorsPatchConsent EnumErrorsPatchConsent
//
// Cdigos de erros previstos na revogao do consentimento de pagamento:
//  INFORMACAO_USUARIO_REQUERIDA - O campo data.revocation.loggedUser deve ser preenchido quando a revogao for feita pelo usurio final, ou seja, se o campo data.revocation.revokedBy estiver com o valor USER.
//  OPERACAO_NAO_PERMITIDA_STATUS: O consentimento s pode ser revogado nos status CONSUMED.
//  OPERACAO_NAO_SUPORTADA_TIPO_CONSENTIMENTO: Somente consentimentos para pagamentos agendados podem ser revogados, ou seja, que possuam o campo data.payment.schedule preenchido.
//  TEMPO_LIMITE_REVOGACAO_EXCEDIDO: O consentimento s pode ser revogado at o dia anterior, ou seja, a meia noite no fuso horrio de Braslia do dia imediatamente anterior a data alvo da liquidao do pagamento.
//  MOTIVO_REVOGACAO_NAO_PERMITIDO: Os motivos de revogao do consentimento: FRAUD e ACCOUNT_CLOSURE s podem ser usados caso o campo: data.revocation.revokedBy tenha o valor TPP ou ASPSP, ou seja, somente no caso de revogao unilateral pela iniciadora ou detentora.
//  INFORMACAO_ADICIONAL_REVOGACAO_REQUERIDA: O campo data.revocation.reason.additionalInformation  obrigatrio quando a revogao for feita pela iniciadora ou pela detentora unilateralmente, ou seja, o campo revokedBy igual a TPP ou ASPSP e o motivo de revogao for OTHER.
// Example: OPERACAO_NAO_PERMITIDA_STATUS
//
// swagger:model OpenbankingBrasilPaymentEnumErrorsPatchConsent
type OpenbankingBrasilPaymentEnumErrorsPatchConsent string

func NewOpenbankingBrasilPaymentEnumErrorsPatchConsent(value OpenbankingBrasilPaymentEnumErrorsPatchConsent) *OpenbankingBrasilPaymentEnumErrorsPatchConsent {
	v := value
	return &v
}

const (

	// OpenbankingBrasilPaymentEnumErrorsPatchConsentINFORMACAOUSUARIOREQUERIDA captures enum value "INFORMACAO_USUARIO_REQUERIDA"
	OpenbankingBrasilPaymentEnumErrorsPatchConsentINFORMACAOUSUARIOREQUERIDA OpenbankingBrasilPaymentEnumErrorsPatchConsent = "INFORMACAO_USUARIO_REQUERIDA"

	// OpenbankingBrasilPaymentEnumErrorsPatchConsentOPERACAONAOPERMITIDASTATUS captures enum value "OPERACAO_NAO_PERMITIDA_STATUS"
	OpenbankingBrasilPaymentEnumErrorsPatchConsentOPERACAONAOPERMITIDASTATUS OpenbankingBrasilPaymentEnumErrorsPatchConsent = "OPERACAO_NAO_PERMITIDA_STATUS"

	// OpenbankingBrasilPaymentEnumErrorsPatchConsentOPERACAONAOSUPORTADATIPOCONSENTIMENTO captures enum value "OPERACAO_NAO_SUPORTADA_TIPO_CONSENTIMENTO"
	OpenbankingBrasilPaymentEnumErrorsPatchConsentOPERACAONAOSUPORTADATIPOCONSENTIMENTO OpenbankingBrasilPaymentEnumErrorsPatchConsent = "OPERACAO_NAO_SUPORTADA_TIPO_CONSENTIMENTO"

	// OpenbankingBrasilPaymentEnumErrorsPatchConsentTEMPOLIMITEREVOGACAOEXCEDIDO captures enum value "TEMPO_LIMITE_REVOGACAO_EXCEDIDO"
	OpenbankingBrasilPaymentEnumErrorsPatchConsentTEMPOLIMITEREVOGACAOEXCEDIDO OpenbankingBrasilPaymentEnumErrorsPatchConsent = "TEMPO_LIMITE_REVOGACAO_EXCEDIDO"

	// OpenbankingBrasilPaymentEnumErrorsPatchConsentMOTIVOREVOGACAONAOPERMITIDO captures enum value "MOTIVO_REVOGACAO_NAO_PERMITIDO"
	OpenbankingBrasilPaymentEnumErrorsPatchConsentMOTIVOREVOGACAONAOPERMITIDO OpenbankingBrasilPaymentEnumErrorsPatchConsent = "MOTIVO_REVOGACAO_NAO_PERMITIDO"

	// OpenbankingBrasilPaymentEnumErrorsPatchConsentINFORMACAOADICIONALREVOGACAOREQUERIDA captures enum value "INFORMACAO_ADICIONAL_REVOGACAO_REQUERIDA"
	OpenbankingBrasilPaymentEnumErrorsPatchConsentINFORMACAOADICIONALREVOGACAOREQUERIDA OpenbankingBrasilPaymentEnumErrorsPatchConsent = "INFORMACAO_ADICIONAL_REVOGACAO_REQUERIDA"
)

// for schema
var openbankingBrasilPaymentEnumErrorsPatchConsentEnum []interface{}

func init() {
	var res []OpenbankingBrasilPaymentEnumErrorsPatchConsent
	if err := json.Unmarshal([]byte(`["INFORMACAO_USUARIO_REQUERIDA","OPERACAO_NAO_PERMITIDA_STATUS","OPERACAO_NAO_SUPORTADA_TIPO_CONSENTIMENTO","TEMPO_LIMITE_REVOGACAO_EXCEDIDO","MOTIVO_REVOGACAO_NAO_PERMITIDO","INFORMACAO_ADICIONAL_REVOGACAO_REQUERIDA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openbankingBrasilPaymentEnumErrorsPatchConsentEnum = append(openbankingBrasilPaymentEnumErrorsPatchConsentEnum, v)
	}
}

func (m OpenbankingBrasilPaymentEnumErrorsPatchConsent) validateOpenbankingBrasilPaymentEnumErrorsPatchConsentEnum(path, location string, value OpenbankingBrasilPaymentEnumErrorsPatchConsent) error {
	if err := validate.EnumCase(path, location, value, openbankingBrasilPaymentEnumErrorsPatchConsentEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openbanking brasil payment enum errors patch consent
func (m OpenbankingBrasilPaymentEnumErrorsPatchConsent) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenbankingBrasilPaymentEnumErrorsPatchConsentEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openbanking brasil payment enum errors patch consent based on context it is used
func (m OpenbankingBrasilPaymentEnumErrorsPatchConsent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
