// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilPaymentCode Code
//
// Cdigos de erros previstos na criao de consentimento para a iniciao de pagamentos:
//  FORMA_PGTO_INVALIDA: Forma de pagamento invlida.
//  DATA_PGTO_INVALIDA: Data de pagamento invlida.
//  DETALHE_PGTO_INVALIDO: Detalhe do pagamento invlido.
//  NAO_INFORMADO: No informado.
// Example: FORMA_PGTO_INVALIDA
//
// swagger:model OpenbankingBrasilPaymentCode
type OpenbankingBrasilPaymentCode string

func NewOpenbankingBrasilPaymentCode(value OpenbankingBrasilPaymentCode) *OpenbankingBrasilPaymentCode {
	v := value
	return &v
}

const (

	// OpenbankingBrasilPaymentCodeFORMAPGTOINVALIDA captures enum value "FORMA_PGTO_INVALIDA"
	OpenbankingBrasilPaymentCodeFORMAPGTOINVALIDA OpenbankingBrasilPaymentCode = "FORMA_PGTO_INVALIDA"

	// OpenbankingBrasilPaymentCodeDATAPGTOINVALIDA captures enum value "DATA_PGTO_INVALIDA"
	OpenbankingBrasilPaymentCodeDATAPGTOINVALIDA OpenbankingBrasilPaymentCode = "DATA_PGTO_INVALIDA"

	// OpenbankingBrasilPaymentCodeDETALHEPGTOINVALIDO captures enum value "DETALHE_PGTO_INVALIDO"
	OpenbankingBrasilPaymentCodeDETALHEPGTOINVALIDO OpenbankingBrasilPaymentCode = "DETALHE_PGTO_INVALIDO"

	// OpenbankingBrasilPaymentCodeNAOINFORMADO captures enum value "NAO_INFORMADO"
	OpenbankingBrasilPaymentCodeNAOINFORMADO OpenbankingBrasilPaymentCode = "NAO_INFORMADO"
)

// for schema
var openbankingBrasilPaymentCodeEnum []interface{}

func init() {
	var res []OpenbankingBrasilPaymentCode
	if err := json.Unmarshal([]byte(`["FORMA_PGTO_INVALIDA","DATA_PGTO_INVALIDA","DETALHE_PGTO_INVALIDO","NAO_INFORMADO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openbankingBrasilPaymentCodeEnum = append(openbankingBrasilPaymentCodeEnum, v)
	}
}

func (m OpenbankingBrasilPaymentCode) validateOpenbankingBrasilPaymentCodeEnum(path, location string, value OpenbankingBrasilPaymentCode) error {
	if err := validate.EnumCase(path, location, value, openbankingBrasilPaymentCodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openbanking brasil payment code
func (m OpenbankingBrasilPaymentCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenbankingBrasilPaymentCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openbanking brasil payment code based on context it is used
func (m OpenbankingBrasilPaymentCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
