// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilPaymentEnumAuthorisationStatusType EnumAuthorisationStatusType
//
// Retorna o estado do consentimento, o qual no momento de sua criao ser AWAITING_AUTHORISATION.
// Este estado ser alterado depois da autorizao do consentimento na detentora da conta do pagador (Debtor) para AUTHORISED, REJECTED ou REVOKED.
// O consentimento fica no estado CONSUMED aps ocorrer a iniciao do pagamento referente ao consentimento.
// Em caso de consentimento expirado a detentora dever retornar o status REJECTED.
// Em caso de revogao do consentimento a detentora dever retornar o status REVOKED.
// Estados possveis:
// AWAITING_AUTHORISATION - Aguardando autorizao
// AUTHORISED - Autorizado
// REJECTED - Rejeitado
// CONSUMED - Consumido
// REVOKED - Revogado
// Example: REVOKED
//
// swagger:model OpenbankingBrasilPaymentEnumAuthorisationStatusType
type OpenbankingBrasilPaymentEnumAuthorisationStatusType string

func NewOpenbankingBrasilPaymentEnumAuthorisationStatusType(value OpenbankingBrasilPaymentEnumAuthorisationStatusType) *OpenbankingBrasilPaymentEnumAuthorisationStatusType {
	v := value
	return &v
}

const (

	// OpenbankingBrasilPaymentEnumAuthorisationStatusTypeAWAITINGAUTHORISATION captures enum value "AWAITING_AUTHORISATION"
	OpenbankingBrasilPaymentEnumAuthorisationStatusTypeAWAITINGAUTHORISATION OpenbankingBrasilPaymentEnumAuthorisationStatusType = "AWAITING_AUTHORISATION"

	// OpenbankingBrasilPaymentEnumAuthorisationStatusTypeAUTHORISED captures enum value "AUTHORISED"
	OpenbankingBrasilPaymentEnumAuthorisationStatusTypeAUTHORISED OpenbankingBrasilPaymentEnumAuthorisationStatusType = "AUTHORISED"

	// OpenbankingBrasilPaymentEnumAuthorisationStatusTypeREJECTED captures enum value "REJECTED"
	OpenbankingBrasilPaymentEnumAuthorisationStatusTypeREJECTED OpenbankingBrasilPaymentEnumAuthorisationStatusType = "REJECTED"

	// OpenbankingBrasilPaymentEnumAuthorisationStatusTypeCONSUMED captures enum value "CONSUMED"
	OpenbankingBrasilPaymentEnumAuthorisationStatusTypeCONSUMED OpenbankingBrasilPaymentEnumAuthorisationStatusType = "CONSUMED"

	// OpenbankingBrasilPaymentEnumAuthorisationStatusTypeREVOKED captures enum value "REVOKED"
	OpenbankingBrasilPaymentEnumAuthorisationStatusTypeREVOKED OpenbankingBrasilPaymentEnumAuthorisationStatusType = "REVOKED"
)

// for schema
var openbankingBrasilPaymentEnumAuthorisationStatusTypeEnum []interface{}

func init() {
	var res []OpenbankingBrasilPaymentEnumAuthorisationStatusType
	if err := json.Unmarshal([]byte(`["AWAITING_AUTHORISATION","AUTHORISED","REJECTED","CONSUMED","REVOKED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openbankingBrasilPaymentEnumAuthorisationStatusTypeEnum = append(openbankingBrasilPaymentEnumAuthorisationStatusTypeEnum, v)
	}
}

func (m OpenbankingBrasilPaymentEnumAuthorisationStatusType) validateOpenbankingBrasilPaymentEnumAuthorisationStatusTypeEnum(path, location string, value OpenbankingBrasilPaymentEnumAuthorisationStatusType) error {
	if err := validate.EnumCase(path, location, value, openbankingBrasilPaymentEnumAuthorisationStatusTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openbanking brasil payment enum authorisation status type
func (m OpenbankingBrasilPaymentEnumAuthorisationStatusType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenbankingBrasilPaymentEnumAuthorisationStatusTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openbanking brasil payment enum authorisation status type based on context it is used
func (m OpenbankingBrasilPaymentEnumAuthorisationStatusType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
