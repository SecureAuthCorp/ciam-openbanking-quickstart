// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilPaymentError3 Error3
//
// swagger:model OpenbankingBrasilPaymentError3
type OpenbankingBrasilPaymentError3 struct {

	// code
	// Required: true
	Code *OpenbankingBrasilPaymentEnumErrorsPatchConsent `json:"code"`

	// Descrio especfica do erro de acordo com o cdigo reportado:
	//  INFORMACAO_USUARIO_REQUERIDA: Informao do usurio requerida.
	//  OPERACAO_NAO_PERMITIDA_STATUS: Operao no permitida devido ao status atual do consentimento.
	//  OPERACAO_NAO_SUPORTADA_TIPO_CONSENTIMENTO: Operao no suportada pelo tipo de consentimento.
	//  TEMPO_LIMITE_REVOGACAO_EXCEDIDO: Prazo limite para revogao excedido.
	//  MOTIVO_REVOGACAO_NAO_PERMITIDO: Motivo de revogao no permitido.
	//  INFORMACAO_ADICIONAL_REVOGACAO_REQUERIDA: Informao adicional requerida.
	// Example: Operao no suportada pelo tipo de consentimento.
	// Required: true
	// Max Length: 2048
	// Pattern: \w*\W*
	Detail string `json:"detail"`

	// Ttulo especfico do erro reportado, de acordo com o cdigo enviado:
	//  INFORMACAO_USUARIO_REQUERIDA: Informao do usurio requerida.
	//  OPERACAO_NAO_PERMITIDA_STATUS: Operao no permitida.
	//  OPERACAO_NAO_SUPORTADA_TIPO_CONSENTIMENTO: Operao no permitida.
	//  TEMPO_LIMITE_REVOGACAO_EXCEDIDO: Prazo limite para revogao excedido.
	//  MOTIVO_REVOGACAO_NAO_PERMITIDO: Motivo de revogao no permitido.
	//  INFORMACAO_ADICIONAL_REVOGACAO_REQUERIDA: Informao adicional requerida.
	// Example: Motivo de revogao no permitido.
	// Required: true
	// Max Length: 255
	// Pattern: \w*\W*
	Title string `json:"title"`
}

// Validate validates this openbanking brasil payment error3
func (m *OpenbankingBrasilPaymentError3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingBrasilPaymentError3) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	if m.Code != nil {
		if err := m.Code.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("code")
			}
			return err
		}
	}

	return nil
}

func (m *OpenbankingBrasilPaymentError3) validateDetail(formats strfmt.Registry) error {

	if err := validate.RequiredString("detail", "body", m.Detail); err != nil {
		return err
	}

	if err := validate.MaxLength("detail", "body", m.Detail, 2048); err != nil {
		return err
	}

	if err := validate.Pattern("detail", "body", m.Detail, `\w*\W*`); err != nil {
		return err
	}

	return nil
}

func (m *OpenbankingBrasilPaymentError3) validateTitle(formats strfmt.Registry) error {

	if err := validate.RequiredString("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", m.Title, 255); err != nil {
		return err
	}

	if err := validate.Pattern("title", "body", m.Title, `\w*\W*`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this openbanking brasil payment error3 based on the context it is used
func (m *OpenbankingBrasilPaymentError3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingBrasilPaymentError3) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if m.Code != nil {
		if err := m.Code.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("code")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenbankingBrasilPaymentError3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenbankingBrasilPaymentError3) UnmarshalBinary(b []byte) error {
	var res OpenbankingBrasilPaymentError3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
