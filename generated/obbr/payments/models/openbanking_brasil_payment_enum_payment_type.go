// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilPaymentEnumPaymentType EnumPaymentType
//
// Este campo define o tipo de pagamento que ser iniciado aps a autorizao do consentimento.
// Example: PIX
//
// swagger:model OpenbankingBrasilPaymentEnumPaymentType
type OpenbankingBrasilPaymentEnumPaymentType string

func NewOpenbankingBrasilPaymentEnumPaymentType(value OpenbankingBrasilPaymentEnumPaymentType) *OpenbankingBrasilPaymentEnumPaymentType {
	v := value
	return &v
}

const (

	// OpenbankingBrasilPaymentEnumPaymentTypePIX captures enum value "PIX"
	OpenbankingBrasilPaymentEnumPaymentTypePIX OpenbankingBrasilPaymentEnumPaymentType = "PIX"
)

// for schema
var openbankingBrasilPaymentEnumPaymentTypeEnum []interface{}

func init() {
	var res []OpenbankingBrasilPaymentEnumPaymentType
	if err := json.Unmarshal([]byte(`["PIX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openbankingBrasilPaymentEnumPaymentTypeEnum = append(openbankingBrasilPaymentEnumPaymentTypeEnum, v)
	}
}

func (m OpenbankingBrasilPaymentEnumPaymentType) validateOpenbankingBrasilPaymentEnumPaymentTypeEnum(path, location string, value OpenbankingBrasilPaymentEnumPaymentType) error {
	if err := validate.EnumCase(path, location, value, openbankingBrasilPaymentEnumPaymentTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openbanking brasil payment enum payment type
func (m OpenbankingBrasilPaymentEnumPaymentType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenbankingBrasilPaymentEnumPaymentTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openbanking brasil payment enum payment type based on context it is used
func (m OpenbankingBrasilPaymentEnumPaymentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
