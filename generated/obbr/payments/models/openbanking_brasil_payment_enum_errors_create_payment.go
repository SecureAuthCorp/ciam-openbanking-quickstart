// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilPaymentEnumErrorsCreatePayment EnumErrorsCreatePayment
//
// Cdigos de erros previstos na criao da iniciao de pagamento:
//
//  SALDO_INSUFICIENTE  Esta conta no possui saldo suficiente para realizar o pagamento.
//
//  BENEFICIARIO_INCOMPATIVEL  O beneficirio informado no consentimento no  o mesmo do esperado pelo DICT.
//
//  VALOR_INCOMPATIVEL  O valor informado no consentimento no  o mesmo valor do informado no payload de pagamento.
//
//  VALOR_ACIMA_LIMITE  O valor (ou quantidade de transaes) ultrapassa a faixa de limite parametrizada na detentora para permitir a realizao de transaes pelo cliente.
//
//  VALOR_INVALIDO  O valor enviado no  vlido para o QR Code informado.
//
//  COBRANCA_INVALIDA  Validao de expirao, validao de vencimento, Status Vlido.
//
//  CONSENTIMENTO_INVALIDO  Consentimento invlido (status no  "authorised" ou est expirado).
//
//  JANELA_OPER_INVALIDA  Requisio est fora da janela de funcionamento.
//
//  NAO_INFORMADO  No informada pela detentora de conta.
//
//  PAGAMENTO_DIVERGENTE_DO_CONSENTIMENTO: Dados do pagamento divergentes dos dados do consentimento.
// Example: SALDO_INSUFICIENTE
//
// swagger:model OpenbankingBrasilPaymentEnumErrorsCreatePayment
type OpenbankingBrasilPaymentEnumErrorsCreatePayment string

func NewOpenbankingBrasilPaymentEnumErrorsCreatePayment(value OpenbankingBrasilPaymentEnumErrorsCreatePayment) *OpenbankingBrasilPaymentEnumErrorsCreatePayment {
	v := value
	return &v
}

const (

	// OpenbankingBrasilPaymentEnumErrorsCreatePaymentSALDOINSUFICIENTE captures enum value "SALDO_INSUFICIENTE"
	OpenbankingBrasilPaymentEnumErrorsCreatePaymentSALDOINSUFICIENTE OpenbankingBrasilPaymentEnumErrorsCreatePayment = "SALDO_INSUFICIENTE"

	// OpenbankingBrasilPaymentEnumErrorsCreatePaymentBENEFICIARIOINCOMPATIVEL captures enum value "BENEFICIARIO_INCOMPATIVEL"
	OpenbankingBrasilPaymentEnumErrorsCreatePaymentBENEFICIARIOINCOMPATIVEL OpenbankingBrasilPaymentEnumErrorsCreatePayment = "BENEFICIARIO_INCOMPATIVEL"

	// OpenbankingBrasilPaymentEnumErrorsCreatePaymentVALORINCOMPATIVEL captures enum value "VALOR_INCOMPATIVEL"
	OpenbankingBrasilPaymentEnumErrorsCreatePaymentVALORINCOMPATIVEL OpenbankingBrasilPaymentEnumErrorsCreatePayment = "VALOR_INCOMPATIVEL"

	// OpenbankingBrasilPaymentEnumErrorsCreatePaymentVALORACIMALIMITE captures enum value "VALOR_ACIMA_LIMITE"
	OpenbankingBrasilPaymentEnumErrorsCreatePaymentVALORACIMALIMITE OpenbankingBrasilPaymentEnumErrorsCreatePayment = "VALOR_ACIMA_LIMITE"

	// OpenbankingBrasilPaymentEnumErrorsCreatePaymentVALORINVALIDO captures enum value "VALOR_INVALIDO"
	OpenbankingBrasilPaymentEnumErrorsCreatePaymentVALORINVALIDO OpenbankingBrasilPaymentEnumErrorsCreatePayment = "VALOR_INVALIDO"

	// OpenbankingBrasilPaymentEnumErrorsCreatePaymentCOBRANCAINVALIDA captures enum value "COBRANCA_INVALIDA"
	OpenbankingBrasilPaymentEnumErrorsCreatePaymentCOBRANCAINVALIDA OpenbankingBrasilPaymentEnumErrorsCreatePayment = "COBRANCA_INVALIDA"

	// OpenbankingBrasilPaymentEnumErrorsCreatePaymentCONSENTIMENTOINVALIDO captures enum value "CONSENTIMENTO_INVALIDO"
	OpenbankingBrasilPaymentEnumErrorsCreatePaymentCONSENTIMENTOINVALIDO OpenbankingBrasilPaymentEnumErrorsCreatePayment = "CONSENTIMENTO_INVALIDO"

	// OpenbankingBrasilPaymentEnumErrorsCreatePaymentJANELAOPERINVALIDA captures enum value "JANELA_OPER_INVALIDA"
	OpenbankingBrasilPaymentEnumErrorsCreatePaymentJANELAOPERINVALIDA OpenbankingBrasilPaymentEnumErrorsCreatePayment = "JANELA_OPER_INVALIDA"

	// OpenbankingBrasilPaymentEnumErrorsCreatePaymentNAOINFORMADO captures enum value "NAO_INFORMADO"
	OpenbankingBrasilPaymentEnumErrorsCreatePaymentNAOINFORMADO OpenbankingBrasilPaymentEnumErrorsCreatePayment = "NAO_INFORMADO"

	// OpenbankingBrasilPaymentEnumErrorsCreatePaymentPAGAMENTODIVERGENTEDOCONSENTIMENTO captures enum value "PAGAMENTO_DIVERGENTE_DO_CONSENTIMENTO"
	OpenbankingBrasilPaymentEnumErrorsCreatePaymentPAGAMENTODIVERGENTEDOCONSENTIMENTO OpenbankingBrasilPaymentEnumErrorsCreatePayment = "PAGAMENTO_DIVERGENTE_DO_CONSENTIMENTO"
)

// for schema
var openbankingBrasilPaymentEnumErrorsCreatePaymentEnum []interface{}

func init() {
	var res []OpenbankingBrasilPaymentEnumErrorsCreatePayment
	if err := json.Unmarshal([]byte(`["SALDO_INSUFICIENTE","BENEFICIARIO_INCOMPATIVEL","VALOR_INCOMPATIVEL","VALOR_ACIMA_LIMITE","VALOR_INVALIDO","COBRANCA_INVALIDA","CONSENTIMENTO_INVALIDO","JANELA_OPER_INVALIDA","NAO_INFORMADO","PAGAMENTO_DIVERGENTE_DO_CONSENTIMENTO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openbankingBrasilPaymentEnumErrorsCreatePaymentEnum = append(openbankingBrasilPaymentEnumErrorsCreatePaymentEnum, v)
	}
}

func (m OpenbankingBrasilPaymentEnumErrorsCreatePayment) validateOpenbankingBrasilPaymentEnumErrorsCreatePaymentEnum(path, location string, value OpenbankingBrasilPaymentEnumErrorsCreatePayment) error {
	if err := validate.EnumCase(path, location, value, openbankingBrasilPaymentEnumErrorsCreatePaymentEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openbanking brasil payment enum errors create payment
func (m OpenbankingBrasilPaymentEnumErrorsCreatePayment) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenbankingBrasilPaymentEnumErrorsCreatePaymentEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openbanking brasil payment enum errors create payment based on context it is used
func (m OpenbankingBrasilPaymentEnumErrorsCreatePayment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
