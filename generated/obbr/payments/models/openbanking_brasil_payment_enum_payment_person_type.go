// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilPaymentEnumPaymentPersonType EnumPaymentPersonType
//
// Titular, pessoa natural ou juridica a quem se referem os dados de recebedor (creditor).
// Example: PESSOA_NATURAL
//
// swagger:model OpenbankingBrasilPaymentEnumPaymentPersonType
type OpenbankingBrasilPaymentEnumPaymentPersonType string

func NewOpenbankingBrasilPaymentEnumPaymentPersonType(value OpenbankingBrasilPaymentEnumPaymentPersonType) *OpenbankingBrasilPaymentEnumPaymentPersonType {
	v := value
	return &v
}

const (

	// OpenbankingBrasilPaymentEnumPaymentPersonTypePESSOANATURAL captures enum value "PESSOA_NATURAL"
	OpenbankingBrasilPaymentEnumPaymentPersonTypePESSOANATURAL OpenbankingBrasilPaymentEnumPaymentPersonType = "PESSOA_NATURAL"

	// OpenbankingBrasilPaymentEnumPaymentPersonTypePESSOAJURIDICA captures enum value "PESSOA_JURIDICA"
	OpenbankingBrasilPaymentEnumPaymentPersonTypePESSOAJURIDICA OpenbankingBrasilPaymentEnumPaymentPersonType = "PESSOA_JURIDICA"
)

// for schema
var openbankingBrasilPaymentEnumPaymentPersonTypeEnum []interface{}

func init() {
	var res []OpenbankingBrasilPaymentEnumPaymentPersonType
	if err := json.Unmarshal([]byte(`["PESSOA_NATURAL","PESSOA_JURIDICA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openbankingBrasilPaymentEnumPaymentPersonTypeEnum = append(openbankingBrasilPaymentEnumPaymentPersonTypeEnum, v)
	}
}

func (m OpenbankingBrasilPaymentEnumPaymentPersonType) validateOpenbankingBrasilPaymentEnumPaymentPersonTypeEnum(path, location string, value OpenbankingBrasilPaymentEnumPaymentPersonType) error {
	if err := validate.EnumCase(path, location, value, openbankingBrasilPaymentEnumPaymentPersonTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openbanking brasil payment enum payment person type
func (m OpenbankingBrasilPaymentEnumPaymentPersonType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenbankingBrasilPaymentEnumPaymentPersonTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openbanking brasil payment enum payment person type based on context it is used
func (m OpenbankingBrasilPaymentEnumPaymentPersonType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
