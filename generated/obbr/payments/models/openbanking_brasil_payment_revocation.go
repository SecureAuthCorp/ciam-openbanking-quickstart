// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilPaymentRevocation Revocation
//
// Objeto que contm as informaes das circunstncia da revogao.
//
// [Restrio] O campo loggedUser deve ser preenchido quando a revogao for feita pelo usurio final, ou seja, se o campo data.revocation.revokedBy estiver com o valor 'USER'.
//
// swagger:model OpenbankingBrasilPaymentRevocation
type OpenbankingBrasilPaymentRevocation struct {

	// logged user
	LoggedUser *OpenbankingBrasilPaymentLoggedUser `json:"loggedUser,omitempty"`

	// reason
	// Required: true
	Reason *OpenbankingBrasilPaymentReason `json:"reason"`

	// revoked by
	// Required: true
	RevokedBy *OpenbankingBrasilPaymentEnumRevokedBy `json:"revokedBy"`
}

// Validate validates this openbanking brasil payment revocation
func (m *OpenbankingBrasilPaymentRevocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoggedUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevokedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingBrasilPaymentRevocation) validateLoggedUser(formats strfmt.Registry) error {
	if swag.IsZero(m.LoggedUser) { // not required
		return nil
	}

	if m.LoggedUser != nil {
		if err := m.LoggedUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loggedUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loggedUser")
			}
			return err
		}
	}

	return nil
}

func (m *OpenbankingBrasilPaymentRevocation) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("reason", "body", m.Reason); err != nil {
		return err
	}

	if m.Reason != nil {
		if err := m.Reason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *OpenbankingBrasilPaymentRevocation) validateRevokedBy(formats strfmt.Registry) error {

	if err := validate.Required("revokedBy", "body", m.RevokedBy); err != nil {
		return err
	}

	if err := validate.Required("revokedBy", "body", m.RevokedBy); err != nil {
		return err
	}

	if m.RevokedBy != nil {
		if err := m.RevokedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revokedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revokedBy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this openbanking brasil payment revocation based on the context it is used
func (m *OpenbankingBrasilPaymentRevocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLoggedUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRevokedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingBrasilPaymentRevocation) contextValidateLoggedUser(ctx context.Context, formats strfmt.Registry) error {

	if m.LoggedUser != nil {
		if err := m.LoggedUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loggedUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loggedUser")
			}
			return err
		}
	}

	return nil
}

func (m *OpenbankingBrasilPaymentRevocation) contextValidateReason(ctx context.Context, formats strfmt.Registry) error {

	if m.Reason != nil {
		if err := m.Reason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *OpenbankingBrasilPaymentRevocation) contextValidateRevokedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.RevokedBy != nil {
		if err := m.RevokedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revokedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revokedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenbankingBrasilPaymentRevocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenbankingBrasilPaymentRevocation) UnmarshalBinary(b []byte) error {
	var res OpenbankingBrasilPaymentRevocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
