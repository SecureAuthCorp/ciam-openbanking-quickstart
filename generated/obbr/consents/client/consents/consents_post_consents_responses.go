// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/openbanking-quickstart/generated/obbr/consents/models"
)

// ConsentsPostConsentsReader is a Reader for the ConsentsPostConsents structure.
type ConsentsPostConsentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConsentsPostConsentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewConsentsPostConsentsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConsentsPostConsentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewConsentsPostConsentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewConsentsPostConsentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConsentsPostConsentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewConsentsPostConsentsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewConsentsPostConsentsNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewConsentsPostConsentsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewConsentsPostConsentsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewConsentsPostConsentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConsentsPostConsentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewConsentsPostConsentsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 529:
		result := NewConsentsPostConsentsStatus529()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewConsentsPostConsentsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewConsentsPostConsentsCreated creates a ConsentsPostConsentsCreated with default headers values
func NewConsentsPostConsentsCreated() *ConsentsPostConsentsCreated {
	return &ConsentsPostConsentsCreated{}
}

/* ConsentsPostConsentsCreated describes a response with status code 201, with default header values.

Consentimento criado com sucesso.
*/
type ConsentsPostConsentsCreated struct {

	/* Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlao.
	Se fornecido, o transmissor deve "reproduzir" esse valor no cabealho de resposta.

	*/
	XFapiInteractionID string

	Payload *models.OpenbankingBrasilConsentV2ResponseConsent
}

func (o *ConsentsPostConsentsCreated) Error() string {
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsCreated  %+v", 201, o.Payload)
}
func (o *ConsentsPostConsentsCreated) GetPayload() *models.OpenbankingBrasilConsentV2ResponseConsent {
	return o.Payload
}

func (o *ConsentsPostConsentsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	o.Payload = new(models.OpenbankingBrasilConsentV2ResponseConsent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsBadRequest creates a ConsentsPostConsentsBadRequest with default headers values
func NewConsentsPostConsentsBadRequest() *ConsentsPostConsentsBadRequest {
	return &ConsentsPostConsentsBadRequest{}
}

/* ConsentsPostConsentsBadRequest describes a response with status code 400, with default header values.

A requisio foi malformada, omitindo atributos obrigatrios, seja no payload ou atravs de atributos na URL.
*/
type ConsentsPostConsentsBadRequest struct {
	Payload *models.OpenbankingBrasilConsentV2ResponseError
}

func (o *ConsentsPostConsentsBadRequest) Error() string {
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsBadRequest  %+v", 400, o.Payload)
}
func (o *ConsentsPostConsentsBadRequest) GetPayload() *models.OpenbankingBrasilConsentV2ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenbankingBrasilConsentV2ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsUnauthorized creates a ConsentsPostConsentsUnauthorized with default headers values
func NewConsentsPostConsentsUnauthorized() *ConsentsPostConsentsUnauthorized {
	return &ConsentsPostConsentsUnauthorized{}
}

/* ConsentsPostConsentsUnauthorized describes a response with status code 401, with default header values.

Cabealho de autenticao ausente/invlido ou token invlido
*/
type ConsentsPostConsentsUnauthorized struct {
	Payload *models.OpenbankingBrasilConsentV2ResponseError
}

func (o *ConsentsPostConsentsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsUnauthorized  %+v", 401, o.Payload)
}
func (o *ConsentsPostConsentsUnauthorized) GetPayload() *models.OpenbankingBrasilConsentV2ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenbankingBrasilConsentV2ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsForbidden creates a ConsentsPostConsentsForbidden with default headers values
func NewConsentsPostConsentsForbidden() *ConsentsPostConsentsForbidden {
	return &ConsentsPostConsentsForbidden{}
}

/* ConsentsPostConsentsForbidden describes a response with status code 403, with default header values.

O token tem escopo incorreto ou uma poltica de segurana foi violada
*/
type ConsentsPostConsentsForbidden struct {
	Payload *models.OpenbankingBrasilConsentV2ResponseError
}

func (o *ConsentsPostConsentsForbidden) Error() string {
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsForbidden  %+v", 403, o.Payload)
}
func (o *ConsentsPostConsentsForbidden) GetPayload() *models.OpenbankingBrasilConsentV2ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenbankingBrasilConsentV2ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsNotFound creates a ConsentsPostConsentsNotFound with default headers values
func NewConsentsPostConsentsNotFound() *ConsentsPostConsentsNotFound {
	return &ConsentsPostConsentsNotFound{}
}

/* ConsentsPostConsentsNotFound describes a response with status code 404, with default header values.

O recurso solicitado no existe ou no foi implementado
*/
type ConsentsPostConsentsNotFound struct {
	Payload *models.OpenbankingBrasilConsentV2ResponseError
}

func (o *ConsentsPostConsentsNotFound) Error() string {
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsNotFound  %+v", 404, o.Payload)
}
func (o *ConsentsPostConsentsNotFound) GetPayload() *models.OpenbankingBrasilConsentV2ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenbankingBrasilConsentV2ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsMethodNotAllowed creates a ConsentsPostConsentsMethodNotAllowed with default headers values
func NewConsentsPostConsentsMethodNotAllowed() *ConsentsPostConsentsMethodNotAllowed {
	return &ConsentsPostConsentsMethodNotAllowed{}
}

/* ConsentsPostConsentsMethodNotAllowed describes a response with status code 405, with default header values.

O consumidor tentou acessar o recurso com um mtodo no suportado
*/
type ConsentsPostConsentsMethodNotAllowed struct {
	Payload *models.OpenbankingBrasilConsentV2ResponseError
}

func (o *ConsentsPostConsentsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsMethodNotAllowed  %+v", 405, o.Payload)
}
func (o *ConsentsPostConsentsMethodNotAllowed) GetPayload() *models.OpenbankingBrasilConsentV2ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenbankingBrasilConsentV2ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsNotAcceptable creates a ConsentsPostConsentsNotAcceptable with default headers values
func NewConsentsPostConsentsNotAcceptable() *ConsentsPostConsentsNotAcceptable {
	return &ConsentsPostConsentsNotAcceptable{}
}

/* ConsentsPostConsentsNotAcceptable describes a response with status code 406, with default header values.

A solicitao continha um cabealho Accept diferente dos tipos de mdia permitidos ou um conjunto de caracteres diferente de UTF-8
*/
type ConsentsPostConsentsNotAcceptable struct {
	Payload *models.OpenbankingBrasilConsentV2ResponseError
}

func (o *ConsentsPostConsentsNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsNotAcceptable  %+v", 406, o.Payload)
}
func (o *ConsentsPostConsentsNotAcceptable) GetPayload() *models.OpenbankingBrasilConsentV2ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenbankingBrasilConsentV2ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsUnsupportedMediaType creates a ConsentsPostConsentsUnsupportedMediaType with default headers values
func NewConsentsPostConsentsUnsupportedMediaType() *ConsentsPostConsentsUnsupportedMediaType {
	return &ConsentsPostConsentsUnsupportedMediaType{}
}

/* ConsentsPostConsentsUnsupportedMediaType describes a response with status code 415, with default header values.

O formato do payload no  um formato suportado.
*/
type ConsentsPostConsentsUnsupportedMediaType struct {
	Payload *models.OpenbankingBrasilConsentV2ResponseError
}

func (o *ConsentsPostConsentsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *ConsentsPostConsentsUnsupportedMediaType) GetPayload() *models.OpenbankingBrasilConsentV2ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenbankingBrasilConsentV2ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsUnprocessableEntity creates a ConsentsPostConsentsUnprocessableEntity with default headers values
func NewConsentsPostConsentsUnprocessableEntity() *ConsentsPostConsentsUnprocessableEntity {
	return &ConsentsPostConsentsUnprocessableEntity{}
}

/* ConsentsPostConsentsUnprocessableEntity describes a response with status code 422, with default header values.

A sintaxe da requisio esta correta, mas no foi possvel processar as instrues presentes.
*/
type ConsentsPostConsentsUnprocessableEntity struct {
	Payload *models.OpenbankingBrasilConsentV2ResponseError
}

func (o *ConsentsPostConsentsUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *ConsentsPostConsentsUnprocessableEntity) GetPayload() *models.OpenbankingBrasilConsentV2ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenbankingBrasilConsentV2ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsTooManyRequests creates a ConsentsPostConsentsTooManyRequests with default headers values
func NewConsentsPostConsentsTooManyRequests() *ConsentsPostConsentsTooManyRequests {
	return &ConsentsPostConsentsTooManyRequests{}
}

/* ConsentsPostConsentsTooManyRequests describes a response with status code 429, with default header values.

A operao foi recusada, pois muitas solicitaes foram feitas dentro de um determinado perodo ou o limite global de requisies concorrentes foi atingido
*/
type ConsentsPostConsentsTooManyRequests struct {
	Payload *models.OpenbankingBrasilConsentV2ResponseError
}

func (o *ConsentsPostConsentsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsTooManyRequests  %+v", 429, o.Payload)
}
func (o *ConsentsPostConsentsTooManyRequests) GetPayload() *models.OpenbankingBrasilConsentV2ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenbankingBrasilConsentV2ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsInternalServerError creates a ConsentsPostConsentsInternalServerError with default headers values
func NewConsentsPostConsentsInternalServerError() *ConsentsPostConsentsInternalServerError {
	return &ConsentsPostConsentsInternalServerError{}
}

/* ConsentsPostConsentsInternalServerError describes a response with status code 500, with default header values.

Ocorreu um erro no gateway da API ou no microsservio
*/
type ConsentsPostConsentsInternalServerError struct {
	Payload *models.OpenbankingBrasilConsentV2ResponseError
}

func (o *ConsentsPostConsentsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsInternalServerError  %+v", 500, o.Payload)
}
func (o *ConsentsPostConsentsInternalServerError) GetPayload() *models.OpenbankingBrasilConsentV2ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenbankingBrasilConsentV2ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsGatewayTimeout creates a ConsentsPostConsentsGatewayTimeout with default headers values
func NewConsentsPostConsentsGatewayTimeout() *ConsentsPostConsentsGatewayTimeout {
	return &ConsentsPostConsentsGatewayTimeout{}
}

/* ConsentsPostConsentsGatewayTimeout describes a response with status code 504, with default header values.

GATEWAY TIMEOUT - A requisio no foi atendida dentro do tempo limite estabelecido
*/
type ConsentsPostConsentsGatewayTimeout struct {
	Payload *models.OpenbankingBrasilConsentV2ResponseError
}

func (o *ConsentsPostConsentsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsGatewayTimeout  %+v", 504, o.Payload)
}
func (o *ConsentsPostConsentsGatewayTimeout) GetPayload() *models.OpenbankingBrasilConsentV2ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenbankingBrasilConsentV2ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsStatus529 creates a ConsentsPostConsentsStatus529 with default headers values
func NewConsentsPostConsentsStatus529() *ConsentsPostConsentsStatus529 {
	return &ConsentsPostConsentsStatus529{}
}

/* ConsentsPostConsentsStatus529 describes a response with status code 529, with default header values.

O site est sobrecarregado e a operao foi recusada, pois foi atingido o limite mximo de TPS global, neste momento.
*/
type ConsentsPostConsentsStatus529 struct {
	Payload *models.OpenbankingBrasilConsentV2ResponseError
}

func (o *ConsentsPostConsentsStatus529) Error() string {
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsStatus529  %+v", 529, o.Payload)
}
func (o *ConsentsPostConsentsStatus529) GetPayload() *models.OpenbankingBrasilConsentV2ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsStatus529) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenbankingBrasilConsentV2ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsDefault creates a ConsentsPostConsentsDefault with default headers values
func NewConsentsPostConsentsDefault(code int) *ConsentsPostConsentsDefault {
	return &ConsentsPostConsentsDefault{
		_statusCode: code,
	}
}

/* ConsentsPostConsentsDefault describes a response with status code -1, with default header values.

Erro inesperado.
*/
type ConsentsPostConsentsDefault struct {
	_statusCode int

	Payload *models.OpenbankingBrasilConsentV2ResponseError
}

// Code gets the status code for the consents post consents default response
func (o *ConsentsPostConsentsDefault) Code() int {
	return o._statusCode
}

func (o *ConsentsPostConsentsDefault) Error() string {
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsents default  %+v", o._statusCode, o.Payload)
}
func (o *ConsentsPostConsentsDefault) GetPayload() *models.OpenbankingBrasilConsentV2ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenbankingBrasilConsentV2ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
