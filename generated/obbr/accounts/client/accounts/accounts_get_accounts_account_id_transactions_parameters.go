// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAccountsGetAccountsAccountIDTransactionsParams creates a new AccountsGetAccountsAccountIDTransactionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAccountsGetAccountsAccountIDTransactionsParams() *AccountsGetAccountsAccountIDTransactionsParams {
	return &AccountsGetAccountsAccountIDTransactionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAccountsGetAccountsAccountIDTransactionsParamsWithTimeout creates a new AccountsGetAccountsAccountIDTransactionsParams object
// with the ability to set a timeout on a request.
func NewAccountsGetAccountsAccountIDTransactionsParamsWithTimeout(timeout time.Duration) *AccountsGetAccountsAccountIDTransactionsParams {
	return &AccountsGetAccountsAccountIDTransactionsParams{
		timeout: timeout,
	}
}

// NewAccountsGetAccountsAccountIDTransactionsParamsWithContext creates a new AccountsGetAccountsAccountIDTransactionsParams object
// with the ability to set a context for a request.
func NewAccountsGetAccountsAccountIDTransactionsParamsWithContext(ctx context.Context) *AccountsGetAccountsAccountIDTransactionsParams {
	return &AccountsGetAccountsAccountIDTransactionsParams{
		Context: ctx,
	}
}

// NewAccountsGetAccountsAccountIDTransactionsParamsWithHTTPClient creates a new AccountsGetAccountsAccountIDTransactionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewAccountsGetAccountsAccountIDTransactionsParamsWithHTTPClient(client *http.Client) *AccountsGetAccountsAccountIDTransactionsParams {
	return &AccountsGetAccountsAccountIDTransactionsParams{
		HTTPClient: client,
	}
}

/* AccountsGetAccountsAccountIDTransactionsParams contains all the parameters to send to the API endpoint
   for the accounts get accounts account Id transactions operation.

   Typically these are written to a http.Request.
*/
type AccountsGetAccountsAccountIDTransactionsParams struct {

	/* Authorization.

	   Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	*/
	Authorization string

	/* AccountID.

	   Identificador da conta de depósito à vista, de poupança ou de pagamento pré-paga.
	*/
	AccountID string

	/* CreditDebitIndicator.

	   Indicador do tipo de lançamento
	*/
	CreditDebitIndicator *string

	/* FromBookingDate.

	   Data inicial de filtragem.

	   Format: date
	*/
	FromBookingDate *strfmt.Date

	/* Page.

	   Número da página que está sendo requisitada (o valor da primeira página é 1).

	   Format: int32
	   Default: 1
	*/
	Page *int32

	/* PageSize.

	   Quantidade total de registros por páginas.

	   Format: int32
	   Default: 25
	*/
	PageSize *int32

	/* ToBookingDate.

	   Data final de filtragem.

	   Format: date
	*/
	ToBookingDate *strfmt.Date

	/* XCustomerUserAgent.

	   Indica o user-agent que o usuário utiliza.
	*/
	XCustomerUserAgent *string

	/* XFapiAuthDate.

	   Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	*/
	XFapiAuthDate *string

	/* XFapiCustomerIPAddress.

	   O endereço IP do usuário se estiver atualmente logado com o receptor.
	*/
	XFapiCustomerIPAddress *string

	/* XFapiInteractionID.

	   Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. Se fornecido, o transmissor deve "reproduzir" esse valor no cabeçalho de resposta.
	*/
	XFapiInteractionID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the accounts get accounts account Id transactions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AccountsGetAccountsAccountIDTransactionsParams) WithDefaults() *AccountsGetAccountsAccountIDTransactionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the accounts get accounts account Id transactions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AccountsGetAccountsAccountIDTransactionsParams) SetDefaults() {
	var (
		pageDefault = int32(1)

		pageSizeDefault = int32(25)
	)

	val := AccountsGetAccountsAccountIDTransactionsParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) WithTimeout(timeout time.Duration) *AccountsGetAccountsAccountIDTransactionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) WithContext(ctx context.Context) *AccountsGetAccountsAccountIDTransactionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) WithHTTPClient(client *http.Client) *AccountsGetAccountsAccountIDTransactionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) WithAuthorization(authorization string) *AccountsGetAccountsAccountIDTransactionsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithAccountID adds the accountID to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) WithAccountID(accountID string) *AccountsGetAccountsAccountIDTransactionsParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithCreditDebitIndicator adds the creditDebitIndicator to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) WithCreditDebitIndicator(creditDebitIndicator *string) *AccountsGetAccountsAccountIDTransactionsParams {
	o.SetCreditDebitIndicator(creditDebitIndicator)
	return o
}

// SetCreditDebitIndicator adds the creditDebitIndicator to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) SetCreditDebitIndicator(creditDebitIndicator *string) {
	o.CreditDebitIndicator = creditDebitIndicator
}

// WithFromBookingDate adds the fromBookingDate to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) WithFromBookingDate(fromBookingDate *strfmt.Date) *AccountsGetAccountsAccountIDTransactionsParams {
	o.SetFromBookingDate(fromBookingDate)
	return o
}

// SetFromBookingDate adds the fromBookingDate to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) SetFromBookingDate(fromBookingDate *strfmt.Date) {
	o.FromBookingDate = fromBookingDate
}

// WithPage adds the page to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) WithPage(page *int32) *AccountsGetAccountsAccountIDTransactionsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) SetPage(page *int32) {
	o.Page = page
}

// WithPageSize adds the pageSize to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) WithPageSize(pageSize *int32) *AccountsGetAccountsAccountIDTransactionsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithToBookingDate adds the toBookingDate to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) WithToBookingDate(toBookingDate *strfmt.Date) *AccountsGetAccountsAccountIDTransactionsParams {
	o.SetToBookingDate(toBookingDate)
	return o
}

// SetToBookingDate adds the toBookingDate to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) SetToBookingDate(toBookingDate *strfmt.Date) {
	o.ToBookingDate = toBookingDate
}

// WithXCustomerUserAgent adds the xCustomerUserAgent to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) WithXCustomerUserAgent(xCustomerUserAgent *string) *AccountsGetAccountsAccountIDTransactionsParams {
	o.SetXCustomerUserAgent(xCustomerUserAgent)
	return o
}

// SetXCustomerUserAgent adds the xCustomerUserAgent to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) SetXCustomerUserAgent(xCustomerUserAgent *string) {
	o.XCustomerUserAgent = xCustomerUserAgent
}

// WithXFapiAuthDate adds the xFapiAuthDate to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) WithXFapiAuthDate(xFapiAuthDate *string) *AccountsGetAccountsAccountIDTransactionsParams {
	o.SetXFapiAuthDate(xFapiAuthDate)
	return o
}

// SetXFapiAuthDate adds the xFapiAuthDate to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) SetXFapiAuthDate(xFapiAuthDate *string) {
	o.XFapiAuthDate = xFapiAuthDate
}

// WithXFapiCustomerIPAddress adds the xFapiCustomerIPAddress to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) WithXFapiCustomerIPAddress(xFapiCustomerIPAddress *string) *AccountsGetAccountsAccountIDTransactionsParams {
	o.SetXFapiCustomerIPAddress(xFapiCustomerIPAddress)
	return o
}

// SetXFapiCustomerIPAddress adds the xFapiCustomerIpAddress to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) SetXFapiCustomerIPAddress(xFapiCustomerIPAddress *string) {
	o.XFapiCustomerIPAddress = xFapiCustomerIPAddress
}

// WithXFapiInteractionID adds the xFapiInteractionID to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) WithXFapiInteractionID(xFapiInteractionID *string) *AccountsGetAccountsAccountIDTransactionsParams {
	o.SetXFapiInteractionID(xFapiInteractionID)
	return o
}

// SetXFapiInteractionID adds the xFapiInteractionId to the accounts get accounts account Id transactions params
func (o *AccountsGetAccountsAccountIDTransactionsParams) SetXFapiInteractionID(xFapiInteractionID *string) {
	o.XFapiInteractionID = xFapiInteractionID
}

// WriteToRequest writes these params to a swagger request
func (o *AccountsGetAccountsAccountIDTransactionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param accountId
	if err := r.SetPathParam("accountId", o.AccountID); err != nil {
		return err
	}

	if o.CreditDebitIndicator != nil {

		// query param creditDebitIndicator
		var qrCreditDebitIndicator string

		if o.CreditDebitIndicator != nil {
			qrCreditDebitIndicator = *o.CreditDebitIndicator
		}
		qCreditDebitIndicator := qrCreditDebitIndicator
		if qCreditDebitIndicator != "" {

			if err := r.SetQueryParam("creditDebitIndicator", qCreditDebitIndicator); err != nil {
				return err
			}
		}
	}

	if o.FromBookingDate != nil {

		// query param fromBookingDate
		var qrFromBookingDate strfmt.Date

		if o.FromBookingDate != nil {
			qrFromBookingDate = *o.FromBookingDate
		}
		qFromBookingDate := qrFromBookingDate.String()
		if qFromBookingDate != "" {

			if err := r.SetQueryParam("fromBookingDate", qFromBookingDate); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page-size
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page-size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.ToBookingDate != nil {

		// query param toBookingDate
		var qrToBookingDate strfmt.Date

		if o.ToBookingDate != nil {
			qrToBookingDate = *o.ToBookingDate
		}
		qToBookingDate := qrToBookingDate.String()
		if qToBookingDate != "" {

			if err := r.SetQueryParam("toBookingDate", qToBookingDate); err != nil {
				return err
			}
		}
	}

	if o.XCustomerUserAgent != nil {

		// header param x-customer-user-agent
		if err := r.SetHeaderParam("x-customer-user-agent", *o.XCustomerUserAgent); err != nil {
			return err
		}
	}

	if o.XFapiAuthDate != nil {

		// header param x-fapi-auth-date
		if err := r.SetHeaderParam("x-fapi-auth-date", *o.XFapiAuthDate); err != nil {
			return err
		}
	}

	if o.XFapiCustomerIPAddress != nil {

		// header param x-fapi-customer-ip-address
		if err := r.SetHeaderParam("x-fapi-customer-ip-address", *o.XFapiCustomerIPAddress); err != nil {
			return err
		}
	}

	if o.XFapiInteractionID != nil {

		// header param x-fapi-interaction-id
		if err := r.SetHeaderParam("x-fapi-interaction-id", *o.XFapiInteractionID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
