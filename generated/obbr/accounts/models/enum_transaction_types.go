// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EnumTransactionTypes EnumTransactionTypes
//
// Tipo de Transação
//
// swagger:model EnumTransactionTypes
type EnumTransactionTypes string

func NewEnumTransactionTypes(value EnumTransactionTypes) *EnumTransactionTypes {
	v := value
	return &v
}

const (

	// EnumTransactionTypesTED captures enum value "TED"
	EnumTransactionTypesTED EnumTransactionTypes = "TED"

	// EnumTransactionTypesDOC captures enum value "DOC"
	EnumTransactionTypesDOC EnumTransactionTypes = "DOC"

	// EnumTransactionTypesPIX captures enum value "PIX"
	EnumTransactionTypesPIX EnumTransactionTypes = "PIX"

	// EnumTransactionTypesTRANSFERENCIAMESMAINSTITUICAO captures enum value "TRANSFERENCIA_MESMA_INSTITUICAO"
	EnumTransactionTypesTRANSFERENCIAMESMAINSTITUICAO EnumTransactionTypes = "TRANSFERENCIA_MESMA_INSTITUICAO"

	// EnumTransactionTypesBOLETO captures enum value "BOLETO"
	EnumTransactionTypesBOLETO EnumTransactionTypes = "BOLETO"

	// EnumTransactionTypesCONVENIOARRECADACAO captures enum value "CONVENIO_ARRECADACAO"
	EnumTransactionTypesCONVENIOARRECADACAO EnumTransactionTypes = "CONVENIO_ARRECADACAO"

	// EnumTransactionTypesPACOTETARIFASERVICOS captures enum value "PACOTE_TARIFA_SERVICOS"
	EnumTransactionTypesPACOTETARIFASERVICOS EnumTransactionTypes = "PACOTE_TARIFA_SERVICOS"

	// EnumTransactionTypesTARIFASERVICOSAVULSOS captures enum value "TARIFA_SERVICOS_AVULSOS"
	EnumTransactionTypesTARIFASERVICOSAVULSOS EnumTransactionTypes = "TARIFA_SERVICOS_AVULSOS"

	// EnumTransactionTypesFOLHAPAGAMENTO captures enum value "FOLHA_PAGAMENTO"
	EnumTransactionTypesFOLHAPAGAMENTO EnumTransactionTypes = "FOLHA_PAGAMENTO"

	// EnumTransactionTypesDEPOSITO captures enum value "DEPOSITO"
	EnumTransactionTypesDEPOSITO EnumTransactionTypes = "DEPOSITO"

	// EnumTransactionTypesSAQUE captures enum value "SAQUE"
	EnumTransactionTypesSAQUE EnumTransactionTypes = "SAQUE"

	// EnumTransactionTypesCARTAO captures enum value "CARTAO"
	EnumTransactionTypesCARTAO EnumTransactionTypes = "CARTAO"

	// EnumTransactionTypesENCARGOSJUROSCHEQUEESPECIAL captures enum value "ENCARGOS_JUROS_CHEQUE_ESPECIAL"
	EnumTransactionTypesENCARGOSJUROSCHEQUEESPECIAL EnumTransactionTypes = "ENCARGOS_JUROS_CHEQUE_ESPECIAL"

	// EnumTransactionTypesRENDIMENTOAPLICFINANCEIRA captures enum value "RENDIMENTO_APLIC_FINANCEIRA"
	EnumTransactionTypesRENDIMENTOAPLICFINANCEIRA EnumTransactionTypes = "RENDIMENTO_APLIC_FINANCEIRA"

	// EnumTransactionTypesPORTABILIDADESALARIO captures enum value "PORTABILIDADE_SALARIO"
	EnumTransactionTypesPORTABILIDADESALARIO EnumTransactionTypes = "PORTABILIDADE_SALARIO"

	// EnumTransactionTypesRESGATEAPLICFINANCEIRA captures enum value "RESGATE_APLIC_FINANCEIRA"
	EnumTransactionTypesRESGATEAPLICFINANCEIRA EnumTransactionTypes = "RESGATE_APLIC_FINANCEIRA"

	// EnumTransactionTypesOPERACAOCREDITO captures enum value "OPERACAO_CREDITO"
	EnumTransactionTypesOPERACAOCREDITO EnumTransactionTypes = "OPERACAO_CREDITO"

	// EnumTransactionTypesOUTROS captures enum value "OUTROS"
	EnumTransactionTypesOUTROS EnumTransactionTypes = "OUTROS"
)

// for schema
var enumTransactionTypesEnum []interface{}

func init() {
	var res []EnumTransactionTypes
	if err := json.Unmarshal([]byte(`["TED","DOC","PIX","TRANSFERENCIA_MESMA_INSTITUICAO","BOLETO","CONVENIO_ARRECADACAO","PACOTE_TARIFA_SERVICOS","TARIFA_SERVICOS_AVULSOS","FOLHA_PAGAMENTO","DEPOSITO","SAQUE","CARTAO","ENCARGOS_JUROS_CHEQUE_ESPECIAL","RENDIMENTO_APLIC_FINANCEIRA","PORTABILIDADE_SALARIO","RESGATE_APLIC_FINANCEIRA","OPERACAO_CREDITO","OUTROS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		enumTransactionTypesEnum = append(enumTransactionTypesEnum, v)
	}
}

func (m EnumTransactionTypes) validateEnumTransactionTypesEnum(path, location string, value EnumTransactionTypes) error {
	if err := validate.EnumCase(path, location, value, enumTransactionTypesEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this enum transaction types
func (m EnumTransactionTypes) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEnumTransactionTypesEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this enum transaction types based on context it is used
func (m EnumTransactionTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
