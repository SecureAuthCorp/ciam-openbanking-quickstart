// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Type4 type4
// Example: ALL
//
// swagger:model type4
type Type4 string

func NewType4(value Type4) *Type4 {
	v := value
	return &v
}

const (

	// Type4ALL captures enum value "ALL"
	Type4ALL Type4 = "ALL"

	// Type4BILLER captures enum value "BILLER"
	Type4BILLER Type4 = "BILLER"

	// Type4DIGITALWALLET captures enum value "DIGITAL_WALLET"
	Type4DIGITALWALLET Type4 = "DIGITAL_WALLET"

	// Type4DOMESTIC captures enum value "DOMESTIC"
	Type4DOMESTIC Type4 = "DOMESTIC"

	// Type4INTERNATIONAL captures enum value "INTERNATIONAL"
	Type4INTERNATIONAL Type4 = "INTERNATIONAL"
)

// for schema
var type4Enum []interface{}

func init() {
	var res []Type4
	if err := json.Unmarshal([]byte(`["ALL","BILLER","DIGITAL_WALLET","DOMESTIC","INTERNATIONAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		type4Enum = append(type4Enum, v)
	}
}

func (m Type4) validateType4Enum(path, location string, value Type4) error {
	if err := validate.EnumCase(path, location, value, type4Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this type4
func (m Type4) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateType4Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this type4 based on context it is used
func (m Type4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
