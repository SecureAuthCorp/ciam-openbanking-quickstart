// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonSimpleAddress CommonSimpleAddress
//
// swagger:model CommonSimpleAddress
type CommonSimpleAddress struct {

	// First line of the standard address object
	// Required: true
	AddressLine1 *string `json:"addressLine1"`

	// Second line of the standard address object
	AddressLine2 string `json:"addressLine2,omitempty"`

	// Third line of the standard address object
	AddressLine3 string `json:"addressLine3,omitempty"`

	// Name of the city or locality
	// Required: true
	City *string `json:"city"`

	// A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code. Australia (AUS) is assumed if country is not present.
	// Example: AUS
	Country *string `json:"country,omitempty"`

	// Name of the individual or business formatted for inclusion in an address used for physical mail
	MailingName string `json:"mailingName,omitempty"`

	// Mandatory for Australian addresses
	Postcode string `json:"postcode,omitempty"`

	// Free text if the country is not Australia. If country is Australia then must be one of the values defined by the [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf) in the PAF file format. NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT
	// Required: true
	State *string `json:"state"`
}

// Validate validates this common simple address
func (m *CommonSimpleAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonSimpleAddress) validateAddressLine1(formats strfmt.Registry) error {

	if err := validate.Required("addressLine1", "body", m.AddressLine1); err != nil {
		return err
	}

	return nil
}

func (m *CommonSimpleAddress) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *CommonSimpleAddress) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this common simple address based on context it is used
func (m *CommonSimpleAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommonSimpleAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonSimpleAddress) UnmarshalBinary(b []byte) error {
	var res CommonSimpleAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
