// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FeeType FeeType
//
// The type of fee
// Example: DEPOSIT
//
// swagger:model FeeType
type FeeType string

func NewFeeType(value FeeType) *FeeType {
	v := value
	return &v
}

const (

	// FeeTypeDEPOSIT captures enum value "DEPOSIT"
	FeeTypeDEPOSIT FeeType = "DEPOSIT"

	// FeeTypeEVENT captures enum value "EVENT"
	FeeTypeEVENT FeeType = "EVENT"

	// FeeTypeEXIT captures enum value "EXIT"
	FeeTypeEXIT FeeType = "EXIT"

	// FeeTypePAYMENT captures enum value "PAYMENT"
	FeeTypePAYMENT FeeType = "PAYMENT"

	// FeeTypePERIODIC captures enum value "PERIODIC"
	FeeTypePERIODIC FeeType = "PERIODIC"

	// FeeTypePURCHASE captures enum value "PURCHASE"
	FeeTypePURCHASE FeeType = "PURCHASE"

	// FeeTypeTRANSACTION captures enum value "TRANSACTION"
	FeeTypeTRANSACTION FeeType = "TRANSACTION"

	// FeeTypeUPFRONT captures enum value "UPFRONT"
	FeeTypeUPFRONT FeeType = "UPFRONT"

	// FeeTypeVARIABLE captures enum value "VARIABLE"
	FeeTypeVARIABLE FeeType = "VARIABLE"

	// FeeTypeWITHDRAWAL captures enum value "WITHDRAWAL"
	FeeTypeWITHDRAWAL FeeType = "WITHDRAWAL"
)

// for schema
var feeTypeEnum []interface{}

func init() {
	var res []FeeType
	if err := json.Unmarshal([]byte(`["DEPOSIT","EVENT","EXIT","PAYMENT","PERIODIC","PURCHASE","TRANSACTION","UPFRONT","VARIABLE","WITHDRAWAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		feeTypeEnum = append(feeTypeEnum, v)
	}
}

func (m FeeType) validateFeeTypeEnum(path, location string, value FeeType) error {
	if err := validate.EnumCase(path, location, value, feeTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this fee type
func (m FeeType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFeeTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this fee type based on context it is used
func (m FeeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
