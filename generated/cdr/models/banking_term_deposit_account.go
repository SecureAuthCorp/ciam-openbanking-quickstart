// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankingTermDepositAccount BankingTermDepositAccount
//
// swagger:model BankingTermDepositAccount
type BankingTermDepositAccount struct {

	// The lodgement date of the original deposit
	// Required: true
	LodgementDate *string `json:"lodgementDate"`

	// Amount to be paid upon maturity. If absent it implies the amount to paid is variable and cannot currently be calculated
	MaturityAmount string `json:"maturityAmount,omitempty"`

	// If absent assumes AUD
	MaturityCurrency string `json:"maturityCurrency,omitempty"`

	// Maturity date for the term deposit
	// Required: true
	MaturityDate *string `json:"maturityDate"`

	// maturity instructions
	// Required: true
	MaturityInstructions *MaturityInstructions `json:"maturityInstructions"`
}

// Validate validates this banking term deposit account
func (m *BankingTermDepositAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLodgementDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaturityDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaturityInstructions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingTermDepositAccount) validateLodgementDate(formats strfmt.Registry) error {

	if err := validate.Required("lodgementDate", "body", m.LodgementDate); err != nil {
		return err
	}

	return nil
}

func (m *BankingTermDepositAccount) validateMaturityDate(formats strfmt.Registry) error {

	if err := validate.Required("maturityDate", "body", m.MaturityDate); err != nil {
		return err
	}

	return nil
}

func (m *BankingTermDepositAccount) validateMaturityInstructions(formats strfmt.Registry) error {

	if err := validate.Required("maturityInstructions", "body", m.MaturityInstructions); err != nil {
		return err
	}

	if err := validate.Required("maturityInstructions", "body", m.MaturityInstructions); err != nil {
		return err
	}

	if m.MaturityInstructions != nil {
		if err := m.MaturityInstructions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maturityInstructions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maturityInstructions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this banking term deposit account based on the context it is used
func (m *BankingTermDepositAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMaturityInstructions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingTermDepositAccount) contextValidateMaturityInstructions(ctx context.Context, formats strfmt.Registry) error {

	if m.MaturityInstructions != nil {
		if err := m.MaturityInstructions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maturityInstructions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maturityInstructions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankingTermDepositAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankingTermDepositAccount) UnmarshalBinary(b []byte) error {
	var res BankingTermDepositAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
