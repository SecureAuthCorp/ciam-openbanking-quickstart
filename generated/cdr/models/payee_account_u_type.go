// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PayeeAccountUType PayeeAccountUType
//
// Type of account object included. Valid values are: **account** A standard Australian account defined by BSB/Account Number. **card** A credit or charge card to pay to (note that PANs are masked). **payId** A PayID recognised by NPP
// Example: account
//
// swagger:model PayeeAccountUType
type PayeeAccountUType string

func NewPayeeAccountUType(value PayeeAccountUType) *PayeeAccountUType {
	v := value
	return &v
}

const (

	// PayeeAccountUTypeAccount captures enum value "account"
	PayeeAccountUTypeAccount PayeeAccountUType = "account"

	// PayeeAccountUTypeCard captures enum value "card"
	PayeeAccountUTypeCard PayeeAccountUType = "card"

	// PayeeAccountUTypePayID captures enum value "payId"
	PayeeAccountUTypePayID PayeeAccountUType = "payId"
)

// for schema
var payeeAccountUTypeEnum []interface{}

func init() {
	var res []PayeeAccountUType
	if err := json.Unmarshal([]byte(`["account","card","payId"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		payeeAccountUTypeEnum = append(payeeAccountUTypeEnum, v)
	}
}

func (m PayeeAccountUType) validatePayeeAccountUTypeEnum(path, location string, value PayeeAccountUType) error {
	if err := validate.EnumCase(path, location, value, payeeAccountUTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payee account u type
func (m PayeeAccountUType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePayeeAccountUTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this payee account u type based on context it is used
func (m PayeeAccountUType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
