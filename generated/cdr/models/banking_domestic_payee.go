// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankingDomesticPayee BankingDomesticPayee
//
// swagger:model BankingDomesticPayee
type BankingDomesticPayee struct {

	// account
	Account *BankingDomesticPayeeAccount `json:"account,omitempty"`

	// card
	Card *BankingDomesticPayeeCard `json:"card,omitempty"`

	// pay Id
	PayID *BankingDomesticPayeePayID `json:"payId,omitempty"`

	// payee account u type
	// Required: true
	PayeeAccountUType *PayeeAccountUType `json:"payeeAccountUType"`
}

// Validate validates this banking domestic payee
func (m *BankingDomesticPayee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayeeAccountUType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingDomesticPayee) validateAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *BankingDomesticPayee) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(m.Card) { // not required
		return nil
	}

	if m.Card != nil {
		if err := m.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("card")
			}
			return err
		}
	}

	return nil
}

func (m *BankingDomesticPayee) validatePayID(formats strfmt.Registry) error {
	if swag.IsZero(m.PayID) { // not required
		return nil
	}

	if m.PayID != nil {
		if err := m.PayID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payId")
			}
			return err
		}
	}

	return nil
}

func (m *BankingDomesticPayee) validatePayeeAccountUType(formats strfmt.Registry) error {

	if err := validate.Required("payeeAccountUType", "body", m.PayeeAccountUType); err != nil {
		return err
	}

	if err := validate.Required("payeeAccountUType", "body", m.PayeeAccountUType); err != nil {
		return err
	}

	if m.PayeeAccountUType != nil {
		if err := m.PayeeAccountUType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payeeAccountUType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payeeAccountUType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this banking domestic payee based on the context it is used
func (m *BankingDomesticPayee) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePayID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePayeeAccountUType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingDomesticPayee) contextValidateAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.Account != nil {
		if err := m.Account.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *BankingDomesticPayee) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if m.Card != nil {
		if err := m.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("card")
			}
			return err
		}
	}

	return nil
}

func (m *BankingDomesticPayee) contextValidatePayID(ctx context.Context, formats strfmt.Registry) error {

	if m.PayID != nil {
		if err := m.PayID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payId")
			}
			return err
		}
	}

	return nil
}

func (m *BankingDomesticPayee) contextValidatePayeeAccountUType(ctx context.Context, formats strfmt.Registry) error {

	if m.PayeeAccountUType != nil {
		if err := m.PayeeAccountUType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payeeAccountUType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payeeAccountUType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankingDomesticPayee) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankingDomesticPayee) UnmarshalBinary(b []byte) error {
	var res BankingDomesticPayee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
