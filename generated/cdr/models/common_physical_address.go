// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonPhysicalAddress CommonPhysicalAddress
//
// swagger:model CommonPhysicalAddress
type CommonPhysicalAddress struct {

	// address u type
	// Required: true
	AddressUType *AddressUType `json:"addressUType"`

	// paf
	Paf *CommonPAFAddress `json:"paf,omitempty"`

	// simple
	Simple *CommonSimpleAddress `json:"simple,omitempty"`
}

// Validate validates this common physical address
func (m *CommonPhysicalAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressUType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSimple(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonPhysicalAddress) validateAddressUType(formats strfmt.Registry) error {

	if err := validate.Required("addressUType", "body", m.AddressUType); err != nil {
		return err
	}

	if err := validate.Required("addressUType", "body", m.AddressUType); err != nil {
		return err
	}

	if m.AddressUType != nil {
		if err := m.AddressUType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addressUType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addressUType")
			}
			return err
		}
	}

	return nil
}

func (m *CommonPhysicalAddress) validatePaf(formats strfmt.Registry) error {
	if swag.IsZero(m.Paf) { // not required
		return nil
	}

	if m.Paf != nil {
		if err := m.Paf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paf")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paf")
			}
			return err
		}
	}

	return nil
}

func (m *CommonPhysicalAddress) validateSimple(formats strfmt.Registry) error {
	if swag.IsZero(m.Simple) { // not required
		return nil
	}

	if m.Simple != nil {
		if err := m.Simple.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("simple")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("simple")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this common physical address based on the context it is used
func (m *CommonPhysicalAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddressUType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSimple(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonPhysicalAddress) contextValidateAddressUType(ctx context.Context, formats strfmt.Registry) error {

	if m.AddressUType != nil {
		if err := m.AddressUType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addressUType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addressUType")
			}
			return err
		}
	}

	return nil
}

func (m *CommonPhysicalAddress) contextValidatePaf(ctx context.Context, formats strfmt.Registry) error {

	if m.Paf != nil {
		if err := m.Paf.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paf")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paf")
			}
			return err
		}
	}

	return nil
}

func (m *CommonPhysicalAddress) contextValidateSimple(ctx context.Context, formats strfmt.Registry) error {

	if m.Simple != nil {
		if err := m.Simple.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("simple")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("simple")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonPhysicalAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonPhysicalAddress) UnmarshalBinary(b []byte) error {
	var res CommonPhysicalAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
