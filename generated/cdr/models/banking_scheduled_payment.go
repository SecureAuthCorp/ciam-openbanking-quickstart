// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankingScheduledPayment BankingScheduledPayment
//
// swagger:model BankingScheduledPayment
type BankingScheduledPayment struct {

	// from
	// Required: true
	From *BankingScheduledPaymentFrom `json:"from"`

	// The short display name of the scheduled payment as provided by the customer if provided. Where a customer has not provided a nickname, a display name derived by the bank for the scheduled payment should be provided that is consistent with existing digital banking channels
	Nickname string `json:"nickname,omitempty"`

	// The reference for the transaction, if applicable, that will be provided by the originating institution for all payments in the payment set. Empty string if no data provided
	PayeeReference string `json:"payeeReference,omitempty"`

	// The reference for the transaction that will be used by the originating institution for the purposes of constructing a statement narrative on the payerâ€™s account. Empty string if no data provided
	// Required: true
	PayerReference *string `json:"payerReference"`

	// payment set
	// Required: true
	PaymentSet []*BankingScheduledPaymentSet `json:"paymentSet"`

	// recurrence
	// Required: true
	Recurrence *BankingScheduledPaymentRecurrence `json:"recurrence"`

	// A unique ID of the scheduled payment adhering to the standards for ID permanence
	// Required: true
	ScheduledPaymentID *string `json:"scheduledPaymentId"`

	// status
	// Required: true
	Status *Status1 `json:"status"`
}

// Validate validates this banking scheduled payment
func (m *BankingScheduledPayment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayerReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledPaymentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingScheduledPayment) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From); err != nil {
		return err
	}

	if m.From != nil {
		if err := m.From.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *BankingScheduledPayment) validatePayerReference(formats strfmt.Registry) error {

	if err := validate.Required("payerReference", "body", m.PayerReference); err != nil {
		return err
	}

	return nil
}

func (m *BankingScheduledPayment) validatePaymentSet(formats strfmt.Registry) error {

	if err := validate.Required("paymentSet", "body", m.PaymentSet); err != nil {
		return err
	}

	for i := 0; i < len(m.PaymentSet); i++ {
		if swag.IsZero(m.PaymentSet[i]) { // not required
			continue
		}

		if m.PaymentSet[i] != nil {
			if err := m.PaymentSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paymentSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("paymentSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BankingScheduledPayment) validateRecurrence(formats strfmt.Registry) error {

	if err := validate.Required("recurrence", "body", m.Recurrence); err != nil {
		return err
	}

	if m.Recurrence != nil {
		if err := m.Recurrence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recurrence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recurrence")
			}
			return err
		}
	}

	return nil
}

func (m *BankingScheduledPayment) validateScheduledPaymentID(formats strfmt.Registry) error {

	if err := validate.Required("scheduledPaymentId", "body", m.ScheduledPaymentID); err != nil {
		return err
	}

	return nil
}

func (m *BankingScheduledPayment) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this banking scheduled payment based on the context it is used
func (m *BankingScheduledPayment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFrom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecurrence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingScheduledPayment) contextValidateFrom(ctx context.Context, formats strfmt.Registry) error {

	if m.From != nil {
		if err := m.From.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *BankingScheduledPayment) contextValidatePaymentSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PaymentSet); i++ {

		if m.PaymentSet[i] != nil {
			if err := m.PaymentSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paymentSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("paymentSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BankingScheduledPayment) contextValidateRecurrence(ctx context.Context, formats strfmt.Registry) error {

	if m.Recurrence != nil {
		if err := m.Recurrence.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recurrence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recurrence")
			}
			return err
		}
	}

	return nil
}

func (m *BankingScheduledPayment) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankingScheduledPayment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankingScheduledPayment) UnmarshalBinary(b []byte) error {
	var res BankingScheduledPayment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
