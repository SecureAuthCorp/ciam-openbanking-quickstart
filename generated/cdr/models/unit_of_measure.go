// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UnitOfMeasure UnitOfMeasure
//
// The unit of measure that applies to the tierValueMinimum and tierValueMaximum values e.g. a **DOLLAR** amount. **PERCENT** (in the case of loan-to-value ratio or LVR). Tier term period representing a discrete number of **MONTH**'s or **DAY**'s (in the case of term deposit tiers)
// Example: DAY
//
// swagger:model UnitOfMeasure
type UnitOfMeasure string

func NewUnitOfMeasure(value UnitOfMeasure) *UnitOfMeasure {
	v := value
	return &v
}

const (

	// UnitOfMeasureDAY captures enum value "DAY"
	UnitOfMeasureDAY UnitOfMeasure = "DAY"

	// UnitOfMeasureDOLLAR captures enum value "DOLLAR"
	UnitOfMeasureDOLLAR UnitOfMeasure = "DOLLAR"

	// UnitOfMeasureMONTH captures enum value "MONTH"
	UnitOfMeasureMONTH UnitOfMeasure = "MONTH"

	// UnitOfMeasurePERCENT captures enum value "PERCENT"
	UnitOfMeasurePERCENT UnitOfMeasure = "PERCENT"
)

// for schema
var unitOfMeasureEnum []interface{}

func init() {
	var res []UnitOfMeasure
	if err := json.Unmarshal([]byte(`["DAY","DOLLAR","MONTH","PERCENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		unitOfMeasureEnum = append(unitOfMeasureEnum, v)
	}
}

func (m UnitOfMeasure) validateUnitOfMeasureEnum(path, location string, value UnitOfMeasure) error {
	if err := validate.EnumCase(path, location, value, unitOfMeasureEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this unit of measure
func (m UnitOfMeasure) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUnitOfMeasureEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this unit of measure based on context it is used
func (m UnitOfMeasure) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
