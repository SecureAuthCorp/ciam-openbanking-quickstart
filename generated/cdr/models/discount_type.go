// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DiscountType DiscountType
//
// The type of discount. See the next section for an overview of valid values and their meaning
// Example: BALANCE
//
// swagger:model DiscountType
type DiscountType string

func NewDiscountType(value DiscountType) *DiscountType {
	v := value
	return &v
}

const (

	// DiscountTypeBALANCE captures enum value "BALANCE"
	DiscountTypeBALANCE DiscountType = "BALANCE"

	// DiscountTypeDEPOSITS captures enum value "DEPOSITS"
	DiscountTypeDEPOSITS DiscountType = "DEPOSITS"

	// DiscountTypeELIGIBILITYONLY captures enum value "ELIGIBILITY_ONLY"
	DiscountTypeELIGIBILITYONLY DiscountType = "ELIGIBILITY_ONLY"

	// DiscountTypeFEECAP captures enum value "FEE_CAP"
	DiscountTypeFEECAP DiscountType = "FEE_CAP"

	// DiscountTypePAYMENTS captures enum value "PAYMENTS"
	DiscountTypePAYMENTS DiscountType = "PAYMENTS"
)

// for schema
var discountTypeEnum []interface{}

func init() {
	var res []DiscountType
	if err := json.Unmarshal([]byte(`["BALANCE","DEPOSITS","ELIGIBILITY_ONLY","FEE_CAP","PAYMENTS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		discountTypeEnum = append(discountTypeEnum, v)
	}
}

func (m DiscountType) validateDiscountTypeEnum(path, location string, value DiscountType) error {
	if err := validate.EnumCase(path, location, value, discountTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this discount type
func (m DiscountType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDiscountTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this discount type based on context it is used
func (m DiscountType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
