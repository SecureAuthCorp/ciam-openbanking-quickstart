// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ToUType ToUType
//
// The type of object provided that specifies the destination of the funds for the payment.
// Example: accountId
//
// swagger:model ToUType
type ToUType string

func NewToUType(value ToUType) *ToUType {
	v := value
	return &v
}

const (

	// ToUTypeAccountID captures enum value "accountId"
	ToUTypeAccountID ToUType = "accountId"

	// ToUTypeBiller captures enum value "biller"
	ToUTypeBiller ToUType = "biller"

	// ToUTypeDomestic captures enum value "domestic"
	ToUTypeDomestic ToUType = "domestic"

	// ToUTypeInternational captures enum value "international"
	ToUTypeInternational ToUType = "international"

	// ToUTypePayeeID captures enum value "payeeId"
	ToUTypePayeeID ToUType = "payeeId"
)

// for schema
var toUTypeEnum []interface{}

func init() {
	var res []ToUType
	if err := json.Unmarshal([]byte(`["accountId","biller","domestic","international","payeeId"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		toUTypeEnum = append(toUTypeEnum, v)
	}
}

func (m ToUType) validateToUTypeEnum(path, location string, value ToUType) error {
	if err := validate.EnumCase(path, location, value, toUTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this to u type
func (m ToUType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateToUTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this to u type based on context it is used
func (m ToUType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
