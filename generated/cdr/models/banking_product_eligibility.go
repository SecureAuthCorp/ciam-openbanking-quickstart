// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankingProductEligibility BankingProductEligibility
//
// swagger:model BankingProductEligibility
type BankingProductEligibility struct {

	// Display text providing more information on the [eligibility](#tocSproducteligibilitytypedoc) criteria. Mandatory if the field is set to OTHER
	AdditionalInfo string `json:"additionalInfo,omitempty"`

	// Link to a web page with more information on this eligibility criteria
	AdditionalInfoURI string `json:"additionalInfoUri,omitempty"`

	// Generic field containing additional information relevant to the [eligibilityType](#tocSproducteligibilitytypedoc) specified. Whether mandatory or not is dependent on the value of [eligibilityType](#tocSproducteligibilitytypedoc)
	AdditionalValue string `json:"additionalValue,omitempty"`

	// eligibility type
	// Required: true
	EligibilityType *EligibilityType `json:"eligibilityType"`
}

// Validate validates this banking product eligibility
func (m *BankingProductEligibility) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEligibilityType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingProductEligibility) validateEligibilityType(formats strfmt.Registry) error {

	if err := validate.Required("eligibilityType", "body", m.EligibilityType); err != nil {
		return err
	}

	if err := validate.Required("eligibilityType", "body", m.EligibilityType); err != nil {
		return err
	}

	if m.EligibilityType != nil {
		if err := m.EligibilityType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eligibilityType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eligibilityType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this banking product eligibility based on the context it is used
func (m *BankingProductEligibility) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEligibilityType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingProductEligibility) contextValidateEligibilityType(ctx context.Context, formats strfmt.Registry) error {

	if m.EligibilityType != nil {
		if err := m.EligibilityType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eligibilityType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eligibilityType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankingProductEligibility) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankingProductEligibility) UnmarshalBinary(b []byte) error {
	var res BankingProductEligibility
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
