// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Type3 Type3
//
// The type of the digital wallet identifier
// Example: EMAIL
//
// swagger:model Type3
type Type3 string

func NewType3(value Type3) *Type3 {
	v := value
	return &v
}

const (

	// Type3EMAIL captures enum value "EMAIL"
	Type3EMAIL Type3 = "EMAIL"

	// Type3CONTACTNAME captures enum value "CONTACT_NAME"
	Type3CONTACTNAME Type3 = "CONTACT_NAME"

	// Type3TELEPHONE captures enum value "TELEPHONE"
	Type3TELEPHONE Type3 = "TELEPHONE"
)

// for schema
var type3Enum []interface{}

func init() {
	var res []Type3
	if err := json.Unmarshal([]byte(`["EMAIL","CONTACT_NAME","TELEPHONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		type3Enum = append(type3Enum, v)
	}
}

func (m Type3) validateType3Enum(path, location string, value Type3) error {
	if err := validate.EnumCase(path, location, value, type3Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this type3
func (m Type3) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateType3Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this type3 based on context it is used
func (m Type3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
