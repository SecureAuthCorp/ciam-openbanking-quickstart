// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NonBusinessDayTreatment NonBusinessDayTreatment
//
// Enumerated field giving the treatment where a scheduled payment date is not a business day. If absent assumed to be ON.<br/>**AFTER** - If a scheduled payment date is a non-business day the payment will be made on the first business day after the scheduled payment date.<br/>**BEFORE** - If a scheduled payment date is a non-business day the payment will be made on the first business day before the scheduled payment date.<br/>**ON** - If a scheduled payment date is a non-business day the payment will be made on that day regardless.<br/>**ONLY** - Payments only occur on business days. If a scheduled payment date is a non-business day the payment will be ignored
// Example: AFTER
//
// swagger:model NonBusinessDayTreatment
type NonBusinessDayTreatment string

func NewNonBusinessDayTreatment(value NonBusinessDayTreatment) *NonBusinessDayTreatment {
	v := value
	return &v
}

const (

	// NonBusinessDayTreatmentAFTER captures enum value "AFTER"
	NonBusinessDayTreatmentAFTER NonBusinessDayTreatment = "AFTER"

	// NonBusinessDayTreatmentBEFORE captures enum value "BEFORE"
	NonBusinessDayTreatmentBEFORE NonBusinessDayTreatment = "BEFORE"

	// NonBusinessDayTreatmentON captures enum value "ON"
	NonBusinessDayTreatmentON NonBusinessDayTreatment = "ON"

	// NonBusinessDayTreatmentONLY captures enum value "ONLY"
	NonBusinessDayTreatmentONLY NonBusinessDayTreatment = "ONLY"
)

// for schema
var nonBusinessDayTreatmentEnum []interface{}

func init() {
	var res []NonBusinessDayTreatment
	if err := json.Unmarshal([]byte(`["AFTER","BEFORE","ON","ONLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nonBusinessDayTreatmentEnum = append(nonBusinessDayTreatmentEnum, v)
	}
}

func (m NonBusinessDayTreatment) validateNonBusinessDayTreatmentEnum(path, location string, value NonBusinessDayTreatment) error {
	if err := validate.EnumCase(path, location, value, nonBusinessDayTreatmentEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this non business day treatment
func (m NonBusinessDayTreatment) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNonBusinessDayTreatmentEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this non business day treatment based on context it is used
func (m NonBusinessDayTreatment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
