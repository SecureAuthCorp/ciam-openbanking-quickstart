// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankingProductFeatureV2 BankingProductFeatureV2
//
// swagger:model BankingProductFeatureV2
type BankingProductFeatureV2 struct {

	// Display text providing more information on the feature. Mandatory if the [feature type](#tocSproductfeaturetypedoc) is set to OTHER
	AdditionalInfo string `json:"additionalInfo,omitempty"`

	// Link to a web page with more information on this feature
	AdditionalInfoURI string `json:"additionalInfoUri,omitempty"`

	// Generic field containing additional information relevant to the [featureType](#tocSproductfeaturetypedoc) specified. Whether mandatory or not is dependent on the value of the [featureType.](#tocSproductfeaturetypedoc)
	AdditionalValue string `json:"additionalValue,omitempty"`

	// feature type
	// Required: true
	FeatureType *FeatureType `json:"featureType"`
}

// Validate validates this banking product feature v2
func (m *BankingProductFeatureV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeatureType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingProductFeatureV2) validateFeatureType(formats strfmt.Registry) error {

	if err := validate.Required("featureType", "body", m.FeatureType); err != nil {
		return err
	}

	if err := validate.Required("featureType", "body", m.FeatureType); err != nil {
		return err
	}

	if m.FeatureType != nil {
		if err := m.FeatureType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("featureType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("featureType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this banking product feature v2 based on the context it is used
func (m *BankingProductFeatureV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeatureType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingProductFeatureV2) contextValidateFeatureType(ctx context.Context, formats strfmt.Registry) error {

	if m.FeatureType != nil {
		if err := m.FeatureType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("featureType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("featureType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankingProductFeatureV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankingProductFeatureV2) UnmarshalBinary(b []byte) error {
	var res BankingProductFeatureV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
