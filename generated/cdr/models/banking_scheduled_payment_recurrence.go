// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankingScheduledPaymentRecurrence BankingScheduledPaymentRecurrence
//
// Object containing the detail of the schedule for the payment
//
// swagger:model BankingScheduledPaymentRecurrence
type BankingScheduledPaymentRecurrence struct {

	// event based
	EventBased *BankingScheduledPaymentRecurrenceEventBased `json:"eventBased,omitempty"`

	// interval schedule
	IntervalSchedule *BankingScheduledPaymentRecurrenceIntervalSchedule `json:"intervalSchedule,omitempty"`

	// last week day
	LastWeekDay *BankingScheduledPaymentRecurrenceLastWeekday `json:"lastWeekDay,omitempty"`

	// The date of the next payment under the recurrence schedule
	NextPaymentDate string `json:"nextPaymentDate,omitempty"`

	// once off
	OnceOff *BankingScheduledPaymentRecurrenceOnceOff `json:"onceOff,omitempty"`

	// recurrence u type
	// Required: true
	RecurrenceUType *RecurrenceUType `json:"recurrenceUType"`
}

// Validate validates this banking scheduled payment recurrence
func (m *BankingScheduledPaymentRecurrence) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventBased(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntervalSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastWeekDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnceOff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecurrenceUType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingScheduledPaymentRecurrence) validateEventBased(formats strfmt.Registry) error {
	if swag.IsZero(m.EventBased) { // not required
		return nil
	}

	if m.EventBased != nil {
		if err := m.EventBased.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventBased")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventBased")
			}
			return err
		}
	}

	return nil
}

func (m *BankingScheduledPaymentRecurrence) validateIntervalSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.IntervalSchedule) { // not required
		return nil
	}

	if m.IntervalSchedule != nil {
		if err := m.IntervalSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intervalSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("intervalSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *BankingScheduledPaymentRecurrence) validateLastWeekDay(formats strfmt.Registry) error {
	if swag.IsZero(m.LastWeekDay) { // not required
		return nil
	}

	if m.LastWeekDay != nil {
		if err := m.LastWeekDay.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastWeekDay")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastWeekDay")
			}
			return err
		}
	}

	return nil
}

func (m *BankingScheduledPaymentRecurrence) validateOnceOff(formats strfmt.Registry) error {
	if swag.IsZero(m.OnceOff) { // not required
		return nil
	}

	if m.OnceOff != nil {
		if err := m.OnceOff.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onceOff")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onceOff")
			}
			return err
		}
	}

	return nil
}

func (m *BankingScheduledPaymentRecurrence) validateRecurrenceUType(formats strfmt.Registry) error {

	if err := validate.Required("recurrenceUType", "body", m.RecurrenceUType); err != nil {
		return err
	}

	if err := validate.Required("recurrenceUType", "body", m.RecurrenceUType); err != nil {
		return err
	}

	if m.RecurrenceUType != nil {
		if err := m.RecurrenceUType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recurrenceUType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recurrenceUType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this banking scheduled payment recurrence based on the context it is used
func (m *BankingScheduledPaymentRecurrence) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventBased(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIntervalSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastWeekDay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnceOff(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecurrenceUType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankingScheduledPaymentRecurrence) contextValidateEventBased(ctx context.Context, formats strfmt.Registry) error {

	if m.EventBased != nil {
		if err := m.EventBased.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventBased")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventBased")
			}
			return err
		}
	}

	return nil
}

func (m *BankingScheduledPaymentRecurrence) contextValidateIntervalSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.IntervalSchedule != nil {
		if err := m.IntervalSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intervalSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("intervalSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *BankingScheduledPaymentRecurrence) contextValidateLastWeekDay(ctx context.Context, formats strfmt.Registry) error {

	if m.LastWeekDay != nil {
		if err := m.LastWeekDay.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastWeekDay")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastWeekDay")
			}
			return err
		}
	}

	return nil
}

func (m *BankingScheduledPaymentRecurrence) contextValidateOnceOff(ctx context.Context, formats strfmt.Registry) error {

	if m.OnceOff != nil {
		if err := m.OnceOff.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onceOff")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onceOff")
			}
			return err
		}
	}

	return nil
}

func (m *BankingScheduledPaymentRecurrence) contextValidateRecurrenceUType(ctx context.Context, formats strfmt.Registry) error {

	if m.RecurrenceUType != nil {
		if err := m.RecurrenceUType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recurrenceUType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recurrenceUType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankingScheduledPaymentRecurrence) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankingScheduledPaymentRecurrence) UnmarshalBinary(b []byte) error {
	var res BankingScheduledPaymentRecurrence
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
