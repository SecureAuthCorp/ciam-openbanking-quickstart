// Code generated by go-swagger; DO NOT EDIT.

package banking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListPayeesParams creates a new ListPayeesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListPayeesParams() *ListPayeesParams {
	return &ListPayeesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListPayeesParamsWithTimeout creates a new ListPayeesParams object
// with the ability to set a timeout on a request.
func NewListPayeesParamsWithTimeout(timeout time.Duration) *ListPayeesParams {
	return &ListPayeesParams{
		timeout: timeout,
	}
}

// NewListPayeesParamsWithContext creates a new ListPayeesParams object
// with the ability to set a context for a request.
func NewListPayeesParamsWithContext(ctx context.Context) *ListPayeesParams {
	return &ListPayeesParams{
		Context: ctx,
	}
}

// NewListPayeesParamsWithHTTPClient creates a new ListPayeesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListPayeesParamsWithHTTPClient(client *http.Client) *ListPayeesParams {
	return &ListPayeesParams{
		HTTPClient: client,
	}
}

/* ListPayeesParams contains all the parameters to send to the API endpoint
   for the list payees operation.

   Typically these are written to a http.Request.
*/
type ListPayeesParams struct {

	/* Page.

	   Page of results to request (standard pagination)

	   Format: int32
	   Default: 1
	*/
	Page *int32

	/* PageSize.

	   Page size to request. Default is 25 (standard pagination)

	   Format: int32
	   Default: 25
	*/
	PageSize *int32

	/* Type.

	   Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL

	   Default: "ALL"
	*/
	Type *string

	/* XCdsClientHeaders.

	   The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.
	*/
	XCdsClientHeaders *string

	/* XFapiAuthDate.

	   The time when the customer last logged in to the Data Recipient Software Product. Required for all resource calls (customer present and unattended) if the customer has logged in. Not to be included for unauthenticated calls.
	*/
	XFapiAuthDate *string

	/* XFapiCustomerIPAddress.

	   The customer's original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
	*/
	XFapiCustomerIPAddress *string

	/* XFapiInteractionID.

	   An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
	*/
	XFapiInteractionID *string

	/* XMinv.

	   Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.
	*/
	XMinv *string

	/* Xv.

	   Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)
	*/
	Xv string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list payees params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListPayeesParams) WithDefaults() *ListPayeesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list payees params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListPayeesParams) SetDefaults() {
	var (
		pageDefault = int32(1)

		pageSizeDefault = int32(25)

		typeVarDefault = string("ALL")
	)

	val := ListPayeesParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,
		Type:     &typeVarDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list payees params
func (o *ListPayeesParams) WithTimeout(timeout time.Duration) *ListPayeesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list payees params
func (o *ListPayeesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list payees params
func (o *ListPayeesParams) WithContext(ctx context.Context) *ListPayeesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list payees params
func (o *ListPayeesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list payees params
func (o *ListPayeesParams) WithHTTPClient(client *http.Client) *ListPayeesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list payees params
func (o *ListPayeesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPage adds the page to the list payees params
func (o *ListPayeesParams) WithPage(page *int32) *ListPayeesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list payees params
func (o *ListPayeesParams) SetPage(page *int32) {
	o.Page = page
}

// WithPageSize adds the pageSize to the list payees params
func (o *ListPayeesParams) WithPageSize(pageSize *int32) *ListPayeesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list payees params
func (o *ListPayeesParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithType adds the typeVar to the list payees params
func (o *ListPayeesParams) WithType(typeVar *string) *ListPayeesParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the list payees params
func (o *ListPayeesParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithXCdsClientHeaders adds the xCdsClientHeaders to the list payees params
func (o *ListPayeesParams) WithXCdsClientHeaders(xCdsClientHeaders *string) *ListPayeesParams {
	o.SetXCdsClientHeaders(xCdsClientHeaders)
	return o
}

// SetXCdsClientHeaders adds the xCdsClientHeaders to the list payees params
func (o *ListPayeesParams) SetXCdsClientHeaders(xCdsClientHeaders *string) {
	o.XCdsClientHeaders = xCdsClientHeaders
}

// WithXFapiAuthDate adds the xFapiAuthDate to the list payees params
func (o *ListPayeesParams) WithXFapiAuthDate(xFapiAuthDate *string) *ListPayeesParams {
	o.SetXFapiAuthDate(xFapiAuthDate)
	return o
}

// SetXFapiAuthDate adds the xFapiAuthDate to the list payees params
func (o *ListPayeesParams) SetXFapiAuthDate(xFapiAuthDate *string) {
	o.XFapiAuthDate = xFapiAuthDate
}

// WithXFapiCustomerIPAddress adds the xFapiCustomerIPAddress to the list payees params
func (o *ListPayeesParams) WithXFapiCustomerIPAddress(xFapiCustomerIPAddress *string) *ListPayeesParams {
	o.SetXFapiCustomerIPAddress(xFapiCustomerIPAddress)
	return o
}

// SetXFapiCustomerIPAddress adds the xFapiCustomerIpAddress to the list payees params
func (o *ListPayeesParams) SetXFapiCustomerIPAddress(xFapiCustomerIPAddress *string) {
	o.XFapiCustomerIPAddress = xFapiCustomerIPAddress
}

// WithXFapiInteractionID adds the xFapiInteractionID to the list payees params
func (o *ListPayeesParams) WithXFapiInteractionID(xFapiInteractionID *string) *ListPayeesParams {
	o.SetXFapiInteractionID(xFapiInteractionID)
	return o
}

// SetXFapiInteractionID adds the xFapiInteractionId to the list payees params
func (o *ListPayeesParams) SetXFapiInteractionID(xFapiInteractionID *string) {
	o.XFapiInteractionID = xFapiInteractionID
}

// WithXMinv adds the xMinv to the list payees params
func (o *ListPayeesParams) WithXMinv(xMinv *string) *ListPayeesParams {
	o.SetXMinv(xMinv)
	return o
}

// SetXMinv adds the xMinV to the list payees params
func (o *ListPayeesParams) SetXMinv(xMinv *string) {
	o.XMinv = xMinv
}

// WithXv adds the xv to the list payees params
func (o *ListPayeesParams) WithXv(xv string) *ListPayeesParams {
	o.SetXv(xv)
	return o
}

// SetXv adds the xV to the list payees params
func (o *ListPayeesParams) SetXv(xv string) {
	o.Xv = xv
}

// WriteToRequest writes these params to a swagger request
func (o *ListPayeesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page-size
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page-size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.XCdsClientHeaders != nil {

		// header param x-cds-client-headers
		if err := r.SetHeaderParam("x-cds-client-headers", *o.XCdsClientHeaders); err != nil {
			return err
		}
	}

	if o.XFapiAuthDate != nil {

		// header param x-fapi-auth-date
		if err := r.SetHeaderParam("x-fapi-auth-date", *o.XFapiAuthDate); err != nil {
			return err
		}
	}

	if o.XFapiCustomerIPAddress != nil {

		// header param x-fapi-customer-ip-address
		if err := r.SetHeaderParam("x-fapi-customer-ip-address", *o.XFapiCustomerIPAddress); err != nil {
			return err
		}
	}

	if o.XFapiInteractionID != nil {

		// header param x-fapi-interaction-id
		if err := r.SetHeaderParam("x-fapi-interaction-id", *o.XFapiInteractionID); err != nil {
			return err
		}
	}

	if o.XMinv != nil {

		// header param x-min-v
		if err := r.SetHeaderParam("x-min-v", *o.XMinv); err != nil {
			return err
		}
	}

	// header param x-v
	if err := r.SetHeaderParam("x-v", o.Xv); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
